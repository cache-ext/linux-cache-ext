<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2134" onload="init(evt)" viewBox="0 0 1200 2134" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2134" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="2117.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="2117.00"> </text><svg id="frames" x="10" width="1180" total_samples="136049411681"><g><title>do_cow_fault (20,463,894 samples, 0.02%)</title><rect x="0.0361%" y="1877" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="49048636" fg:w="20463894"/><text x="0.2861%" y="1887.50"></text></g><g><title>do_pte_missing (32,447,408 samples, 0.02%)</title><rect x="0.0305%" y="1893" width="0.0238%" height="15" fill="rgb(217,0,24)" fg:x="41553980" fg:w="32447408"/><text x="0.2805%" y="1903.50"></text></g><g><title>handle_mm_fault (36,110,279 samples, 0.03%)</title><rect x="0.0283%" y="1941" width="0.0265%" height="15" fill="rgb(221,193,54)" fg:x="38521928" fg:w="36110279"/><text x="0.2783%" y="1951.50"></text></g><g><title>__handle_mm_fault (36,110,279 samples, 0.03%)</title><rect x="0.0283%" y="1925" width="0.0265%" height="15" fill="rgb(248,212,6)" fg:x="38521928" fg:w="36110279"/><text x="0.2783%" y="1935.50"></text></g><g><title>handle_pte_fault (33,744,869 samples, 0.02%)</title><rect x="0.0301%" y="1909" width="0.0248%" height="15" fill="rgb(208,68,35)" fg:x="40887338" fg:w="33744869"/><text x="0.2801%" y="1919.50"></text></g><g><title>do_user_addr_fault (41,684,449 samples, 0.03%)</title><rect x="0.0274%" y="1957" width="0.0306%" height="15" fill="rgb(232,128,0)" fg:x="37217745" fg:w="41684449"/><text x="0.2774%" y="1967.50"></text></g><g><title>exc_page_fault (42,323,875 samples, 0.03%)</title><rect x="0.0274%" y="1973" width="0.0311%" height="15" fill="rgb(207,160,47)" fg:x="37217745" fg:w="42323875"/><text x="0.2774%" y="1983.50"></text></g><g><title>asm_exc_page_fault (44,500,047 samples, 0.03%)</title><rect x="0.0263%" y="1989" width="0.0327%" height="15" fill="rgb(228,23,34)" fg:x="35743082" fg:w="44500047"/><text x="0.2763%" y="1999.50"></text></g><g><title>_dl_relocate_object (61,879,552 samples, 0.05%)</title><rect x="0.0184%" y="2005" width="0.0455%" height="15" fill="rgb(218,30,26)" fg:x="25061643" fg:w="61879552"/><text x="0.2684%" y="2015.50"></text></g><g><title>_dl_sysdep_start (63,932,645 samples, 0.05%)</title><rect x="0.0180%" y="2037" width="0.0470%" height="15" fill="rgb(220,122,19)" fg:x="24423942" fg:w="63932645"/><text x="0.2680%" y="2047.50"></text></g><g><title>dl_main (63,932,645 samples, 0.05%)</title><rect x="0.0180%" y="2021" width="0.0470%" height="15" fill="rgb(250,228,42)" fg:x="24423942" fg:w="63932645"/><text x="0.2680%" y="2031.50"></text></g><g><title>[unknown] (79,572,610 samples, 0.06%)</title><rect x="0.0080%" y="2053" width="0.0585%" height="15" fill="rgb(240,193,28)" fg:x="10945111" fg:w="79572610"/><text x="0.2580%" y="2063.50"></text></g><g><title>bpftool (119,158,422 samples, 0.09%)</title><rect x="0.0005%" y="2069" width="0.0876%" height="15" fill="rgb(216,20,37)" fg:x="708711" fg:w="119158422"/><text x="0.2505%" y="2079.50"></text></g><g><title>cpuUsage.sh (19,921,194 samples, 0.01%)</title><rect x="0.0957%" y="2069" width="0.0146%" height="15" fill="rgb(206,188,39)" fg:x="130254559" fg:w="19921194"/><text x="0.3457%" y="2079.50"></text></g><g><title>grep (15,898,606 samples, 0.01%)</title><rect x="0.1121%" y="2069" width="0.0117%" height="15" fill="rgb(217,207,13)" fg:x="152544517" fg:w="15898606"/><text x="0.3621%" y="2079.50"></text></g><g><title>user_path_at_empty (14,773,291 samples, 0.01%)</title><rect x="0.1386%" y="1957" width="0.0109%" height="15" fill="rgb(231,73,38)" fg:x="188572781" fg:w="14773291"/><text x="0.3886%" y="1967.50"></text></g><g><title>__x64_sys_readlink (26,836,542 samples, 0.02%)</title><rect x="0.1381%" y="1989" width="0.0197%" height="15" fill="rgb(225,20,46)" fg:x="187825534" fg:w="26836542"/><text x="0.3881%" y="1999.50"></text></g><g><title>do_readlinkat (26,836,542 samples, 0.02%)</title><rect x="0.1381%" y="1973" width="0.0197%" height="15" fill="rgb(210,31,41)" fg:x="187825534" fg:w="26836542"/><text x="0.3881%" y="1983.50"></text></g><g><title>entry_SYSCALL_64 (29,073,372 samples, 0.02%)</title><rect x="0.1370%" y="2021" width="0.0214%" height="15" fill="rgb(221,200,47)" fg:x="186335455" fg:w="29073372"/><text x="0.3870%" y="2031.50"></text></g><g><title>do_syscall_64 (28,352,317 samples, 0.02%)</title><rect x="0.1375%" y="2005" width="0.0208%" height="15" fill="rgb(226,26,5)" fg:x="187056510" fg:w="28352317"/><text x="0.3875%" y="2015.50"></text></g><g><title>__GI___readlink (31,301,341 samples, 0.02%)</title><rect x="0.1370%" y="2037" width="0.0230%" height="15" fill="rgb(249,33,26)" fg:x="186335455" fg:w="31301341"/><text x="0.3870%" y="2047.50"></text></g><g><title>[unknown] (43,587,871 samples, 0.03%)</title><rect x="0.1331%" y="2053" width="0.0320%" height="15" fill="rgb(235,183,28)" fg:x="181121962" fg:w="43587871"/><text x="0.3831%" y="2063.50"></text></g><g><title>entry_SYSCALL_64 (14,468,141 samples, 0.01%)</title><rect x="0.1707%" y="2037" width="0.0106%" height="15" fill="rgb(221,5,38)" fg:x="232198246" fg:w="14468141"/><text x="0.4207%" y="2047.50"></text></g><g><title>do_syscall_64 (14,468,141 samples, 0.01%)</title><rect x="0.1707%" y="2021" width="0.0106%" height="15" fill="rgb(247,18,42)" fg:x="232198246" fg:w="14468141"/><text x="0.4207%" y="2031.50"></text></g><g><title>statx (15,805,772 samples, 0.01%)</title><rect x="0.1702%" y="2053" width="0.0116%" height="15" fill="rgb(241,131,45)" fg:x="231579163" fg:w="15805772"/><text x="0.4202%" y="2063.50"></text></g><g><title>ls (68,565,348 samples, 0.05%)</title><rect x="0.1320%" y="2069" width="0.0504%" height="15" fill="rgb(249,31,29)" fg:x="179568468" fg:w="68565348"/><text x="0.3820%" y="2079.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (28,159,222 samples, 0.02%)</title><rect x="0.1955%" y="37" width="0.0207%" height="15" fill="rgb(225,111,53)" fg:x="265952161" fg:w="28159222"/><text x="0.4455%" y="47.50"></text></g><g><title>InotifyBackend::handleSubscription (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="2053" width="0.0230%" height="15" fill="rgb(238,160,17)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="2063.50"></text></g><g><title>Watcher::isIgnored (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="2037" width="0.0230%" height="15" fill="rgb(214,148,48)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="2047.50"></text></g><g><title>Glob::isIgnored (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="2021" width="0.0230%" height="15" fill="rgb(232,36,49)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="2031.50"></text></g><g><title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;, (std::__detail::_RegexExecutorPolicy)0, true&gt; (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="2005" width="0.0230%" height="15" fill="rgb(209,103,24)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1989" width="0.0230%" height="15" fill="rgb(229,88,8)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1973" width="0.0230%" height="15" fill="rgb(213,181,19)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1957" width="0.0230%" height="15" fill="rgb(254,191,54)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1941" width="0.0230%" height="15" fill="rgb(241,83,37)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1925" width="0.0230%" height="15" fill="rgb(233,36,39)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1909" width="0.0230%" height="15" fill="rgb(226,3,54)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1893" width="0.0230%" height="15" fill="rgb(245,192,40)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1877" width="0.0230%" height="15" fill="rgb(238,167,29)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1861" width="0.0230%" height="15" fill="rgb(232,182,51)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1845" width="0.0230%" height="15" fill="rgb(231,60,39)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1829" width="0.0230%" height="15" fill="rgb(208,69,12)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1813" width="0.0230%" height="15" fill="rgb(235,93,37)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1797" width="0.0230%" height="15" fill="rgb(213,116,39)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1781" width="0.0230%" height="15" fill="rgb(222,207,29)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1765" width="0.0230%" height="15" fill="rgb(206,96,30)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1749" width="0.0230%" height="15" fill="rgb(218,138,4)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1733" width="0.0230%" height="15" fill="rgb(250,191,14)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1717" width="0.0230%" height="15" fill="rgb(239,60,40)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1701" width="0.0230%" height="15" fill="rgb(206,27,48)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1685" width="0.0230%" height="15" fill="rgb(225,35,8)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1669" width="0.0230%" height="15" fill="rgb(250,213,24)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1653" width="0.0230%" height="15" fill="rgb(247,123,22)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1637" width="0.0230%" height="15" fill="rgb(231,138,38)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1621" width="0.0230%" height="15" fill="rgb(231,145,46)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1605" width="0.0230%" height="15" fill="rgb(251,118,11)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1589" width="0.0230%" height="15" fill="rgb(217,147,25)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1573" width="0.0230%" height="15" fill="rgb(247,81,37)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1557" width="0.0230%" height="15" fill="rgb(209,12,38)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1541" width="0.0230%" height="15" fill="rgb(227,1,9)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1525" width="0.0230%" height="15" fill="rgb(248,47,43)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1509" width="0.0230%" height="15" fill="rgb(221,10,30)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1493" width="0.0230%" height="15" fill="rgb(210,229,1)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1477" width="0.0230%" height="15" fill="rgb(222,148,37)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1461" width="0.0230%" height="15" fill="rgb(234,67,33)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1445" width="0.0230%" height="15" fill="rgb(247,98,35)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1429" width="0.0230%" height="15" fill="rgb(247,138,52)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1413" width="0.0230%" height="15" fill="rgb(213,79,30)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1397" width="0.0230%" height="15" fill="rgb(246,177,23)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1381" width="0.0230%" height="15" fill="rgb(230,62,27)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1365" width="0.0230%" height="15" fill="rgb(216,154,8)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1349" width="0.0230%" height="15" fill="rgb(244,35,45)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1333" width="0.0230%" height="15" fill="rgb(251,115,12)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1317" width="0.0230%" height="15" fill="rgb(240,54,50)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1301" width="0.0230%" height="15" fill="rgb(233,84,52)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1285" width="0.0230%" height="15" fill="rgb(207,117,47)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1269" width="0.0230%" height="15" fill="rgb(249,43,39)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1253" width="0.0230%" height="15" fill="rgb(209,38,44)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1237" width="0.0230%" height="15" fill="rgb(236,212,23)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1221" width="0.0230%" height="15" fill="rgb(242,79,21)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1205" width="0.0230%" height="15" fill="rgb(211,96,35)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1189" width="0.0230%" height="15" fill="rgb(253,215,40)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1173" width="0.0230%" height="15" fill="rgb(211,81,21)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1157" width="0.0230%" height="15" fill="rgb(208,190,38)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1141" width="0.0230%" height="15" fill="rgb(235,213,38)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1125" width="0.0230%" height="15" fill="rgb(237,122,38)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1109" width="0.0230%" height="15" fill="rgb(244,218,35)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1093" width="0.0230%" height="15" fill="rgb(240,68,47)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1077" width="0.0230%" height="15" fill="rgb(210,16,53)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1061" width="0.0230%" height="15" fill="rgb(235,124,12)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1045" width="0.0230%" height="15" fill="rgb(224,169,11)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1029" width="0.0230%" height="15" fill="rgb(250,166,2)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="1013" width="0.0230%" height="15" fill="rgb(242,216,29)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="997" width="0.0230%" height="15" fill="rgb(230,116,27)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="981" width="0.0230%" height="15" fill="rgb(228,99,48)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="965" width="0.0230%" height="15" fill="rgb(253,11,6)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="949" width="0.0230%" height="15" fill="rgb(247,143,39)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="933" width="0.0230%" height="15" fill="rgb(236,97,10)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="917" width="0.0230%" height="15" fill="rgb(233,208,19)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="901" width="0.0230%" height="15" fill="rgb(216,164,2)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="885" width="0.0230%" height="15" fill="rgb(220,129,5)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="869" width="0.0230%" height="15" fill="rgb(242,17,10)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="853" width="0.0230%" height="15" fill="rgb(242,107,0)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="837" width="0.0230%" height="15" fill="rgb(251,28,31)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="821" width="0.0230%" height="15" fill="rgb(233,223,10)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="805" width="0.0230%" height="15" fill="rgb(215,21,27)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="789" width="0.0230%" height="15" fill="rgb(232,23,21)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="773" width="0.0230%" height="15" fill="rgb(244,5,23)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="757" width="0.0230%" height="15" fill="rgb(226,81,46)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="741" width="0.0230%" height="15" fill="rgb(247,70,30)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="725" width="0.0230%" height="15" fill="rgb(212,68,19)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="709" width="0.0230%" height="15" fill="rgb(240,187,13)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="693" width="0.0230%" height="15" fill="rgb(223,113,26)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="677" width="0.0230%" height="15" fill="rgb(206,192,2)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="661" width="0.0230%" height="15" fill="rgb(241,108,4)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="645" width="0.0230%" height="15" fill="rgb(247,173,49)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="629" width="0.0230%" height="15" fill="rgb(224,114,35)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="613" width="0.0230%" height="15" fill="rgb(245,159,27)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="597" width="0.0230%" height="15" fill="rgb(245,172,44)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="581" width="0.0230%" height="15" fill="rgb(236,23,11)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="565" width="0.0230%" height="15" fill="rgb(205,117,38)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="549" width="0.0230%" height="15" fill="rgb(237,72,25)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="533" width="0.0230%" height="15" fill="rgb(244,70,9)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="517" width="0.0230%" height="15" fill="rgb(217,125,39)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="501" width="0.0230%" height="15" fill="rgb(235,36,10)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="485" width="0.0230%" height="15" fill="rgb(251,123,47)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="469" width="0.0230%" height="15" fill="rgb(221,13,13)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="453" width="0.0230%" height="15" fill="rgb(238,131,9)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="437" width="0.0230%" height="15" fill="rgb(211,50,8)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="421" width="0.0230%" height="15" fill="rgb(245,182,24)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="405" width="0.0230%" height="15" fill="rgb(242,14,37)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="389" width="0.0230%" height="15" fill="rgb(246,228,12)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="373" width="0.0230%" height="15" fill="rgb(213,55,15)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="357" width="0.0230%" height="15" fill="rgb(209,9,3)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="341" width="0.0230%" height="15" fill="rgb(230,59,30)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="325" width="0.0230%" height="15" fill="rgb(209,121,21)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="309" width="0.0230%" height="15" fill="rgb(220,109,13)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="293" width="0.0230%" height="15" fill="rgb(232,18,1)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="277" width="0.0230%" height="15" fill="rgb(215,41,42)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="261" width="0.0230%" height="15" fill="rgb(224,123,36)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="245" width="0.0230%" height="15" fill="rgb(240,125,3)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="229" width="0.0230%" height="15" fill="rgb(205,98,50)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="213" width="0.0230%" height="15" fill="rgb(205,185,37)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="197" width="0.0230%" height="15" fill="rgb(238,207,15)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="181" width="0.0230%" height="15" fill="rgb(213,199,42)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="165" width="0.0230%" height="15" fill="rgb(235,201,11)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="149" width="0.0230%" height="15" fill="rgb(207,46,11)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="133" width="0.0230%" height="15" fill="rgb(241,35,35)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="117" width="0.0230%" height="15" fill="rgb(243,32,47)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="101" width="0.0230%" height="15" fill="rgb(247,202,23)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="85" width="0.0230%" height="15" fill="rgb(219,102,11)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="69" width="0.0230%" height="15" fill="rgb(243,110,44)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,265,323 samples, 0.02%)</title><rect x="0.1938%" y="53" width="0.0230%" height="15" fill="rgb(222,74,54)" fg:x="263640135" fg:w="31265323"/><text x="0.4438%" y="63.50"></text></g><g><title>Watcher::isIgnored (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="2053" width="0.0107%" height="15" fill="rgb(216,99,12)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="2063.50"></text></g><g><title>Glob::isIgnored (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="2037" width="0.0107%" height="15" fill="rgb(226,22,26)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="2047.50"></text></g><g><title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;, (std::__detail::_RegexExecutorPolicy)0, true&gt; (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="2021" width="0.0107%" height="15" fill="rgb(217,163,10)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="2031.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="2005" width="0.0107%" height="15" fill="rgb(213,25,53)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1989" width="0.0107%" height="15" fill="rgb(252,105,26)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1973" width="0.0107%" height="15" fill="rgb(220,39,43)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1957" width="0.0107%" height="15" fill="rgb(229,68,48)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1941" width="0.0107%" height="15" fill="rgb(252,8,32)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1925" width="0.0107%" height="15" fill="rgb(223,20,43)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1909" width="0.0107%" height="15" fill="rgb(229,81,49)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1893" width="0.0107%" height="15" fill="rgb(236,28,36)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1877" width="0.0107%" height="15" fill="rgb(249,185,26)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1861" width="0.0107%" height="15" fill="rgb(249,174,33)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1845" width="0.0107%" height="15" fill="rgb(233,201,37)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1829" width="0.0107%" height="15" fill="rgb(221,78,26)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1813" width="0.0107%" height="15" fill="rgb(250,127,30)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1797" width="0.0107%" height="15" fill="rgb(230,49,44)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1781" width="0.0107%" height="15" fill="rgb(229,67,23)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1765" width="0.0107%" height="15" fill="rgb(249,83,47)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1749" width="0.0107%" height="15" fill="rgb(215,43,3)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1733" width="0.0107%" height="15" fill="rgb(238,154,13)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1717" width="0.0107%" height="15" fill="rgb(219,56,2)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1701" width="0.0107%" height="15" fill="rgb(233,0,4)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1685" width="0.0107%" height="15" fill="rgb(235,30,7)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1669" width="0.0107%" height="15" fill="rgb(250,79,13)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1653" width="0.0107%" height="15" fill="rgb(211,146,34)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1637" width="0.0107%" height="15" fill="rgb(228,22,38)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1621" width="0.0107%" height="15" fill="rgb(235,168,5)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1605" width="0.0107%" height="15" fill="rgb(221,155,16)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1589" width="0.0107%" height="15" fill="rgb(215,215,53)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1573" width="0.0107%" height="15" fill="rgb(223,4,10)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1557" width="0.0107%" height="15" fill="rgb(234,103,6)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1541" width="0.0107%" height="15" fill="rgb(227,97,0)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1525" width="0.0107%" height="15" fill="rgb(234,150,53)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1509" width="0.0107%" height="15" fill="rgb(228,201,54)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1493" width="0.0107%" height="15" fill="rgb(222,22,37)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1477" width="0.0107%" height="15" fill="rgb(237,53,32)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1461" width="0.0107%" height="15" fill="rgb(233,25,53)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1445" width="0.0107%" height="15" fill="rgb(210,40,34)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1429" width="0.0107%" height="15" fill="rgb(241,220,44)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1413" width="0.0107%" height="15" fill="rgb(235,28,35)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1397" width="0.0107%" height="15" fill="rgb(210,56,17)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1381" width="0.0107%" height="15" fill="rgb(224,130,29)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1365" width="0.0107%" height="15" fill="rgb(235,212,8)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1349" width="0.0107%" height="15" fill="rgb(223,33,50)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1333" width="0.0107%" height="15" fill="rgb(219,149,13)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1317" width="0.0107%" height="15" fill="rgb(250,156,29)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1301" width="0.0107%" height="15" fill="rgb(216,193,19)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1285" width="0.0107%" height="15" fill="rgb(216,135,14)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1269" width="0.0107%" height="15" fill="rgb(241,47,5)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1253" width="0.0107%" height="15" fill="rgb(233,42,35)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1237" width="0.0107%" height="15" fill="rgb(231,13,6)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1221" width="0.0107%" height="15" fill="rgb(207,181,40)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1205" width="0.0107%" height="15" fill="rgb(254,173,49)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1189" width="0.0107%" height="15" fill="rgb(221,1,38)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1173" width="0.0107%" height="15" fill="rgb(206,124,46)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1157" width="0.0107%" height="15" fill="rgb(249,21,11)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1141" width="0.0107%" height="15" fill="rgb(222,201,40)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1125" width="0.0107%" height="15" fill="rgb(235,61,29)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1109" width="0.0107%" height="15" fill="rgb(219,207,3)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1093" width="0.0107%" height="15" fill="rgb(222,56,46)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1077" width="0.0107%" height="15" fill="rgb(239,76,54)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1061" width="0.0107%" height="15" fill="rgb(231,124,27)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1045" width="0.0107%" height="15" fill="rgb(249,195,6)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1029" width="0.0107%" height="15" fill="rgb(237,174,47)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="1013" width="0.0107%" height="15" fill="rgb(206,201,31)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="997" width="0.0107%" height="15" fill="rgb(231,57,52)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="981" width="0.0107%" height="15" fill="rgb(248,177,22)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="965" width="0.0107%" height="15" fill="rgb(215,211,37)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="949" width="0.0107%" height="15" fill="rgb(241,128,51)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="933" width="0.0107%" height="15" fill="rgb(227,165,31)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="917" width="0.0107%" height="15" fill="rgb(228,167,24)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="901" width="0.0107%" height="15" fill="rgb(228,143,12)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="885" width="0.0107%" height="15" fill="rgb(249,149,8)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="869" width="0.0107%" height="15" fill="rgb(243,35,44)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="853" width="0.0107%" height="15" fill="rgb(246,89,9)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="837" width="0.0107%" height="15" fill="rgb(233,213,13)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="821" width="0.0107%" height="15" fill="rgb(233,141,41)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="805" width="0.0107%" height="15" fill="rgb(239,167,4)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="789" width="0.0107%" height="15" fill="rgb(209,217,16)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="773" width="0.0107%" height="15" fill="rgb(219,88,35)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="757" width="0.0107%" height="15" fill="rgb(220,193,23)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="741" width="0.0107%" height="15" fill="rgb(230,90,52)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="725" width="0.0107%" height="15" fill="rgb(252,106,19)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="709" width="0.0107%" height="15" fill="rgb(206,74,20)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="693" width="0.0107%" height="15" fill="rgb(230,138,44)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="677" width="0.0107%" height="15" fill="rgb(235,182,43)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="661" width="0.0107%" height="15" fill="rgb(242,16,51)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="645" width="0.0107%" height="15" fill="rgb(248,9,4)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="629" width="0.0107%" height="15" fill="rgb(210,31,22)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="613" width="0.0107%" height="15" fill="rgb(239,54,39)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="597" width="0.0107%" height="15" fill="rgb(230,99,41)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="581" width="0.0107%" height="15" fill="rgb(253,106,12)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="565" width="0.0107%" height="15" fill="rgb(213,46,41)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="549" width="0.0107%" height="15" fill="rgb(215,133,35)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="533" width="0.0107%" height="15" fill="rgb(213,28,5)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="517" width="0.0107%" height="15" fill="rgb(215,77,49)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="501" width="0.0107%" height="15" fill="rgb(248,100,22)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="485" width="0.0107%" height="15" fill="rgb(208,67,9)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="469" width="0.0107%" height="15" fill="rgb(219,133,21)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="453" width="0.0107%" height="15" fill="rgb(246,46,29)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="437" width="0.0107%" height="15" fill="rgb(246,185,52)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="421" width="0.0107%" height="15" fill="rgb(252,136,11)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="405" width="0.0107%" height="15" fill="rgb(219,138,53)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="389" width="0.0107%" height="15" fill="rgb(211,51,23)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="373" width="0.0107%" height="15" fill="rgb(247,221,28)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="357" width="0.0107%" height="15" fill="rgb(251,222,45)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="341" width="0.0107%" height="15" fill="rgb(217,162,53)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="325" width="0.0107%" height="15" fill="rgb(229,93,14)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="309" width="0.0107%" height="15" fill="rgb(209,67,49)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="293" width="0.0107%" height="15" fill="rgb(213,87,29)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="277" width="0.0107%" height="15" fill="rgb(205,151,52)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="261" width="0.0107%" height="15" fill="rgb(253,215,39)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="245" width="0.0107%" height="15" fill="rgb(221,220,41)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="229" width="0.0107%" height="15" fill="rgb(218,133,21)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="213" width="0.0107%" height="15" fill="rgb(221,193,43)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="197" width="0.0107%" height="15" fill="rgb(240,128,52)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="181" width="0.0107%" height="15" fill="rgb(253,114,12)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="165" width="0.0107%" height="15" fill="rgb(215,223,47)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="149" width="0.0107%" height="15" fill="rgb(248,225,23)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="133" width="0.0107%" height="15" fill="rgb(250,108,0)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="117" width="0.0107%" height="15" fill="rgb(228,208,7)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="101" width="0.0107%" height="15" fill="rgb(244,45,10)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="85" width="0.0107%" height="15" fill="rgb(207,125,25)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,537,258 samples, 0.01%)</title><rect x="0.2252%" y="69" width="0.0107%" height="15" fill="rgb(210,195,18)" fg:x="306370422" fg:w="14537258"/><text x="0.4752%" y="79.50"></text></g><g><title>DirTree::update (15,285,059 samples, 0.01%)</title><rect x="0.2572%" y="1957" width="0.0112%" height="15" fill="rgb(249,80,12)" fg:x="349904886" fg:w="15285059"/><text x="0.5072%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (72,367,152 samples, 0.05%)</title><rect x="0.6182%" y="149" width="0.0532%" height="15" fill="rgb(221,65,9)" fg:x="840994367" fg:w="72367152"/><text x="0.8682%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (70,020,607 samples, 0.05%)</title><rect x="0.6199%" y="133" width="0.0515%" height="15" fill="rgb(235,49,36)" fg:x="843340912" fg:w="70020607"/><text x="0.8699%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (67,013,598 samples, 0.05%)</title><rect x="0.6221%" y="117" width="0.0493%" height="15" fill="rgb(225,32,20)" fg:x="846347921" fg:w="67013598"/><text x="0.8721%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (63,997,197 samples, 0.05%)</title><rect x="0.6243%" y="101" width="0.0470%" height="15" fill="rgb(215,141,46)" fg:x="849364322" fg:w="63997197"/><text x="0.8743%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (48,841,761 samples, 0.04%)</title><rect x="0.6354%" y="85" width="0.0359%" height="15" fill="rgb(250,160,47)" fg:x="864519758" fg:w="48841761"/><text x="0.8854%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (41,045,385 samples, 0.03%)</title><rect x="0.6713%" y="149" width="0.0302%" height="15" fill="rgb(216,222,40)" fg:x="913361519" fg:w="41045385"/><text x="0.9213%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (130,925,537 samples, 0.10%)</title><rect x="0.6059%" y="197" width="0.0962%" height="15" fill="rgb(234,217,39)" fg:x="824261055" fg:w="130925537"/><text x="0.8559%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (124,151,737 samples, 0.09%)</title><rect x="0.6108%" y="181" width="0.0913%" height="15" fill="rgb(207,178,40)" fg:x="831034855" fg:w="124151737"/><text x="0.8608%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (120,347,596 samples, 0.09%)</title><rect x="0.6136%" y="165" width="0.0885%" height="15" fill="rgb(221,136,13)" fg:x="834838996" fg:w="120347596"/><text x="0.8636%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (133,861,458 samples, 0.10%)</title><rect x="0.6042%" y="213" width="0.0984%" height="15" fill="rgb(249,199,10)" fg:x="822011623" fg:w="133861458"/><text x="0.8542%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (198,744,483 samples, 0.15%)</title><rect x="0.5941%" y="277" width="0.1461%" height="15" fill="rgb(249,222,13)" fg:x="808275692" fg:w="198744483"/><text x="0.8441%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (194,814,598 samples, 0.14%)</title><rect x="0.5970%" y="261" width="0.1432%" height="15" fill="rgb(244,185,38)" fg:x="812205577" fg:w="194814598"/><text x="0.8470%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (189,651,684 samples, 0.14%)</title><rect x="0.6008%" y="245" width="0.1394%" height="15" fill="rgb(236,202,9)" fg:x="817368491" fg:w="189651684"/><text x="0.8508%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (188,071,705 samples, 0.14%)</title><rect x="0.6019%" y="229" width="0.1382%" height="15" fill="rgb(250,229,37)" fg:x="818948470" fg:w="188071705"/><text x="0.8519%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (51,147,094 samples, 0.04%)</title><rect x="0.7026%" y="213" width="0.0376%" height="15" fill="rgb(206,174,23)" fg:x="955873081" fg:w="51147094"/><text x="0.9526%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (46,611,083 samples, 0.03%)</title><rect x="0.7402%" y="277" width="0.0343%" height="15" fill="rgb(211,33,43)" fg:x="1007020175" fg:w="46611083"/><text x="0.9902%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (258,935,251 samples, 0.19%)</title><rect x="0.5852%" y="325" width="0.1903%" height="15" fill="rgb(245,58,50)" fg:x="796188668" fg:w="258935251"/><text x="0.8352%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (253,496,303 samples, 0.19%)</title><rect x="0.5892%" y="309" width="0.1863%" height="15" fill="rgb(244,68,36)" fg:x="801627616" fg:w="253496303"/><text x="0.8392%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (253,496,303 samples, 0.19%)</title><rect x="0.5892%" y="293" width="0.1863%" height="15" fill="rgb(232,229,15)" fg:x="801627616" fg:w="253496303"/><text x="0.8392%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (262,683,662 samples, 0.19%)</title><rect x="0.5830%" y="341" width="0.1931%" height="15" fill="rgb(254,30,23)" fg:x="793230735" fg:w="262683662"/><text x="0.8330%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (316,955,186 samples, 0.23%)</title><rect x="0.5775%" y="405" width="0.2330%" height="15" fill="rgb(235,160,14)" fg:x="785745960" fg:w="316955186"/><text x="0.8275%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (314,637,511 samples, 0.23%)</title><rect x="0.5792%" y="389" width="0.2313%" height="15" fill="rgb(212,155,44)" fg:x="788063635" fg:w="314637511"/><text x="0.8292%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (313,123,347 samples, 0.23%)</title><rect x="0.5804%" y="373" width="0.2302%" height="15" fill="rgb(226,2,50)" fg:x="789577799" fg:w="313123347"/><text x="0.8304%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (310,958,214 samples, 0.23%)</title><rect x="0.5820%" y="357" width="0.2286%" height="15" fill="rgb(234,177,6)" fg:x="791742932" fg:w="310958214"/><text x="0.8320%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (46,786,749 samples, 0.03%)</title><rect x="0.7761%" y="341" width="0.0344%" height="15" fill="rgb(217,24,9)" fg:x="1055914397" fg:w="46786749"/><text x="1.0261%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (394,535,379 samples, 0.29%)</title><rect x="0.5651%" y="453" width="0.2900%" height="15" fill="rgb(220,13,46)" fg:x="768805469" fg:w="394535379"/><text x="0.8151%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (384,431,226 samples, 0.28%)</title><rect x="0.5725%" y="437" width="0.2826%" height="15" fill="rgb(239,221,27)" fg:x="778909622" fg:w="384431226"/><text x="0.8225%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (381,313,619 samples, 0.28%)</title><rect x="0.5748%" y="421" width="0.2803%" height="15" fill="rgb(222,198,25)" fg:x="782027229" fg:w="381313619"/><text x="0.8248%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (60,639,702 samples, 0.04%)</title><rect x="0.8105%" y="405" width="0.0446%" height="15" fill="rgb(211,99,13)" fg:x="1102701146" fg:w="60639702"/><text x="1.0605%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (397,634,536 samples, 0.29%)</title><rect x="0.5634%" y="469" width="0.2923%" height="15" fill="rgb(232,111,31)" fg:x="766457627" fg:w="397634536"/><text x="0.8134%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (450,503,971 samples, 0.33%)</title><rect x="0.5578%" y="517" width="0.3311%" height="15" fill="rgb(245,82,37)" fg:x="758888764" fg:w="450503971"/><text x="0.8078%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (447,514,288 samples, 0.33%)</title><rect x="0.5600%" y="501" width="0.3289%" height="15" fill="rgb(227,149,46)" fg:x="761878447" fg:w="447514288"/><text x="0.8100%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (445,203,449 samples, 0.33%)</title><rect x="0.5617%" y="485" width="0.3272%" height="15" fill="rgb(218,36,50)" fg:x="764189286" fg:w="445203449"/><text x="0.8117%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (45,300,572 samples, 0.03%)</title><rect x="0.8556%" y="469" width="0.0333%" height="15" fill="rgb(226,80,48)" fg:x="1164092163" fg:w="45300572"/><text x="1.1056%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (453,475,724 samples, 0.33%)</title><rect x="0.5562%" y="533" width="0.3333%" height="15" fill="rgb(238,224,15)" fg:x="756671834" fg:w="453475724"/><text x="0.8062%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (55,055,155 samples, 0.04%)</title><rect x="0.8895%" y="533" width="0.0405%" height="15" fill="rgb(241,136,10)" fg:x="1210147558" fg:w="55055155"/><text x="1.1395%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (519,067,530 samples, 0.38%)</title><rect x="0.5490%" y="597" width="0.3815%" height="15" fill="rgb(208,32,45)" fg:x="746867834" fg:w="519067530"/><text x="0.7990%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (516,759,580 samples, 0.38%)</title><rect x="0.5507%" y="581" width="0.3798%" height="15" fill="rgb(207,135,9)" fg:x="749175784" fg:w="516759580"/><text x="0.8007%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (513,751,779 samples, 0.38%)</title><rect x="0.5529%" y="565" width="0.3776%" height="15" fill="rgb(206,86,44)" fg:x="752183585" fg:w="513751779"/><text x="0.8029%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (513,751,779 samples, 0.38%)</title><rect x="0.5529%" y="549" width="0.3776%" height="15" fill="rgb(245,177,15)" fg:x="752183585" fg:w="513751779"/><text x="0.8029%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (50,988,833 samples, 0.04%)</title><rect x="0.9305%" y="597" width="0.0375%" height="15" fill="rgb(206,64,50)" fg:x="1265935364" fg:w="50988833"/><text x="1.1805%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (581,540,441 samples, 0.43%)</title><rect x="0.5411%" y="645" width="0.4274%" height="15" fill="rgb(234,36,40)" fg:x="736168226" fg:w="581540441"/><text x="0.7911%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (578,586,603 samples, 0.43%)</title><rect x="0.5433%" y="629" width="0.4253%" height="15" fill="rgb(213,64,8)" fg:x="739122064" fg:w="578586603"/><text x="0.7933%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (577,854,207 samples, 0.42%)</title><rect x="0.5438%" y="613" width="0.4247%" height="15" fill="rgb(210,75,36)" fg:x="739854460" fg:w="577854207"/><text x="0.7938%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (585,314,308 samples, 0.43%)</title><rect x="0.5389%" y="661" width="0.4302%" height="15" fill="rgb(229,88,21)" fg:x="733170782" fg:w="585314308"/><text x="0.7889%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (652,602,679 samples, 0.48%)</title><rect x="0.5281%" y="725" width="0.4797%" height="15" fill="rgb(252,204,47)" fg:x="718501705" fg:w="652602679"/><text x="0.7781%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (649,437,956 samples, 0.48%)</title><rect x="0.5304%" y="709" width="0.4774%" height="15" fill="rgb(208,77,27)" fg:x="721666428" fg:w="649437956"/><text x="0.7804%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (643,328,287 samples, 0.47%)</title><rect x="0.5349%" y="693" width="0.4729%" height="15" fill="rgb(221,76,26)" fg:x="727776097" fg:w="643328287"/><text x="0.7849%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (642,552,934 samples, 0.47%)</title><rect x="0.5355%" y="677" width="0.4723%" height="15" fill="rgb(225,139,18)" fg:x="728551450" fg:w="642552934"/><text x="0.7855%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (52,619,294 samples, 0.04%)</title><rect x="0.9691%" y="661" width="0.0387%" height="15" fill="rgb(230,137,11)" fg:x="1318485090" fg:w="52619294"/><text x="1.2191%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (36,812,658 samples, 0.03%)</title><rect x="1.0078%" y="725" width="0.0271%" height="15" fill="rgb(212,28,1)" fg:x="1371104384" fg:w="36812658"/><text x="1.2578%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (700,925,883 samples, 0.52%)</title><rect x="0.5202%" y="773" width="0.5152%" height="15" fill="rgb(248,164,17)" fg:x="707773649" fg:w="700925883"/><text x="0.7702%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (695,595,163 samples, 0.51%)</title><rect x="0.5242%" y="757" width="0.5113%" height="15" fill="rgb(222,171,42)" fg:x="713104369" fg:w="695595163"/><text x="0.7742%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (694,809,053 samples, 0.51%)</title><rect x="0.5247%" y="741" width="0.5107%" height="15" fill="rgb(243,84,45)" fg:x="713890479" fg:w="694809053"/><text x="0.7747%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (706,228,017 samples, 0.52%)</title><rect x="0.5169%" y="789" width="0.5191%" height="15" fill="rgb(252,49,23)" fg:x="703212627" fg:w="706228017"/><text x="0.7669%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (763,266,712 samples, 0.56%)</title><rect x="0.5051%" y="853" width="0.5610%" height="15" fill="rgb(215,19,7)" fg:x="687205400" fg:w="763266712"/><text x="0.7551%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (758,672,065 samples, 0.56%)</title><rect x="0.5085%" y="837" width="0.5576%" height="15" fill="rgb(238,81,41)" fg:x="691800047" fg:w="758672065"/><text x="0.7585%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (751,084,284 samples, 0.55%)</title><rect x="0.5141%" y="821" width="0.5521%" height="15" fill="rgb(210,199,37)" fg:x="699387828" fg:w="751084284"/><text x="0.7641%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (751,084,284 samples, 0.55%)</title><rect x="0.5141%" y="805" width="0.5521%" height="15" fill="rgb(244,192,49)" fg:x="699387828" fg:w="751084284"/><text x="0.7641%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (41,031,468 samples, 0.03%)</title><rect x="1.0360%" y="789" width="0.0302%" height="15" fill="rgb(226,211,11)" fg:x="1409440644" fg:w="41031468"/><text x="1.2860%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (36,190,768 samples, 0.03%)</title><rect x="1.0661%" y="853" width="0.0266%" height="15" fill="rgb(236,162,54)" fg:x="1450472112" fg:w="36190768"/><text x="1.3161%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (819,403,851 samples, 0.60%)</title><rect x="0.4910%" y="917" width="0.6023%" height="15" fill="rgb(220,229,9)" fg:x="668032760" fg:w="819403851"/><text x="0.7410%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (815,634,211 samples, 0.60%)</title><rect x="0.4938%" y="901" width="0.5995%" height="15" fill="rgb(250,87,22)" fg:x="671802400" fg:w="815634211"/><text x="0.7438%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (810,956,699 samples, 0.60%)</title><rect x="0.4972%" y="885" width="0.5961%" height="15" fill="rgb(239,43,17)" fg:x="676479912" fg:w="810956699"/><text x="0.7472%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (807,901,152 samples, 0.59%)</title><rect x="0.4995%" y="869" width="0.5938%" height="15" fill="rgb(231,177,25)" fg:x="679535459" fg:w="807901152"/><text x="0.7495%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (877,907,993 samples, 0.65%)</title><rect x="0.4820%" y="981" width="0.6453%" height="15" fill="rgb(219,179,1)" fg:x="655825628" fg:w="877907993"/><text x="0.7320%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (875,638,693 samples, 0.64%)</title><rect x="0.4837%" y="965" width="0.6436%" height="15" fill="rgb(238,219,53)" fg:x="658094928" fg:w="875638693"/><text x="0.7337%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (871,837,670 samples, 0.64%)</title><rect x="0.4865%" y="949" width="0.6408%" height="15" fill="rgb(232,167,36)" fg:x="661895951" fg:w="871837670"/><text x="0.7365%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (869,547,437 samples, 0.64%)</title><rect x="0.4882%" y="933" width="0.6391%" height="15" fill="rgb(244,19,51)" fg:x="664186184" fg:w="869547437"/><text x="0.7382%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (46,297,010 samples, 0.03%)</title><rect x="1.0933%" y="917" width="0.0340%" height="15" fill="rgb(224,6,22)" fg:x="1487436611" fg:w="46297010"/><text x="1.3433%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (44,529,736 samples, 0.03%)</title><rect x="1.1273%" y="981" width="0.0327%" height="15" fill="rgb(224,145,5)" fg:x="1533733621" fg:w="44529736"/><text x="1.3773%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (936,920,098 samples, 0.69%)</title><rect x="0.4725%" y="1045" width="0.6887%" height="15" fill="rgb(234,130,49)" fg:x="642852292" fg:w="936920098"/><text x="0.7225%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (932,326,908 samples, 0.69%)</title><rect x="0.4759%" y="1029" width="0.6853%" height="15" fill="rgb(254,6,2)" fg:x="647445482" fg:w="932326908"/><text x="0.7259%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (929,363,347 samples, 0.68%)</title><rect x="0.4781%" y="1013" width="0.6831%" height="15" fill="rgb(208,96,46)" fg:x="650409043" fg:w="929363347"/><text x="0.7281%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (928,642,784 samples, 0.68%)</title><rect x="0.4786%" y="997" width="0.6826%" height="15" fill="rgb(239,3,39)" fg:x="651129606" fg:w="928642784"/><text x="0.7286%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (48,518,235 samples, 0.04%)</title><rect x="1.1612%" y="1045" width="0.0357%" height="15" fill="rgb(233,210,1)" fg:x="1579772390" fg:w="48518235"/><text x="1.4112%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,000,530,308 samples, 0.74%)</title><rect x="0.4620%" y="1109" width="0.7354%" height="15" fill="rgb(244,137,37)" fg:x="628498534" fg:w="1000530308"/><text x="0.7120%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (998,207,311 samples, 0.73%)</title><rect x="0.4637%" y="1093" width="0.7337%" height="15" fill="rgb(240,136,2)" fg:x="630821531" fg:w="998207311"/><text x="0.7137%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (995,205,901 samples, 0.73%)</title><rect x="0.4659%" y="1077" width="0.7315%" height="15" fill="rgb(239,18,37)" fg:x="633822941" fg:w="995205901"/><text x="0.7159%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (992,131,797 samples, 0.73%)</title><rect x="0.4681%" y="1061" width="0.7292%" height="15" fill="rgb(218,185,22)" fg:x="636897045" fg:w="992131797"/><text x="0.7181%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (48,835,949 samples, 0.04%)</title><rect x="1.1974%" y="1109" width="0.0359%" height="15" fill="rgb(225,218,4)" fg:x="1629028842" fg:w="48835949"/><text x="1.4474%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,065,388,980 samples, 0.78%)</title><rect x="0.4507%" y="1157" width="0.7831%" height="15" fill="rgb(230,182,32)" fg:x="613226126" fg:w="1065388980"/><text x="0.7007%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,060,735,225 samples, 0.78%)</title><rect x="0.4542%" y="1141" width="0.7797%" height="15" fill="rgb(242,56,43)" fg:x="617879881" fg:w="1060735225"/><text x="0.7042%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,057,687,319 samples, 0.78%)</title><rect x="0.4564%" y="1125" width="0.7774%" height="15" fill="rgb(233,99,24)" fg:x="620927787" fg:w="1057687319"/><text x="0.7064%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,070,014,134 samples, 0.79%)</title><rect x="0.4485%" y="1173" width="0.7865%" height="15" fill="rgb(234,209,42)" fg:x="610175344" fg:w="1070014134"/><text x="0.6985%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (44,100,655 samples, 0.03%)</title><rect x="1.2350%" y="1173" width="0.0324%" height="15" fill="rgb(227,7,12)" fg:x="1680189478" fg:w="44100655"/><text x="1.4850%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,132,417,473 samples, 0.83%)</title><rect x="0.4362%" y="1237" width="0.8324%" height="15" fill="rgb(245,203,43)" fg:x="593410706" fg:w="1132417473"/><text x="0.6862%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,128,661,410 samples, 0.83%)</title><rect x="0.4389%" y="1221" width="0.8296%" height="15" fill="rgb(238,205,33)" fg:x="597166769" fg:w="1128661410"/><text x="0.6889%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,121,033,772 samples, 0.82%)</title><rect x="0.4445%" y="1205" width="0.8240%" height="15" fill="rgb(231,56,7)" fg:x="604794407" fg:w="1121033772"/><text x="0.6945%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,121,033,772 samples, 0.82%)</title><rect x="0.4445%" y="1189" width="0.8240%" height="15" fill="rgb(244,186,29)" fg:x="604794407" fg:w="1121033772"/><text x="0.6945%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,197,784,094 samples, 0.88%)</title><rect x="0.4261%" y="1285" width="0.8804%" height="15" fill="rgb(234,111,31)" fg:x="579671978" fg:w="1197784094"/><text x="0.6761%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,191,765,575 samples, 0.88%)</title><rect x="0.4305%" y="1269" width="0.8760%" height="15" fill="rgb(241,149,10)" fg:x="585690497" fg:w="1191765575"/><text x="0.6805%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,188,711,258 samples, 0.87%)</title><rect x="0.4327%" y="1253" width="0.8737%" height="15" fill="rgb(249,206,44)" fg:x="588744814" fg:w="1188711258"/><text x="0.6827%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (51,627,893 samples, 0.04%)</title><rect x="1.2685%" y="1237" width="0.0379%" height="15" fill="rgb(251,153,30)" fg:x="1725828179" fg:w="51627893"/><text x="1.5185%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,201,648,715 samples, 0.88%)</title><rect x="0.4238%" y="1301" width="0.8832%" height="15" fill="rgb(239,152,38)" fg:x="576548045" fg:w="1201648715"/><text x="0.6738%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,708,619 samples, 0.01%)</title><rect x="1.3374%" y="1285" width="0.0101%" height="15" fill="rgb(249,139,47)" fg:x="1819554799" fg:w="13708619"/><text x="1.5874%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,271,362,237 samples, 0.93%)</title><rect x="0.4147%" y="1365" width="0.9345%" height="15" fill="rgb(244,64,35)" fg:x="564233602" fg:w="1271362237"/><text x="0.6647%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,269,811,250 samples, 0.93%)</title><rect x="0.4159%" y="1349" width="0.9333%" height="15" fill="rgb(216,46,15)" fg:x="565784589" fg:w="1269811250"/><text x="0.6659%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,266,789,409 samples, 0.93%)</title><rect x="0.4181%" y="1333" width="0.9311%" height="15" fill="rgb(250,74,19)" fg:x="568806430" fg:w="1266789409"/><text x="0.6681%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,264,557,646 samples, 0.93%)</title><rect x="0.4197%" y="1317" width="0.9295%" height="15" fill="rgb(249,42,33)" fg:x="571038193" fg:w="1264557646"/><text x="0.6697%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (57,399,079 samples, 0.04%)</title><rect x="1.3070%" y="1301" width="0.0422%" height="15" fill="rgb(242,149,17)" fg:x="1778196760" fg:w="57399079"/><text x="1.5570%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,343,871,722 samples, 0.99%)</title><rect x="0.4018%" y="1413" width="0.9878%" height="15" fill="rgb(244,29,21)" fg:x="546593787" fg:w="1343871722"/><text x="0.6518%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,333,059,501 samples, 0.98%)</title><rect x="0.4097%" y="1397" width="0.9798%" height="15" fill="rgb(220,130,37)" fg:x="557406008" fg:w="1333059501"/><text x="0.6597%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,329,944,802 samples, 0.98%)</title><rect x="0.4120%" y="1381" width="0.9775%" height="15" fill="rgb(211,67,2)" fg:x="560520707" fg:w="1329944802"/><text x="0.6620%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (54,869,670 samples, 0.04%)</title><rect x="1.3492%" y="1365" width="0.0403%" height="15" fill="rgb(235,68,52)" fg:x="1835595839" fg:w="54869670"/><text x="1.5992%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,346,917,673 samples, 0.99%)</title><rect x="0.4006%" y="1429" width="0.9900%" height="15" fill="rgb(246,142,3)" fg:x="545072641" fg:w="1346917673"/><text x="0.6506%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (49,478,503 samples, 0.04%)</title><rect x="1.3907%" y="1429" width="0.0364%" height="15" fill="rgb(241,25,7)" fg:x="1891990314" fg:w="49478503"/><text x="1.6407%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,411,666,860 samples, 1.04%)</title><rect x="0.3911%" y="1493" width="1.0376%" height="15" fill="rgb(242,119,39)" fg:x="532122076" fg:w="1411666860"/><text x="0.6411%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,408,542,349 samples, 1.04%)</title><rect x="0.3934%" y="1477" width="1.0353%" height="15" fill="rgb(241,98,45)" fg:x="535246587" fg:w="1408542349"/><text x="0.6434%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,404,030,996 samples, 1.03%)</title><rect x="0.3967%" y="1461" width="1.0320%" height="15" fill="rgb(254,28,30)" fg:x="539757940" fg:w="1404030996"/><text x="0.6467%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,402,507,938 samples, 1.03%)</title><rect x="0.3979%" y="1445" width="1.0309%" height="15" fill="rgb(241,142,54)" fg:x="541280998" fg:w="1402507938"/><text x="0.6479%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (47,460,627 samples, 0.03%)</title><rect x="1.4287%" y="1493" width="0.0349%" height="15" fill="rgb(222,85,15)" fg:x="1943788936" fg:w="47460627"/><text x="1.6787%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,475,344,777 samples, 1.08%)</title><rect x="0.3798%" y="1557" width="1.0844%" height="15" fill="rgb(210,85,47)" fg:x="516689596" fg:w="1475344777"/><text x="0.6298%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,469,197,365 samples, 1.08%)</title><rect x="0.3843%" y="1541" width="1.0799%" height="15" fill="rgb(224,206,25)" fg:x="522837008" fg:w="1469197365"/><text x="0.6343%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,466,862,561 samples, 1.08%)</title><rect x="0.3860%" y="1525" width="1.0782%" height="15" fill="rgb(243,201,19)" fg:x="525171812" fg:w="1466862561"/><text x="0.6360%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,464,496,693 samples, 1.08%)</title><rect x="0.3878%" y="1509" width="1.0764%" height="15" fill="rgb(236,59,4)" fg:x="527537680" fg:w="1464496693"/><text x="0.6378%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (38,134,853 samples, 0.03%)</title><rect x="1.4642%" y="1557" width="0.0280%" height="15" fill="rgb(254,179,45)" fg:x="1992034373" fg:w="38134853"/><text x="1.7142%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,525,073,296 samples, 1.12%)</title><rect x="0.3718%" y="1605" width="1.1210%" height="15" fill="rgb(226,14,10)" fg:x="505878523" fg:w="1525073296"/><text x="0.6218%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,521,192,332 samples, 1.12%)</title><rect x="0.3747%" y="1589" width="1.1181%" height="15" fill="rgb(244,27,41)" fg:x="509759487" fg:w="1521192332"/><text x="0.6247%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,519,634,267 samples, 1.12%)</title><rect x="0.3758%" y="1573" width="1.1170%" height="15" fill="rgb(235,35,32)" fg:x="511317552" fg:w="1519634267"/><text x="0.6258%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,527,986,498 samples, 1.12%)</title><rect x="0.3702%" y="1621" width="1.1231%" height="15" fill="rgb(218,68,31)" fg:x="503715939" fg:w="1527986498"/><text x="0.6202%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,574,617,204 samples, 1.16%)</title><rect x="0.3647%" y="1669" width="1.1574%" height="15" fill="rgb(207,120,37)" fg:x="496181893" fg:w="1574617204"/><text x="0.6147%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,573,177,699 samples, 1.16%)</title><rect x="0.3658%" y="1653" width="1.1563%" height="15" fill="rgb(227,98,0)" fg:x="497621398" fg:w="1573177699"/><text x="0.6158%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,570,893,693 samples, 1.15%)</title><rect x="0.3674%" y="1637" width="1.1546%" height="15" fill="rgb(207,7,3)" fg:x="499905404" fg:w="1570893693"/><text x="0.6174%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (39,096,660 samples, 0.03%)</title><rect x="1.4934%" y="1621" width="0.0287%" height="15" fill="rgb(206,98,19)" fg:x="2031702437" fg:w="39096660"/><text x="1.7434%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,579,270,823 samples, 1.16%)</title><rect x="0.3618%" y="1685" width="1.1608%" height="15" fill="rgb(217,5,26)" fg:x="492259972" fg:w="1579270823"/><text x="0.6118%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (42,301,977 samples, 0.03%)</title><rect x="1.5226%" y="1685" width="0.0311%" height="15" fill="rgb(235,190,38)" fg:x="2071530795" fg:w="42301977"/><text x="1.7726%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,638,296,344 samples, 1.20%)</title><rect x="0.3507%" y="1749" width="1.2042%" height="15" fill="rgb(247,86,24)" fg:x="477086857" fg:w="1638296344"/><text x="0.6007%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,636,054,320 samples, 1.20%)</title><rect x="0.3523%" y="1733" width="1.2025%" height="15" fill="rgb(205,101,16)" fg:x="479328881" fg:w="1636054320"/><text x="0.6023%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,633,849,359 samples, 1.20%)</title><rect x="0.3539%" y="1717" width="1.2009%" height="15" fill="rgb(246,168,33)" fg:x="481533842" fg:w="1633849359"/><text x="0.6039%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,626,901,322 samples, 1.20%)</title><rect x="0.3590%" y="1701" width="1.1958%" height="15" fill="rgb(231,114,1)" fg:x="488481879" fg:w="1626901322"/><text x="0.6090%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (24,526,031 samples, 0.02%)</title><rect x="1.5549%" y="1749" width="0.0180%" height="15" fill="rgb(207,184,53)" fg:x="2115383201" fg:w="24526031"/><text x="1.8049%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,680,655,609 samples, 1.24%)</title><rect x="0.3381%" y="1797" width="1.2353%" height="15" fill="rgb(224,95,51)" fg:x="460038950" fg:w="1680655609"/><text x="0.5881%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,673,615,192 samples, 1.23%)</title><rect x="0.3433%" y="1781" width="1.2302%" height="15" fill="rgb(212,188,45)" fg:x="467079367" fg:w="1673615192"/><text x="0.5933%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,667,460,107 samples, 1.23%)</title><rect x="0.3478%" y="1765" width="1.2256%" height="15" fill="rgb(223,154,38)" fg:x="473234452" fg:w="1667460107"/><text x="0.5978%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,686,801,042 samples, 1.24%)</title><rect x="0.3342%" y="1813" width="1.2398%" height="15" fill="rgb(251,22,52)" fg:x="454691482" fg:w="1686801042"/><text x="0.5842%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (37,468,926 samples, 0.03%)</title><rect x="1.5741%" y="1813" width="0.0275%" height="15" fill="rgb(229,209,22)" fg:x="2141492524" fg:w="37468926"/><text x="1.8241%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,734,842,588 samples, 1.28%)</title><rect x="0.3276%" y="1829" width="1.2752%" height="15" fill="rgb(234,138,34)" fg:x="445689006" fg:w="1734842588"/><text x="0.5776%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,753,360,376 samples, 1.29%)</title><rect x="0.3157%" y="1861" width="1.2888%" height="15" fill="rgb(212,95,11)" fg:x="429508903" fg:w="1753360376"/><text x="0.5657%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,737,973,000 samples, 1.28%)</title><rect x="0.3270%" y="1845" width="1.2775%" height="15" fill="rgb(240,179,47)" fg:x="444896279" fg:w="1737973000"/><text x="0.5770%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,775,503,353 samples, 1.31%)</title><rect x="0.3017%" y="1909" width="1.3050%" height="15" fill="rgb(240,163,11)" fg:x="410428127" fg:w="1775503353"/><text x="0.5517%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,770,184,861 samples, 1.30%)</title><rect x="0.3056%" y="1893" width="1.3011%" height="15" fill="rgb(236,37,12)" fg:x="415746619" fg:w="1770184861"/><text x="0.5556%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,764,851,741 samples, 1.30%)</title><rect x="0.3095%" y="1877" width="1.2972%" height="15" fill="rgb(232,164,16)" fg:x="421079739" fg:w="1764851741"/><text x="0.5595%" y="1887.50"></text></g><g><title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;, (std::__detail::_RegexExecutorPolicy)0, true&gt; (1,812,099,715 samples, 1.33%)</title><rect x="0.2809%" y="1925" width="1.3319%" height="15" fill="rgb(244,205,15)" fg:x="382193351" fg:w="1812099715"/><text x="0.5309%" y="1935.50"></text></g><g><title>Glob::isIgnored (1,820,641,588 samples, 1.34%)</title><rect x="0.2804%" y="1941" width="1.3382%" height="15" fill="rgb(223,117,47)" fg:x="381416872" fg:w="1820641588"/><text x="0.5304%" y="1951.50"></text></g><g><title>Watcher::isIgnored (1,839,891,406 samples, 1.35%)</title><rect x="0.2696%" y="1957" width="1.3524%" height="15" fill="rgb(244,107,35)" fg:x="366758320" fg:w="1839891406"/><text x="0.5196%" y="1967.50"></text></g><g><title>std::string::insert (15,277,283 samples, 0.01%)</title><rect x="1.6467%" y="1957" width="0.0112%" height="15" fill="rgb(205,140,8)" fg:x="2240371655" fg:w="15277283"/><text x="1.8967%" y="1967.50"></text></g><g><title>InotifyBackend::handleSubscription (1,920,286,249 samples, 1.41%)</title><rect x="0.2482%" y="1973" width="1.4115%" height="15" fill="rgb(228,84,46)" fg:x="337615071" fg:w="1920286249"/><text x="0.4982%" y="1983.50"></text></g><g><title>memset_orig (19,205,645 samples, 0.01%)</title><rect x="1.6775%" y="1877" width="0.0141%" height="15" fill="rgb(254,188,9)" fg:x="2282195996" fg:w="19205645"/><text x="1.9275%" y="1887.50"></text></g><g><title>__check_object_size (16,010,096 samples, 0.01%)</title><rect x="1.7022%" y="1861" width="0.0118%" height="15" fill="rgb(206,112,54)" fg:x="2315812422" fg:w="16010096"/><text x="1.9522%" y="1871.50"></text></g><g><title>getname_flags (57,247,151 samples, 0.04%)</title><rect x="1.6735%" y="1893" width="0.0421%" height="15" fill="rgb(216,84,49)" fg:x="2276828252" fg:w="57247151"/><text x="1.9235%" y="1903.50"></text></g><g><title>strncpy_from_user (29,627,819 samples, 0.02%)</title><rect x="1.6938%" y="1877" width="0.0218%" height="15" fill="rgb(214,194,35)" fg:x="2304447584" fg:w="29627819"/><text x="1.9438%" y="1887.50"></text></g><g><title>kmem_cache_free (16,775,557 samples, 0.01%)</title><rect x="1.7161%" y="1877" width="0.0123%" height="15" fill="rgb(249,28,3)" fg:x="2334802596" fg:w="16775557"/><text x="1.9661%" y="1887.50"></text></g><g><title>putname (22,075,629 samples, 0.02%)</title><rect x="1.7161%" y="1893" width="0.0162%" height="15" fill="rgb(222,56,52)" fg:x="2334802596" fg:w="22075629"/><text x="1.9661%" y="1903.50"></text></g><g><title>generic_permission (17,945,670 samples, 0.01%)</title><rect x="1.7716%" y="1813" width="0.0132%" height="15" fill="rgb(245,217,50)" fg:x="2410255481" fg:w="17945670"/><text x="2.0216%" y="1823.50"></text></g><g><title>inode_permission (23,224,623 samples, 0.02%)</title><rect x="1.7688%" y="1829" width="0.0171%" height="15" fill="rgb(213,201,24)" fg:x="2406499350" fg:w="23224623"/><text x="2.0188%" y="1839.50"></text></g><g><title>lookup_fast (16,214,604 samples, 0.01%)</title><rect x="1.7859%" y="1829" width="0.0119%" height="15" fill="rgb(248,116,28)" fg:x="2429723973" fg:w="16214604"/><text x="2.0359%" y="1839.50"></text></g><g><title>link_path_walk (78,462,197 samples, 0.06%)</title><rect x="1.7509%" y="1845" width="0.0577%" height="15" fill="rgb(219,72,43)" fg:x="2382100342" fg:w="78462197"/><text x="2.0009%" y="1855.50"></text></g><g><title>path_lookupat (130,573,200 samples, 0.10%)</title><rect x="1.7379%" y="1861" width="0.0960%" height="15" fill="rgb(209,138,14)" fg:x="2364465348" fg:w="130573200"/><text x="1.9879%" y="1871.50"></text></g><g><title>walk_component (17,726,928 samples, 0.01%)</title><rect x="1.8209%" y="1845" width="0.0130%" height="15" fill="rgb(222,18,33)" fg:x="2477311620" fg:w="17726928"/><text x="2.0709%" y="1855.50"></text></g><g><title>lookup_fast (17,726,928 samples, 0.01%)</title><rect x="1.8209%" y="1829" width="0.0130%" height="15" fill="rgb(213,199,7)" fg:x="2477311620" fg:w="17726928"/><text x="2.0709%" y="1839.50"></text></g><g><title>__d_lookup_rcu (17,726,928 samples, 0.01%)</title><rect x="1.8209%" y="1813" width="0.0130%" height="15" fill="rgb(250,110,10)" fg:x="2477311620" fg:w="17726928"/><text x="2.0709%" y="1823.50"></text></g><g><title>filename_lookup (135,168,564 samples, 0.10%)</title><rect x="1.7363%" y="1877" width="0.0994%" height="15" fill="rgb(248,123,6)" fg:x="2362202706" fg:w="135168564"/><text x="1.9863%" y="1887.50"></text></g><g><title>__se_sys_newstat (258,643,882 samples, 0.19%)</title><rect x="1.6696%" y="1909" width="0.1901%" height="15" fill="rgb(206,91,31)" fg:x="2271543270" fg:w="258643882"/><text x="1.9196%" y="1919.50"></text></g><g><title>vfs_statx (170,286,186 samples, 0.13%)</title><rect x="1.7346%" y="1893" width="0.1252%" height="15" fill="rgb(211,154,13)" fg:x="2359900966" fg:w="170286186"/><text x="1.9846%" y="1903.50"></text></g><g><title>vfs_getattr_nosec (13,692,145 samples, 0.01%)</title><rect x="1.8497%" y="1877" width="0.0101%" height="15" fill="rgb(225,148,7)" fg:x="2516495007" fg:w="13692145"/><text x="2.0997%" y="1887.50"></text></g><g><title>__x64_sys_newstat (260,989,647 samples, 0.19%)</title><rect x="1.6691%" y="1925" width="0.1918%" height="15" fill="rgb(220,160,43)" fg:x="2270766431" fg:w="260989647"/><text x="1.9191%" y="1935.50"></text></g><g><title>do_syscall_64 (278,644,819 samples, 0.20%)</title><rect x="1.6668%" y="1941" width="0.2048%" height="15" fill="rgb(213,52,39)" fg:x="2267739055" fg:w="278644819"/><text x="1.9168%" y="1951.50"></text></g><g><title>entry_SYSCALL_64 (286,041,221 samples, 0.21%)</title><rect x="1.6619%" y="1957" width="0.2102%" height="15" fill="rgb(243,137,7)" fg:x="2261025777" fg:w="286041221"/><text x="1.9119%" y="1967.50"></text></g><g><title>__xstat64 (310,002,891 samples, 0.23%)</title><rect x="1.6602%" y="1973" width="0.2279%" height="15" fill="rgb(230,79,13)" fg:x="2258678803" fg:w="310002891"/><text x="1.9102%" y="1983.50"></text></g><g><title>entry_ibpb (21,614,696 samples, 0.02%)</title><rect x="1.8722%" y="1957" width="0.0159%" height="15" fill="rgb(247,105,23)" fg:x="2547066998" fg:w="21614696"/><text x="2.1222%" y="1967.50"></text></g><g><title>std::_Hashtable&lt;std::shared_ptr&lt;InotifySubscription&gt;, std::shared_ptr&lt;InotifySubscription&gt;, std::allocator&lt;std::shared_ptr&lt;InotifySubscription&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::shared_ptr&lt;InotifySubscription&gt; &gt;, std::hash&lt;std::shared_ptr&lt;InotifySubscription&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (13,807,428 samples, 0.01%)</title><rect x="1.8943%" y="1973" width="0.0101%" height="15" fill="rgb(223,179,41)" fg:x="2577169698" fg:w="13807428"/><text x="2.1443%" y="1983.50"></text></g><g><title>InotifyBackend::handleEvent (2,278,400,794 samples, 1.67%)</title><rect x="0.2393%" y="1989" width="1.6747%" height="15" fill="rgb(218,9,34)" fg:x="325557381" fg:w="2278400794"/><text x="0.4893%" y="1999.50"></text></g><g><title>InotifyBackend::handleEvents (2,290,643,212 samples, 1.68%)</title><rect x="0.2387%" y="2005" width="1.6837%" height="15" fill="rgb(222,106,8)" fg:x="324799625" fg:w="2290643212"/><text x="0.4887%" y="2015.50"></text></g><g><title>copy_event_to_user (17,597,595 samples, 0.01%)</title><rect x="1.9247%" y="1893" width="0.0129%" height="15" fill="rgb(211,220,0)" fg:x="2618489839" fg:w="17597595"/><text x="2.1747%" y="1903.50"></text></g><g><title>[libstdc++.so.6.0.30] (2,322,910,929 samples, 1.71%)</title><rect x="0.2359%" y="2053" width="1.7074%" height="15" fill="rgb(229,52,16)" fg:x="320907680" fg:w="2322910929"/><text x="0.4859%" y="2063.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Backend::run()::{lambda()#1}&gt; &gt; &gt;::_M_run (2,322,910,929 samples, 1.71%)</title><rect x="0.2359%" y="2037" width="1.7074%" height="15" fill="rgb(212,155,18)" fg:x="320907680" fg:w="2322910929"/><text x="0.4859%" y="2047.50"></text></g><g><title>InotifyBackend::start (2,322,910,929 samples, 1.71%)</title><rect x="0.2359%" y="2021" width="1.7074%" height="15" fill="rgb(242,21,14)" fg:x="320907680" fg:w="2322910929"/><text x="0.4859%" y="2031.50"></text></g><g><title>read (28,375,772 samples, 0.02%)</title><rect x="1.9224%" y="2005" width="0.0209%" height="15" fill="rgb(222,19,48)" fg:x="2615442837" fg:w="28375772"/><text x="2.1724%" y="2015.50"></text></g><g><title>entry_SYSCALL_64 (28,375,772 samples, 0.02%)</title><rect x="1.9224%" y="1989" width="0.0209%" height="15" fill="rgb(232,45,27)" fg:x="2615442837" fg:w="28375772"/><text x="2.1724%" y="1999.50"></text></g><g><title>do_syscall_64 (28,375,772 samples, 0.02%)</title><rect x="1.9224%" y="1973" width="0.0209%" height="15" fill="rgb(249,103,42)" fg:x="2615442837" fg:w="28375772"/><text x="2.1724%" y="1983.50"></text></g><g><title>__x64_sys_read (28,375,772 samples, 0.02%)</title><rect x="1.9224%" y="1957" width="0.0209%" height="15" fill="rgb(246,81,33)" fg:x="2615442837" fg:w="28375772"/><text x="2.1724%" y="1967.50"></text></g><g><title>ksys_read (28,375,772 samples, 0.02%)</title><rect x="1.9224%" y="1941" width="0.0209%" height="15" fill="rgb(252,33,42)" fg:x="2615442837" fg:w="28375772"/><text x="2.1724%" y="1951.50"></text></g><g><title>vfs_read (28,375,772 samples, 0.02%)</title><rect x="1.9224%" y="1925" width="0.0209%" height="15" fill="rgb(209,212,41)" fg:x="2615442837" fg:w="28375772"/><text x="2.1724%" y="1935.50"></text></g><g><title>inotify_read (28,375,772 samples, 0.02%)</title><rect x="1.9224%" y="1909" width="0.0209%" height="15" fill="rgb(207,154,6)" fg:x="2615442837" fg:w="28375772"/><text x="2.1724%" y="1919.50"></text></g><g><title>[unknown] (193,177,961 samples, 0.14%)</title><rect x="1.9436%" y="1461" width="0.1420%" height="15" fill="rgb(223,64,47)" fg:x="2644265860" fg:w="193177961"/><text x="2.1936%" y="1471.50"></text></g><g><title>[unknown] (193,177,961 samples, 0.14%)</title><rect x="1.9436%" y="1445" width="0.1420%" height="15" fill="rgb(211,161,38)" fg:x="2644265860" fg:w="193177961"/><text x="2.1936%" y="1455.50"></text></g><g><title>_int_malloc (180,330,198 samples, 0.13%)</title><rect x="1.9531%" y="1429" width="0.1325%" height="15" fill="rgb(219,138,40)" fg:x="2657113623" fg:w="180330198"/><text x="2.2031%" y="1439.50"></text></g><g><title>[unknown] (223,135,492 samples, 0.16%)</title><rect x="1.9436%" y="1477" width="0.1640%" height="15" fill="rgb(241,228,46)" fg:x="2644265860" fg:w="223135492"/><text x="2.1936%" y="1487.50"></text></g><g><title>_int_malloc (29,957,531 samples, 0.02%)</title><rect x="2.0856%" y="1461" width="0.0220%" height="15" fill="rgb(223,209,38)" fg:x="2837443821" fg:w="29957531"/><text x="2.3356%" y="1471.50"></text></g><g><title>[unknown] (391,135,911 samples, 0.29%)</title><rect x="1.9436%" y="1493" width="0.2875%" height="15" fill="rgb(236,164,45)" fg:x="2644265860" fg:w="391135911"/><text x="2.1936%" y="1503.50"></text></g><g><title>_int_malloc (168,000,419 samples, 0.12%)</title><rect x="2.1076%" y="1477" width="0.1235%" height="15" fill="rgb(231,15,5)" fg:x="2867401352" fg:w="168000419"/><text x="2.3576%" y="1487.50"></text></g><g><title>[unknown] (447,768,480 samples, 0.33%)</title><rect x="1.9436%" y="1509" width="0.3291%" height="15" fill="rgb(252,35,15)" fg:x="2644265860" fg:w="447768480"/><text x="2.1936%" y="1519.50"></text></g><g><title>_int_malloc (56,632,569 samples, 0.04%)</title><rect x="2.2311%" y="1493" width="0.0416%" height="15" fill="rgb(248,181,18)" fg:x="3035401771" fg:w="56632569"/><text x="2.4811%" y="1503.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1685" width="0.6004%" height="15" fill="rgb(233,39,42)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1695.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1669" width="0.6004%" height="15" fill="rgb(238,110,33)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1679.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1653" width="0.6004%" height="15" fill="rgb(233,195,10)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1663.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1637" width="0.6004%" height="15" fill="rgb(254,105,3)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1647.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1621" width="0.6004%" height="15" fill="rgb(221,225,9)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1631.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1605" width="0.6004%" height="15" fill="rgb(224,227,45)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1615.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1589" width="0.6004%" height="15" fill="rgb(229,198,43)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1599.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1573" width="0.6004%" height="15" fill="rgb(206,209,35)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1583.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1557" width="0.6004%" height="15" fill="rgb(245,195,53)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1567.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1541" width="0.6004%" height="15" fill="rgb(240,92,26)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1551.50"></text></g><g><title>[unknown] (816,812,423 samples, 0.60%)</title><rect x="1.9436%" y="1525" width="0.6004%" height="15" fill="rgb(207,40,23)" fg:x="2644265860" fg:w="816812423"/><text x="2.1936%" y="1535.50"></text></g><g><title>_int_malloc (369,043,943 samples, 0.27%)</title><rect x="2.2727%" y="1509" width="0.2713%" height="15" fill="rgb(223,111,35)" fg:x="3092034340" fg:w="369043943"/><text x="2.5227%" y="1519.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1909" width="0.6008%" height="15" fill="rgb(229,147,28)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1919.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1893" width="0.6008%" height="15" fill="rgb(211,29,28)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1903.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1877" width="0.6008%" height="15" fill="rgb(228,72,33)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1887.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1861" width="0.6008%" height="15" fill="rgb(205,214,31)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1871.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1845" width="0.6008%" height="15" fill="rgb(224,111,15)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1855.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1829" width="0.6008%" height="15" fill="rgb(253,21,26)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1839.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1813" width="0.6008%" height="15" fill="rgb(245,139,43)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1823.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1797" width="0.6008%" height="15" fill="rgb(252,170,7)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1807.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1781" width="0.6008%" height="15" fill="rgb(231,118,14)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1791.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1765" width="0.6008%" height="15" fill="rgb(238,83,0)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1775.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1749" width="0.6008%" height="15" fill="rgb(221,39,39)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1759.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1733" width="0.6008%" height="15" fill="rgb(222,119,46)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1743.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1717" width="0.6008%" height="15" fill="rgb(222,165,49)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1727.50"></text></g><g><title>[unknown] (817,317,970 samples, 0.60%)</title><rect x="1.9436%" y="1701" width="0.6008%" height="15" fill="rgb(219,113,52)" fg:x="2644265860" fg:w="817317970"/><text x="2.1936%" y="1711.50"></text></g><g><title>[unknown] (818,109,080 samples, 0.60%)</title><rect x="1.9436%" y="1925" width="0.6013%" height="15" fill="rgb(214,7,15)" fg:x="2644265860" fg:w="818109080"/><text x="2.1936%" y="1935.50"></text></g><g><title>[unknown] (818,899,410 samples, 0.60%)</title><rect x="1.9436%" y="1957" width="0.6019%" height="15" fill="rgb(235,32,4)" fg:x="2644265860" fg:w="818899410"/><text x="2.1936%" y="1967.50"></text></g><g><title>[unknown] (818,899,410 samples, 0.60%)</title><rect x="1.9436%" y="1941" width="0.6019%" height="15" fill="rgb(238,90,54)" fg:x="2644265860" fg:w="818899410"/><text x="2.1936%" y="1951.50"></text></g><g><title>[unknown] (821,115,322 samples, 0.60%)</title><rect x="1.9436%" y="1989" width="0.6035%" height="15" fill="rgb(213,208,19)" fg:x="2644265860" fg:w="821115322"/><text x="2.1936%" y="1999.50"></text></g><g><title>[unknown] (821,115,322 samples, 0.60%)</title><rect x="1.9436%" y="1973" width="0.6035%" height="15" fill="rgb(233,156,4)" fg:x="2644265860" fg:w="821115322"/><text x="2.1936%" y="1983.50"></text></g><g><title>[unknown] (821,783,390 samples, 0.60%)</title><rect x="1.9436%" y="2005" width="0.6040%" height="15" fill="rgb(207,194,5)" fg:x="2644265860" fg:w="821783390"/><text x="2.1936%" y="2015.50"></text></g><g><title>[unknown] (824,775,368 samples, 0.61%)</title><rect x="1.9436%" y="2021" width="0.6062%" height="15" fill="rgb(206,111,30)" fg:x="2644265860" fg:w="824775368"/><text x="2.1936%" y="2031.50"></text></g><g><title>[unknown] (826,424,969 samples, 0.61%)</title><rect x="1.9433%" y="2037" width="0.6074%" height="15" fill="rgb(243,70,54)" fg:x="2643818609" fg:w="826424969"/><text x="2.1933%" y="2047.50"></text></g><g><title>entry_SYSCALL_64 (16,607,024 samples, 0.01%)</title><rect x="2.5519%" y="2021" width="0.0122%" height="15" fill="rgb(242,28,8)" fg:x="3471899349" fg:w="16607024"/><text x="2.8019%" y="2031.50"></text></g><g><title>do_syscall_64 (16,105,858 samples, 0.01%)</title><rect x="2.5523%" y="2005" width="0.0118%" height="15" fill="rgb(219,106,18)" fg:x="3472400515" fg:w="16105858"/><text x="2.8023%" y="2015.50"></text></g><g><title>__GI___futex_abstimed_wait_cancelable64 (20,513,002 samples, 0.02%)</title><rect x="2.5509%" y="2037" width="0.0151%" height="15" fill="rgb(244,222,10)" fg:x="3470425447" fg:w="20513002"/><text x="2.8009%" y="2047.50"></text></g><g><title>_int_free (833,826,483 samples, 0.61%)</title><rect x="2.5755%" y="2037" width="0.6129%" height="15" fill="rgb(236,179,52)" fg:x="3503922251" fg:w="833826483"/><text x="2.8255%" y="2047.50"></text></g><g><title>unlink_chunk.constprop.0 (165,315,774 samples, 0.12%)</title><rect x="3.1908%" y="2037" width="0.1215%" height="15" fill="rgb(213,23,39)" fg:x="4341118345" fg:w="165315774"/><text x="3.4408%" y="2047.50"></text></g><g><title>[unknown] (1,862,725,992 samples, 1.37%)</title><rect x="1.9433%" y="2053" width="1.3692%" height="15" fill="rgb(238,48,10)" fg:x="2643818609" fg:w="1862725992"/><text x="2.1933%" y="2063.50"></text></g><g><title>copy_present_pte (112,791,884 samples, 0.08%)</title><rect x="3.3245%" y="1877" width="0.0829%" height="15" fill="rgb(251,196,23)" fg:x="4522907963" fg:w="112791884"/><text x="3.5745%" y="1887.50"></text></g><g><title>copy_page_range (125,343,517 samples, 0.09%)</title><rect x="3.3171%" y="1925" width="0.0921%" height="15" fill="rgb(250,152,24)" fg:x="4512897234" fg:w="125343517"/><text x="3.5671%" y="1935.50"></text></g><g><title>copy_p4d_range (125,343,517 samples, 0.09%)</title><rect x="3.3171%" y="1909" width="0.0921%" height="15" fill="rgb(209,150,17)" fg:x="4512897234" fg:w="125343517"/><text x="3.5671%" y="1919.50"></text></g><g><title>copy_pte_range (124,580,965 samples, 0.09%)</title><rect x="3.3177%" y="1893" width="0.0916%" height="15" fill="rgb(234,202,34)" fg:x="4513659786" fg:w="124580965"/><text x="3.5677%" y="1903.50"></text></g><g><title>dup_mmap (137,752,282 samples, 0.10%)</title><rect x="3.3125%" y="1941" width="0.1013%" height="15" fill="rgb(253,148,53)" fg:x="4506576044" fg:w="137752282"/><text x="3.5625%" y="1951.50"></text></g><g><title>entry_SYSCALL_64 (138,289,785 samples, 0.10%)</title><rect x="3.3125%" y="2037" width="0.1016%" height="15" fill="rgb(218,129,16)" fg:x="4506576044" fg:w="138289785"/><text x="3.5625%" y="2047.50"></text></g><g><title>do_syscall_64 (138,289,785 samples, 0.10%)</title><rect x="3.3125%" y="2021" width="0.1016%" height="15" fill="rgb(216,85,19)" fg:x="4506576044" fg:w="138289785"/><text x="3.5625%" y="2031.50"></text></g><g><title>__x64_sys_clone (138,289,785 samples, 0.10%)</title><rect x="3.3125%" y="2005" width="0.1016%" height="15" fill="rgb(235,228,7)" fg:x="4506576044" fg:w="138289785"/><text x="3.5625%" y="2015.50"></text></g><g><title>kernel_clone (138,289,785 samples, 0.10%)</title><rect x="3.3125%" y="1989" width="0.1016%" height="15" fill="rgb(245,175,0)" fg:x="4506576044" fg:w="138289785"/><text x="3.5625%" y="1999.50"></text></g><g><title>copy_process (138,289,785 samples, 0.10%)</title><rect x="3.3125%" y="1973" width="0.1016%" height="15" fill="rgb(208,168,36)" fg:x="4506576044" fg:w="138289785"/><text x="3.5625%" y="1983.50"></text></g><g><title>copy_mm (138,289,785 samples, 0.10%)</title><rect x="3.3125%" y="1957" width="0.1016%" height="15" fill="rgb(246,171,24)" fg:x="4506576044" fg:w="138289785"/><text x="3.5625%" y="1967.50"></text></g><g><title>_Fork (138,391,511 samples, 0.10%)</title><rect x="3.3124%" y="2053" width="0.1017%" height="15" fill="rgb(215,142,24)" fg:x="4506544601" fg:w="138391511"/><text x="3.5624%" y="2063.50"></text></g><g><title>page_remove_rmap (55,297,937 samples, 0.04%)</title><rect x="3.4832%" y="1765" width="0.0406%" height="15" fill="rgb(250,187,7)" fg:x="4738940098" fg:w="55297937"/><text x="3.7332%" y="1775.50"></text></g><g><title>free_pages_and_swap_cache (22,435,187 samples, 0.02%)</title><rect x="3.5239%" y="1749" width="0.0165%" height="15" fill="rgb(228,66,33)" fg:x="4794238035" fg:w="22435187"/><text x="3.7739%" y="1759.50"></text></g><g><title>release_pages (15,539,837 samples, 0.01%)</title><rect x="3.5290%" y="1733" width="0.0114%" height="15" fill="rgb(234,215,21)" fg:x="4801133385" fg:w="15539837"/><text x="3.7790%" y="1743.50"></text></g><g><title>tlb_flush_mmu (24,028,229 samples, 0.02%)</title><rect x="3.5239%" y="1765" width="0.0177%" height="15" fill="rgb(222,191,20)" fg:x="4794238035" fg:w="24028229"/><text x="3.7739%" y="1775.50"></text></g><g><title>__GI___execve (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="2053" width="0.1350%" height="15" fill="rgb(245,79,54)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="2063.50"></text></g><g><title>entry_SYSCALL_64 (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="2037" width="0.1350%" height="15" fill="rgb(240,10,37)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="2047.50"></text></g><g><title>do_syscall_64 (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="2021" width="0.1350%" height="15" fill="rgb(214,192,32)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="2031.50"></text></g><g><title>__x64_sys_execve (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="2005" width="0.1350%" height="15" fill="rgb(209,36,54)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="2015.50"></text></g><g><title>do_execveat_common (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1989" width="0.1350%" height="15" fill="rgb(220,10,11)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1999.50"></text></g><g><title>bprm_execve (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1973" width="0.1350%" height="15" fill="rgb(221,106,17)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1983.50"></text></g><g><title>exec_binprm (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1957" width="0.1350%" height="15" fill="rgb(251,142,44)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1967.50"></text></g><g><title>load_elf_binary (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1941" width="0.1350%" height="15" fill="rgb(238,13,15)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1951.50"></text></g><g><title>begin_new_exec (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1925" width="0.1350%" height="15" fill="rgb(208,107,27)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1935.50"></text></g><g><title>exec_mmap (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1909" width="0.1350%" height="15" fill="rgb(205,136,37)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1919.50"></text></g><g><title>mmput (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1893" width="0.1350%" height="15" fill="rgb(250,205,27)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1903.50"></text></g><g><title>__mmput (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1877" width="0.1350%" height="15" fill="rgb(210,80,43)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1887.50"></text></g><g><title>exit_mmap (183,598,702 samples, 0.13%)</title><rect x="3.4142%" y="1861" width="0.1350%" height="15" fill="rgb(247,160,36)" fg:x="4644936112" fg:w="183598702"/><text x="3.6642%" y="1871.50"></text></g><g><title>unmap_vmas (178,460,991 samples, 0.13%)</title><rect x="3.4179%" y="1845" width="0.1312%" height="15" fill="rgb(234,13,49)" fg:x="4650073823" fg:w="178460991"/><text x="3.6679%" y="1855.50"></text></g><g><title>unmap_single_vma (177,668,113 samples, 0.13%)</title><rect x="3.4185%" y="1829" width="0.1306%" height="15" fill="rgb(234,122,0)" fg:x="4650866701" fg:w="177668113"/><text x="3.6685%" y="1839.50"></text></g><g><title>unmap_page_range (177,668,113 samples, 0.13%)</title><rect x="3.4185%" y="1813" width="0.1306%" height="15" fill="rgb(207,146,38)" fg:x="4650866701" fg:w="177668113"/><text x="3.6685%" y="1823.50"></text></g><g><title>zap_p4d_range (177,668,113 samples, 0.13%)</title><rect x="3.4185%" y="1797" width="0.1306%" height="15" fill="rgb(207,177,25)" fg:x="4650866701" fg:w="177668113"/><text x="3.6685%" y="1807.50"></text></g><g><title>zap_pte_range (172,542,724 samples, 0.13%)</title><rect x="3.4223%" y="1781" width="0.1268%" height="15" fill="rgb(211,178,42)" fg:x="4655992090" fg:w="172542724"/><text x="3.6723%" y="1791.50"></text></g><g><title>__sched_text_start (16,895,678 samples, 0.01%)</title><rect x="3.5747%" y="1813" width="0.0124%" height="15" fill="rgb(230,69,54)" fg:x="4863392803" fg:w="16895678"/><text x="3.8247%" y="1823.50"></text></g><g><title>schedule_hrtimeout_range (25,615,364 samples, 0.02%)</title><rect x="3.5689%" y="1861" width="0.0188%" height="15" fill="rgb(214,135,41)" fg:x="4855427887" fg:w="25615364"/><text x="3.8189%" y="1871.50"></text></g><g><title>schedule_hrtimeout_range_clock (24,271,244 samples, 0.02%)</title><rect x="3.5699%" y="1845" width="0.0178%" height="15" fill="rgb(237,67,25)" fg:x="4856772007" fg:w="24271244"/><text x="3.8199%" y="1855.50"></text></g><g><title>schedule (18,362,077 samples, 0.01%)</title><rect x="3.5742%" y="1829" width="0.0135%" height="15" fill="rgb(222,189,50)" fg:x="4862681174" fg:w="18362077"/><text x="3.8242%" y="1839.50"></text></g><g><title>do_epoll_wait (32,641,740 samples, 0.02%)</title><rect x="3.5643%" y="1877" width="0.0240%" height="15" fill="rgb(245,148,34)" fg:x="4849187734" fg:w="32641740"/><text x="3.8143%" y="1887.50"></text></g><g><title>__se_sys_epoll_pwait (35,553,843 samples, 0.03%)</title><rect x="3.5624%" y="1893" width="0.0261%" height="15" fill="rgb(222,29,6)" fg:x="4846575008" fg:w="35553843"/><text x="3.8124%" y="1903.50"></text></g><g><title>__x64_sys_epoll_pwait (36,970,521 samples, 0.03%)</title><rect x="3.5624%" y="1909" width="0.0272%" height="15" fill="rgb(221,189,43)" fg:x="4846575008" fg:w="36970521"/><text x="3.8124%" y="1919.50"></text></g><g><title>entry_SYSCALL_64 (42,288,581 samples, 0.03%)</title><rect x="3.5606%" y="1941" width="0.0311%" height="15" fill="rgb(207,36,27)" fg:x="4844155543" fg:w="42288581"/><text x="3.8106%" y="1951.50"></text></g><g><title>do_syscall_64 (39,958,104 samples, 0.03%)</title><rect x="3.5623%" y="1925" width="0.0294%" height="15" fill="rgb(217,90,24)" fg:x="4846486020" fg:w="39958104"/><text x="3.8123%" y="1935.50"></text></g><g><title>epoll_pwait (50,726,301 samples, 0.04%)</title><rect x="3.5583%" y="1957" width="0.0373%" height="15" fill="rgb(224,66,35)" fg:x="4841074569" fg:w="50726301"/><text x="3.8083%" y="1967.50"></text></g><g><title>read (13,657,612 samples, 0.01%)</title><rect x="3.5985%" y="1941" width="0.0100%" height="15" fill="rgb(221,13,50)" fg:x="4895777668" fg:w="13657612"/><text x="3.8485%" y="1951.50"></text></g><g><title>node::fs::GetReqWrap (14,241,012 samples, 0.01%)</title><rect x="3.6397%" y="1621" width="0.0105%" height="15" fill="rgb(236,68,49)" fg:x="4951723801" fg:w="14241012"/><text x="3.8897%" y="1631.50"></text></g><g><title>node::fs::FSReqPromise&lt;node::AliasedBufferBase&lt;double, v8::Float64Array&gt; &gt;::New (14,241,012 samples, 0.01%)</title><rect x="3.6397%" y="1605" width="0.0105%" height="15" fill="rgb(229,146,28)" fg:x="4951723801" fg:w="14241012"/><text x="3.8897%" y="1615.50"></text></g><g><title>node::fs::ReadLink (20,435,915 samples, 0.02%)</title><rect x="3.6366%" y="1637" width="0.0150%" height="15" fill="rgb(225,31,38)" fg:x="4947582615" fg:w="20435915"/><text x="3.8866%" y="1647.50"></text></g><g><title>Builtins_CallApiCallback (23,481,213 samples, 0.02%)</title><rect x="3.6366%" y="1653" width="0.0173%" height="15" fill="rgb(250,208,3)" fg:x="4947582615" fg:w="23481213"/><text x="3.8866%" y="1663.50"></text></g><g><title>Builtins_AsyncFunctionAwaitResolveClosure (49,183,048 samples, 0.04%)</title><rect x="3.6229%" y="1701" width="0.0362%" height="15" fill="rgb(246,54,23)" fg:x="4928994445" fg:w="49183048"/><text x="3.8729%" y="1711.50"></text></g><g><title>[perf-2071.map] (49,183,048 samples, 0.04%)</title><rect x="3.6229%" y="1685" width="0.0362%" height="15" fill="rgb(243,76,11)" fg:x="4928994445" fg:w="49183048"/><text x="3.8729%" y="1695.50"></text></g><g><title>[perf-2071.map] (40,816,442 samples, 0.03%)</title><rect x="3.6291%" y="1669" width="0.0300%" height="15" fill="rgb(245,21,50)" fg:x="4937361051" fg:w="40816442"/><text x="3.8791%" y="1679.50"></text></g><g><title>v8::internal::(anonymous namespace)::Invoke (52,755,489 samples, 0.04%)</title><rect x="3.6213%" y="1765" width="0.0388%" height="15" fill="rgb(228,9,43)" fg:x="4926811538" fg:w="52755489"/><text x="3.8713%" y="1775.50"></text></g><g><title>Builtins_JSRunMicrotasksEntry (51,256,683 samples, 0.04%)</title><rect x="3.6224%" y="1749" width="0.0377%" height="15" fill="rgb(208,100,47)" fg:x="4928310344" fg:w="51256683"/><text x="3.8724%" y="1759.50"></text></g><g><title>Builtins_RunMicrotasks (51,256,683 samples, 0.04%)</title><rect x="3.6224%" y="1733" width="0.0377%" height="15" fill="rgb(232,26,8)" fg:x="4928310344" fg:w="51256683"/><text x="3.8724%" y="1743.50"></text></g><g><title>Builtins_PromiseFulfillReactionJob (50,572,582 samples, 0.04%)</title><rect x="3.6229%" y="1717" width="0.0372%" height="15" fill="rgb(216,166,38)" fg:x="4928994445" fg:w="50572582"/><text x="3.8729%" y="1727.50"></text></g><g><title>node::InternalCallbackScope::Close (55,269,643 samples, 0.04%)</title><rect x="3.6199%" y="1845" width="0.0406%" height="15" fill="rgb(251,202,51)" fg:x="4924895309" fg:w="55269643"/><text x="3.8699%" y="1855.50"></text></g><g><title>v8::internal::MicrotaskQueue::PerformCheckpoint (54,054,922 samples, 0.04%)</title><rect x="3.6208%" y="1829" width="0.0397%" height="15" fill="rgb(254,216,34)" fg:x="4926110030" fg:w="54054922"/><text x="3.8708%" y="1839.50"></text></g><g><title>v8::internal::MicrotaskQueue::RunMicrotasks (54,054,922 samples, 0.04%)</title><rect x="3.6208%" y="1813" width="0.0397%" height="15" fill="rgb(251,32,27)" fg:x="4926110030" fg:w="54054922"/><text x="3.8708%" y="1823.50"></text></g><g><title>v8::internal::Execution::TryRunMicrotasks (53,353,414 samples, 0.04%)</title><rect x="3.6213%" y="1797" width="0.0392%" height="15" fill="rgb(208,127,28)" fg:x="4926811538" fg:w="53353414"/><text x="3.8713%" y="1807.50"></text></g><g><title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (53,353,414 samples, 0.04%)</title><rect x="3.6213%" y="1781" width="0.0392%" height="15" fill="rgb(224,137,22)" fg:x="4926811538" fg:w="53353414"/><text x="3.8713%" y="1791.50"></text></g><g><title>node::InternalCallbackScope::~InternalCallbackScope (56,260,046 samples, 0.04%)</title><rect x="3.6197%" y="1861" width="0.0414%" height="15" fill="rgb(254,70,32)" fg:x="4924527682" fg:w="56260046"/><text x="3.8697%" y="1871.50"></text></g><g><title>node::fs::FSReqPromise&lt;node::AliasedBufferBase&lt;double, v8::Float64Array&gt; &gt;::ResolveStat (60,415,564 samples, 0.04%)</title><rect x="3.6197%" y="1877" width="0.0444%" height="15" fill="rgb(229,75,37)" fg:x="4924527682" fg:w="60415564"/><text x="3.8697%" y="1887.50"></text></g><g><title>node::fs::AfterStat (64,039,845 samples, 0.05%)</title><rect x="3.6176%" y="1893" width="0.0471%" height="15" fill="rgb(252,64,23)" fg:x="4921658150" fg:w="64039845"/><text x="3.8676%" y="1903.50"></text></g><g><title>node::UVException (14,559,839 samples, 0.01%)</title><rect x="3.6646%" y="1861" width="0.0107%" height="15" fill="rgb(232,162,48)" fg:x="4985697995" fg:w="14559839"/><text x="3.9146%" y="1871.50"></text></g><g><title>node::fs::GetReqWrap (13,731,558 samples, 0.01%)</title><rect x="3.6913%" y="1605" width="0.0101%" height="15" fill="rgb(246,160,12)" fg:x="5021938194" fg:w="13731558"/><text x="3.9413%" y="1615.50"></text></g><g><title>node::fs::FSReqPromise&lt;node::AliasedBufferBase&lt;double, v8::Float64Array&gt; &gt;::New (13,731,558 samples, 0.01%)</title><rect x="3.6913%" y="1589" width="0.0101%" height="15" fill="rgb(247,166,0)" fg:x="5021938194" fg:w="13731558"/><text x="3.9413%" y="1599.50"></text></g><g><title>Builtins_CallApiCallback (19,903,573 samples, 0.01%)</title><rect x="3.6897%" y="1637" width="0.0146%" height="15" fill="rgb(249,219,21)" fg:x="5019795754" fg:w="19903573"/><text x="3.9397%" y="1647.50"></text></g><g><title>node::fs::Stat (19,199,101 samples, 0.01%)</title><rect x="3.6902%" y="1621" width="0.0141%" height="15" fill="rgb(205,209,3)" fg:x="5020500226" fg:w="19199101"/><text x="3.9402%" y="1631.50"></text></g><g><title>node::InternalCallbackScope::~InternalCallbackScope (40,862,559 samples, 0.03%)</title><rect x="3.6753%" y="1845" width="0.0300%" height="15" fill="rgb(243,44,1)" fg:x="5000257834" fg:w="40862559"/><text x="3.9253%" y="1855.50"></text></g><g><title>node::InternalCallbackScope::Close (40,862,559 samples, 0.03%)</title><rect x="3.6753%" y="1829" width="0.0300%" height="15" fill="rgb(206,159,16)" fg:x="5000257834" fg:w="40862559"/><text x="3.9253%" y="1839.50"></text></g><g><title>v8::internal::MicrotaskQueue::PerformCheckpoint (40,112,058 samples, 0.03%)</title><rect x="3.6759%" y="1813" width="0.0295%" height="15" fill="rgb(244,77,30)" fg:x="5001008335" fg:w="40112058"/><text x="3.9259%" y="1823.50"></text></g><g><title>v8::internal::MicrotaskQueue::RunMicrotasks (40,112,058 samples, 0.03%)</title><rect x="3.6759%" y="1797" width="0.0295%" height="15" fill="rgb(218,69,12)" fg:x="5001008335" fg:w="40112058"/><text x="3.9259%" y="1807.50"></text></g><g><title>v8::internal::Execution::TryRunMicrotasks (40,112,058 samples, 0.03%)</title><rect x="3.6759%" y="1781" width="0.0295%" height="15" fill="rgb(212,87,7)" fg:x="5001008335" fg:w="40112058"/><text x="3.9259%" y="1791.50"></text></g><g><title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (40,112,058 samples, 0.03%)</title><rect x="3.6759%" y="1765" width="0.0295%" height="15" fill="rgb(245,114,25)" fg:x="5001008335" fg:w="40112058"/><text x="3.9259%" y="1775.50"></text></g><g><title>v8::internal::(anonymous namespace)::Invoke (38,684,303 samples, 0.03%)</title><rect x="3.6769%" y="1749" width="0.0284%" height="15" fill="rgb(210,61,42)" fg:x="5002436090" fg:w="38684303"/><text x="3.9269%" y="1759.50"></text></g><g><title>Builtins_JSRunMicrotasksEntry (38,052,054 samples, 0.03%)</title><rect x="3.6774%" y="1733" width="0.0280%" height="15" fill="rgb(211,52,33)" fg:x="5003068339" fg:w="38052054"/><text x="3.9274%" y="1743.50"></text></g><g><title>Builtins_RunMicrotasks (38,052,054 samples, 0.03%)</title><rect x="3.6774%" y="1717" width="0.0280%" height="15" fill="rgb(234,58,33)" fg:x="5003068339" fg:w="38052054"/><text x="3.9274%" y="1727.50"></text></g><g><title>Builtins_PromiseRejectReactionJob (37,380,945 samples, 0.03%)</title><rect x="3.6779%" y="1701" width="0.0275%" height="15" fill="rgb(220,115,36)" fg:x="5003739448" fg:w="37380945"/><text x="3.9279%" y="1711.50"></text></g><g><title>Builtins_AsyncFunctionAwaitRejectClosure (36,748,784 samples, 0.03%)</title><rect x="3.6783%" y="1685" width="0.0270%" height="15" fill="rgb(243,153,54)" fg:x="5004371609" fg:w="36748784"/><text x="3.9283%" y="1695.50"></text></g><g><title>[perf-2071.map] (36,748,784 samples, 0.03%)</title><rect x="3.6783%" y="1669" width="0.0270%" height="15" fill="rgb(251,47,18)" fg:x="5004371609" fg:w="36748784"/><text x="3.9283%" y="1679.50"></text></g><g><title>[perf-2071.map] (24,125,740 samples, 0.02%)</title><rect x="3.6876%" y="1653" width="0.0177%" height="15" fill="rgb(242,102,42)" fg:x="5016994653" fg:w="24125740"/><text x="3.9376%" y="1663.50"></text></g><g><title>node::fs::FSReqPromise&lt;node::AliasedBufferBase&lt;double, v8::Float64Array&gt; &gt;::Reject (42,240,421 samples, 0.03%)</title><rect x="3.6753%" y="1861" width="0.0310%" height="15" fill="rgb(234,31,38)" fg:x="5000257834" fg:w="42240421"/><text x="3.9253%" y="1871.50"></text></g><g><title>node::fs::FSReqAfterScope::Reject (58,552,116 samples, 0.04%)</title><rect x="3.6646%" y="1877" width="0.0430%" height="15" fill="rgb(221,117,51)" fg:x="4985697995" fg:w="58552116"/><text x="3.9146%" y="1887.50"></text></g><g><title>node::fs::AfterStringPtr (61,223,072 samples, 0.05%)</title><rect x="3.6646%" y="1893" width="0.0450%" height="15" fill="rgb(212,20,18)" fg:x="4985697995" fg:w="61223072"/><text x="3.9146%" y="1903.50"></text></g><g><title>uv__async_io.part.3 (147,994,388 samples, 0.11%)</title><rect x="3.6086%" y="1941" width="0.1088%" height="15" fill="rgb(245,133,36)" fg:x="4909435280" fg:w="147994388"/><text x="3.8586%" y="1951.50"></text></g><g><title>uv__work_done (142,041,239 samples, 0.10%)</title><rect x="3.6129%" y="1925" width="0.1044%" height="15" fill="rgb(212,6,19)" fg:x="4915388429" fg:w="142041239"/><text x="3.8629%" y="1935.50"></text></g><g><title>node::MakeLibuvRequestCallback&lt;uv_fs_s, void (*)(uv_fs_s*)&gt;::Wrapper (140,647,716 samples, 0.10%)</title><rect x="3.6140%" y="1909" width="0.1034%" height="15" fill="rgb(218,1,36)" fg:x="4916781952" fg:w="140647716"/><text x="3.8640%" y="1919.50"></text></g><g><title>uv__io_poll (186,973,114 samples, 0.14%)</title><rect x="3.5968%" y="1957" width="0.1374%" height="15" fill="rgb(246,84,54)" fg:x="4893400278" fg:w="186973114"/><text x="3.8468%" y="1967.50"></text></g><g><title>uv__stream_io (13,999,152 samples, 0.01%)</title><rect x="3.7239%" y="1941" width="0.0103%" height="15" fill="rgb(242,110,6)" fg:x="5066374240" fg:w="13999152"/><text x="3.9739%" y="1951.50"></text></g><g><title>__libc_start_call_main (267,603,076 samples, 0.20%)</title><rect x="3.5522%" y="2053" width="0.1967%" height="15" fill="rgb(214,47,5)" fg:x="4832680557" fg:w="267603076"/><text x="3.8022%" y="2063.50"></text></g><g><title>node::Start (267,603,076 samples, 0.20%)</title><rect x="3.5522%" y="2037" width="0.1967%" height="15" fill="rgb(218,159,25)" fg:x="4832680557" fg:w="267603076"/><text x="3.8022%" y="2047.50"></text></g><g><title>node::NodeMainInstance::Run (267,603,076 samples, 0.20%)</title><rect x="3.5522%" y="2021" width="0.1967%" height="15" fill="rgb(215,211,28)" fg:x="4832680557" fg:w="267603076"/><text x="3.8022%" y="2031.50"></text></g><g><title>node::NodeMainInstance::Run (267,603,076 samples, 0.20%)</title><rect x="3.5522%" y="2005" width="0.1967%" height="15" fill="rgb(238,59,32)" fg:x="4832680557" fg:w="267603076"/><text x="3.8022%" y="2015.50"></text></g><g><title>node::SpinEventLoopInternal (267,603,076 samples, 0.20%)</title><rect x="3.5522%" y="1989" width="0.1967%" height="15" fill="rgb(226,82,3)" fg:x="4832680557" fg:w="267603076"/><text x="3.8022%" y="1999.50"></text></g><g><title>uv_run (266,907,427 samples, 0.20%)</title><rect x="3.5527%" y="1973" width="0.1962%" height="15" fill="rgb(240,164,32)" fg:x="4833376206" fg:w="266907427"/><text x="3.8027%" y="1983.50"></text></g><g><title>_int_free (154,449,863 samples, 0.11%)</title><rect x="3.7536%" y="2053" width="0.1135%" height="15" fill="rgb(232,46,7)" fg:x="5106684640" fg:w="154449863"/><text x="4.0036%" y="2063.50"></text></g><g><title>_int_malloc (659,203,090 samples, 0.48%)</title><rect x="3.8671%" y="2053" width="0.4845%" height="15" fill="rgb(229,129,53)" fg:x="5261134503" fg:w="659203090"/><text x="4.1171%" y="2063.50"></text></g><g><title>cfree@GLIBC_2.2.5 (412,381,961 samples, 0.30%)</title><rect x="4.3561%" y="2053" width="0.3031%" height="15" fill="rgb(234,188,29)" fg:x="5926465566" fg:w="412381961"/><text x="4.6061%" y="2063.50"></text></g><g><title>malloc (1,103,489,194 samples, 0.81%)</title><rect x="4.6592%" y="2053" width="0.8111%" height="15" fill="rgb(246,141,4)" fg:x="6338847527" fg:w="1103489194"/><text x="4.9092%" y="2063.50"></text></g><g><title>node::(anonymous namespace)::PlatformWorkerThread (16,980,872 samples, 0.01%)</title><rect x="5.4792%" y="2037" width="0.0125%" height="15" fill="rgb(229,23,39)" fg:x="7454400280" fg:w="16980872"/><text x="5.7292%" y="2047.50"></text></g><g><title>__GI___libc_write (14,526,518 samples, 0.01%)</title><rect x="5.4920%" y="2021" width="0.0107%" height="15" fill="rgb(206,12,3)" fg:x="7471862311" fg:w="14526518"/><text x="5.7420%" y="2031.50"></text></g><g><title>ksys_read (22,704,296 samples, 0.02%)</title><rect x="5.5171%" y="1957" width="0.0167%" height="15" fill="rgb(252,226,20)" fg:x="7505925934" fg:w="22704296"/><text x="5.7671%" y="1967.50"></text></g><g><title>vfs_read (22,704,296 samples, 0.02%)</title><rect x="5.5171%" y="1941" width="0.0167%" height="15" fill="rgb(216,123,35)" fg:x="7505925934" fg:w="22704296"/><text x="5.7671%" y="1951.50"></text></g><g><title>proc_reg_read (20,480,772 samples, 0.02%)</title><rect x="5.5187%" y="1925" width="0.0151%" height="15" fill="rgb(212,68,40)" fg:x="7508149458" fg:w="20480772"/><text x="5.7687%" y="1935.50"></text></g><g><title>seq_read (20,480,772 samples, 0.02%)</title><rect x="5.5187%" y="1909" width="0.0151%" height="15" fill="rgb(254,125,32)" fg:x="7508149458" fg:w="20480772"/><text x="5.7687%" y="1919.50"></text></g><g><title>seq_read_iter (20,480,772 samples, 0.02%)</title><rect x="5.5187%" y="1893" width="0.0151%" height="15" fill="rgb(253,97,22)" fg:x="7508149458" fg:w="20480772"/><text x="5.7687%" y="1903.50"></text></g><g><title>tcp_seq_next (20,152,971 samples, 0.01%)</title><rect x="5.5189%" y="1877" width="0.0148%" height="15" fill="rgb(241,101,14)" fg:x="7508477259" fg:w="20152971"/><text x="5.7689%" y="1887.50"></text></g><g><title>read (23,199,294 samples, 0.02%)</title><rect x="5.5171%" y="2021" width="0.0171%" height="15" fill="rgb(238,103,29)" fg:x="7505925934" fg:w="23199294"/><text x="5.7671%" y="2031.50"></text></g><g><title>entry_SYSCALL_64 (23,199,294 samples, 0.02%)</title><rect x="5.5171%" y="2005" width="0.0171%" height="15" fill="rgb(233,195,47)" fg:x="7505925934" fg:w="23199294"/><text x="5.7671%" y="2015.50"></text></g><g><title>do_syscall_64 (23,199,294 samples, 0.02%)</title><rect x="5.5171%" y="1989" width="0.0171%" height="15" fill="rgb(246,218,30)" fg:x="7505925934" fg:w="23199294"/><text x="5.7671%" y="1999.50"></text></g><g><title>__x64_sys_read (23,199,294 samples, 0.02%)</title><rect x="5.5171%" y="1973" width="0.0171%" height="15" fill="rgb(219,145,47)" fg:x="7505925934" fg:w="23199294"/><text x="5.7671%" y="1983.50"></text></g><g><title>uv__fs_work (14,197,529 samples, 0.01%)</title><rect x="5.5344%" y="2021" width="0.0104%" height="15" fill="rgb(243,12,26)" fg:x="7529572196" fg:w="14197529"/><text x="5.7844%" y="2031.50"></text></g><g><title>start_thread (90,243,468 samples, 0.07%)</title><rect x="5.4792%" y="2053" width="0.0663%" height="15" fill="rgb(214,87,16)" fg:x="7454400280" fg:w="90243468"/><text x="5.7292%" y="2063.50"></text></g><g><title>worker (73,262,596 samples, 0.05%)</title><rect x="5.4917%" y="2037" width="0.0538%" height="15" fill="rgb(208,99,42)" fg:x="7471381152" fg:w="73262596"/><text x="5.7417%" y="2047.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (37,453,452 samples, 0.03%)</title><rect x="5.5489%" y="37" width="0.0275%" height="15" fill="rgb(253,99,2)" fg:x="7549265172" fg:w="37453452"/><text x="5.7989%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="2005" width="0.0326%" height="15" fill="rgb(220,168,23)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1989" width="0.0326%" height="15" fill="rgb(242,38,24)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1973" width="0.0326%" height="15" fill="rgb(225,182,9)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1957" width="0.0326%" height="15" fill="rgb(243,178,37)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1941" width="0.0326%" height="15" fill="rgb(232,139,19)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1925" width="0.0326%" height="15" fill="rgb(225,201,24)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1909" width="0.0326%" height="15" fill="rgb(221,47,46)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1893" width="0.0326%" height="15" fill="rgb(249,23,13)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1877" width="0.0326%" height="15" fill="rgb(219,9,5)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1861" width="0.0326%" height="15" fill="rgb(254,171,16)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1845" width="0.0326%" height="15" fill="rgb(230,171,20)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1829" width="0.0326%" height="15" fill="rgb(210,71,41)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1813" width="0.0326%" height="15" fill="rgb(206,173,20)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1797" width="0.0326%" height="15" fill="rgb(233,88,34)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1781" width="0.0326%" height="15" fill="rgb(223,209,46)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1765" width="0.0326%" height="15" fill="rgb(250,43,18)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1749" width="0.0326%" height="15" fill="rgb(208,13,10)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1733" width="0.0326%" height="15" fill="rgb(212,200,36)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1717" width="0.0326%" height="15" fill="rgb(225,90,30)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1701" width="0.0326%" height="15" fill="rgb(236,182,39)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1685" width="0.0326%" height="15" fill="rgb(212,144,35)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1669" width="0.0326%" height="15" fill="rgb(228,63,44)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1653" width="0.0326%" height="15" fill="rgb(228,109,6)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1637" width="0.0326%" height="15" fill="rgb(238,117,24)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1621" width="0.0326%" height="15" fill="rgb(242,26,26)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1605" width="0.0326%" height="15" fill="rgb(221,92,48)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1589" width="0.0326%" height="15" fill="rgb(209,209,32)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1573" width="0.0326%" height="15" fill="rgb(221,70,22)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1557" width="0.0326%" height="15" fill="rgb(248,145,5)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1541" width="0.0326%" height="15" fill="rgb(226,116,26)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1525" width="0.0326%" height="15" fill="rgb(244,5,17)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1509" width="0.0326%" height="15" fill="rgb(252,159,33)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1493" width="0.0326%" height="15" fill="rgb(206,71,0)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1477" width="0.0326%" height="15" fill="rgb(233,118,54)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1461" width="0.0326%" height="15" fill="rgb(234,83,48)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1445" width="0.0326%" height="15" fill="rgb(228,3,54)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1429" width="0.0326%" height="15" fill="rgb(226,155,13)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1413" width="0.0326%" height="15" fill="rgb(241,28,37)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1397" width="0.0326%" height="15" fill="rgb(233,93,10)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1381" width="0.0326%" height="15" fill="rgb(225,113,19)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1365" width="0.0326%" height="15" fill="rgb(241,2,18)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1349" width="0.0326%" height="15" fill="rgb(228,207,21)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1333" width="0.0326%" height="15" fill="rgb(213,211,35)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1317" width="0.0326%" height="15" fill="rgb(209,83,10)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1301" width="0.0326%" height="15" fill="rgb(209,164,1)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1285" width="0.0326%" height="15" fill="rgb(213,184,43)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1269" width="0.0326%" height="15" fill="rgb(231,61,34)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1253" width="0.0326%" height="15" fill="rgb(235,75,3)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1237" width="0.0326%" height="15" fill="rgb(220,106,47)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1221" width="0.0326%" height="15" fill="rgb(210,196,33)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1205" width="0.0326%" height="15" fill="rgb(229,154,42)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1189" width="0.0326%" height="15" fill="rgb(228,114,26)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1173" width="0.0326%" height="15" fill="rgb(208,144,1)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1157" width="0.0326%" height="15" fill="rgb(239,112,37)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1141" width="0.0326%" height="15" fill="rgb(210,96,50)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1125" width="0.0326%" height="15" fill="rgb(222,178,2)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1109" width="0.0326%" height="15" fill="rgb(226,74,18)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1093" width="0.0326%" height="15" fill="rgb(225,67,54)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1077" width="0.0326%" height="15" fill="rgb(251,92,32)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1061" width="0.0326%" height="15" fill="rgb(228,149,22)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1045" width="0.0326%" height="15" fill="rgb(243,54,13)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1029" width="0.0326%" height="15" fill="rgb(243,180,28)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="1013" width="0.0326%" height="15" fill="rgb(208,167,24)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="997" width="0.0326%" height="15" fill="rgb(245,73,45)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="981" width="0.0326%" height="15" fill="rgb(237,203,48)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="965" width="0.0326%" height="15" fill="rgb(211,197,16)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="949" width="0.0326%" height="15" fill="rgb(243,99,51)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="933" width="0.0326%" height="15" fill="rgb(215,123,29)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="917" width="0.0326%" height="15" fill="rgb(239,186,37)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="901" width="0.0326%" height="15" fill="rgb(252,136,39)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="885" width="0.0326%" height="15" fill="rgb(223,213,32)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="869" width="0.0326%" height="15" fill="rgb(233,115,5)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="853" width="0.0326%" height="15" fill="rgb(207,226,44)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="837" width="0.0326%" height="15" fill="rgb(208,126,0)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="821" width="0.0326%" height="15" fill="rgb(244,66,21)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="805" width="0.0326%" height="15" fill="rgb(222,97,12)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="789" width="0.0326%" height="15" fill="rgb(219,213,19)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="773" width="0.0326%" height="15" fill="rgb(252,169,30)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="757" width="0.0326%" height="15" fill="rgb(206,32,51)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="741" width="0.0326%" height="15" fill="rgb(250,172,42)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="725" width="0.0326%" height="15" fill="rgb(209,34,43)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="709" width="0.0326%" height="15" fill="rgb(223,11,35)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="693" width="0.0326%" height="15" fill="rgb(251,219,26)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="677" width="0.0326%" height="15" fill="rgb(231,119,3)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="661" width="0.0326%" height="15" fill="rgb(216,97,11)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="645" width="0.0326%" height="15" fill="rgb(223,59,9)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="629" width="0.0326%" height="15" fill="rgb(233,93,31)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="613" width="0.0326%" height="15" fill="rgb(239,81,33)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="597" width="0.0326%" height="15" fill="rgb(213,120,34)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="581" width="0.0326%" height="15" fill="rgb(243,49,53)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="565" width="0.0326%" height="15" fill="rgb(247,216,33)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="549" width="0.0326%" height="15" fill="rgb(226,26,14)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="533" width="0.0326%" height="15" fill="rgb(215,49,53)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="517" width="0.0326%" height="15" fill="rgb(245,162,40)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="501" width="0.0326%" height="15" fill="rgb(229,68,17)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="485" width="0.0326%" height="15" fill="rgb(213,182,10)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="469" width="0.0326%" height="15" fill="rgb(245,125,30)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="453" width="0.0326%" height="15" fill="rgb(232,202,2)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="437" width="0.0326%" height="15" fill="rgb(237,140,51)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="421" width="0.0326%" height="15" fill="rgb(236,157,25)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="405" width="0.0326%" height="15" fill="rgb(219,209,0)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="389" width="0.0326%" height="15" fill="rgb(240,116,54)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="373" width="0.0326%" height="15" fill="rgb(216,10,36)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="357" width="0.0326%" height="15" fill="rgb(222,72,44)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="341" width="0.0326%" height="15" fill="rgb(232,159,9)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="325" width="0.0326%" height="15" fill="rgb(210,39,32)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="309" width="0.0326%" height="15" fill="rgb(216,194,45)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="293" width="0.0326%" height="15" fill="rgb(218,18,35)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="277" width="0.0326%" height="15" fill="rgb(207,83,51)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="261" width="0.0326%" height="15" fill="rgb(225,63,43)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="245" width="0.0326%" height="15" fill="rgb(207,57,36)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="229" width="0.0326%" height="15" fill="rgb(216,99,33)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="213" width="0.0326%" height="15" fill="rgb(225,42,16)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="197" width="0.0326%" height="15" fill="rgb(220,201,45)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="181" width="0.0326%" height="15" fill="rgb(225,33,4)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="165" width="0.0326%" height="15" fill="rgb(224,33,50)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="149" width="0.0326%" height="15" fill="rgb(246,198,51)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="133" width="0.0326%" height="15" fill="rgb(205,22,4)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="117" width="0.0326%" height="15" fill="rgb(206,3,8)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="101" width="0.0326%" height="15" fill="rgb(251,23,15)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="85" width="0.0326%" height="15" fill="rgb(252,88,28)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="69" width="0.0326%" height="15" fill="rgb(212,127,14)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,285,601 samples, 0.03%)</title><rect x="5.5455%" y="53" width="0.0326%" height="15" fill="rgb(247,145,37)" fg:x="7544643748" fg:w="44285601"/><text x="5.7955%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (321,792,733 samples, 0.24%)</title><rect x="5.5792%" y="37" width="0.2365%" height="15" fill="rgb(209,117,53)" fg:x="7590429174" fg:w="321792733"/><text x="5.8292%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (352,133,315 samples, 0.26%)</title><rect x="5.5792%" y="53" width="0.2588%" height="15" fill="rgb(212,90,42)" fg:x="7590429174" fg:w="352133315"/><text x="5.8292%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (30,340,582 samples, 0.02%)</title><rect x="5.8157%" y="37" width="0.0223%" height="15" fill="rgb(218,164,37)" fg:x="7912221907" fg:w="30340582"/><text x="6.0657%" y="47.50"></text></g><g><title>malloc (38,795,667 samples, 0.03%)</title><rect x="5.8380%" y="37" width="0.0285%" height="15" fill="rgb(246,65,34)" fg:x="7942562489" fg:w="38795667"/><text x="6.0880%" y="47.50"></text></g><g><title>operator new (75,384,303 samples, 0.06%)</title><rect x="5.8671%" y="37" width="0.0554%" height="15" fill="rgb(231,100,33)" fg:x="7982148601" fg:w="75384303"/><text x="6.1171%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (279,504,624 samples, 0.21%)</title><rect x="5.9225%" y="37" width="0.2054%" height="15" fill="rgb(228,126,14)" fg:x="8057532904" fg:w="279504624"/><text x="6.1725%" y="47.50"></text></g><g><title>std::vector&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt; &gt;::operator= (375,029,145 samples, 0.28%)</title><rect x="6.1279%" y="37" width="0.2757%" height="15" fill="rgb(215,173,21)" fg:x="8337037528" fg:w="375029145"/><text x="6.3779%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,401,468,179 samples, 1.03%)</title><rect x="5.5455%" y="2021" width="1.0301%" height="15" fill="rgb(210,6,40)" fg:x="7544643748" fg:w="1401468179"/><text x="5.7955%" y="2031.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="2005" width="0.9976%" height="15" fill="rgb(212,48,18)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1989" width="0.9976%" height="15" fill="rgb(230,214,11)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1973" width="0.9976%" height="15" fill="rgb(254,105,39)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1957" width="0.9976%" height="15" fill="rgb(245,158,5)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1941" width="0.9976%" height="15" fill="rgb(249,208,11)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1925" width="0.9976%" height="15" fill="rgb(210,39,28)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1909" width="0.9976%" height="15" fill="rgb(211,56,53)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1893" width="0.9976%" height="15" fill="rgb(226,201,30)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1877" width="0.9976%" height="15" fill="rgb(239,101,34)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1861" width="0.9976%" height="15" fill="rgb(226,209,5)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1845" width="0.9976%" height="15" fill="rgb(250,105,47)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1829" width="0.9976%" height="15" fill="rgb(230,72,3)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1813" width="0.9976%" height="15" fill="rgb(232,218,39)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1797" width="0.9976%" height="15" fill="rgb(248,166,6)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1781" width="0.9976%" height="15" fill="rgb(247,89,20)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1765" width="0.9976%" height="15" fill="rgb(248,130,54)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1749" width="0.9976%" height="15" fill="rgb(234,196,4)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1733" width="0.9976%" height="15" fill="rgb(250,143,31)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1717" width="0.9976%" height="15" fill="rgb(211,110,34)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1701" width="0.9976%" height="15" fill="rgb(215,124,48)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1685" width="0.9976%" height="15" fill="rgb(216,46,13)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1669" width="0.9976%" height="15" fill="rgb(205,184,25)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1653" width="0.9976%" height="15" fill="rgb(228,1,10)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1637" width="0.9976%" height="15" fill="rgb(213,116,27)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1621" width="0.9976%" height="15" fill="rgb(241,95,50)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1605" width="0.9976%" height="15" fill="rgb(238,48,32)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1589" width="0.9976%" height="15" fill="rgb(235,113,49)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1573" width="0.9976%" height="15" fill="rgb(205,127,43)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1557" width="0.9976%" height="15" fill="rgb(250,162,2)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1541" width="0.9976%" height="15" fill="rgb(220,13,41)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1525" width="0.9976%" height="15" fill="rgb(249,221,25)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1509" width="0.9976%" height="15" fill="rgb(215,208,19)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1493" width="0.9976%" height="15" fill="rgb(236,175,2)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1477" width="0.9976%" height="15" fill="rgb(241,52,2)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1461" width="0.9976%" height="15" fill="rgb(248,140,14)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1445" width="0.9976%" height="15" fill="rgb(253,22,42)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1429" width="0.9976%" height="15" fill="rgb(234,61,47)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1413" width="0.9976%" height="15" fill="rgb(208,226,15)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1397" width="0.9976%" height="15" fill="rgb(217,221,4)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1381" width="0.9976%" height="15" fill="rgb(212,174,34)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1365" width="0.9976%" height="15" fill="rgb(253,83,4)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1349" width="0.9976%" height="15" fill="rgb(250,195,49)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1333" width="0.9976%" height="15" fill="rgb(241,192,25)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1317" width="0.9976%" height="15" fill="rgb(208,124,10)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1301" width="0.9976%" height="15" fill="rgb(222,33,0)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1285" width="0.9976%" height="15" fill="rgb(234,209,28)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1269" width="0.9976%" height="15" fill="rgb(224,11,23)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1253" width="0.9976%" height="15" fill="rgb(232,99,1)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1237" width="0.9976%" height="15" fill="rgb(237,95,45)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1221" width="0.9976%" height="15" fill="rgb(208,109,11)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1205" width="0.9976%" height="15" fill="rgb(216,190,48)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1189" width="0.9976%" height="15" fill="rgb(251,171,36)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1173" width="0.9976%" height="15" fill="rgb(230,62,22)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1157" width="0.9976%" height="15" fill="rgb(225,114,35)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1141" width="0.9976%" height="15" fill="rgb(215,118,42)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1125" width="0.9976%" height="15" fill="rgb(243,119,21)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1109" width="0.9976%" height="15" fill="rgb(252,177,53)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1093" width="0.9976%" height="15" fill="rgb(237,209,29)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1077" width="0.9976%" height="15" fill="rgb(212,65,23)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1061" width="0.9976%" height="15" fill="rgb(230,222,46)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1045" width="0.9976%" height="15" fill="rgb(215,135,32)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1029" width="0.9976%" height="15" fill="rgb(246,101,22)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="1013" width="0.9976%" height="15" fill="rgb(206,107,13)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="997" width="0.9976%" height="15" fill="rgb(250,100,44)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="981" width="0.9976%" height="15" fill="rgb(231,147,38)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="965" width="0.9976%" height="15" fill="rgb(229,8,40)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="949" width="0.9976%" height="15" fill="rgb(221,135,30)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="933" width="0.9976%" height="15" fill="rgb(249,193,18)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="917" width="0.9976%" height="15" fill="rgb(209,133,39)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="901" width="0.9976%" height="15" fill="rgb(232,100,14)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="885" width="0.9976%" height="15" fill="rgb(224,185,1)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="869" width="0.9976%" height="15" fill="rgb(223,139,8)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="853" width="0.9976%" height="15" fill="rgb(232,213,38)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="837" width="0.9976%" height="15" fill="rgb(207,94,22)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="821" width="0.9976%" height="15" fill="rgb(219,183,54)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="805" width="0.9976%" height="15" fill="rgb(216,185,54)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="789" width="0.9976%" height="15" fill="rgb(254,217,39)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="773" width="0.9976%" height="15" fill="rgb(240,178,23)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="757" width="0.9976%" height="15" fill="rgb(218,11,47)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="741" width="0.9976%" height="15" fill="rgb(218,51,51)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="725" width="0.9976%" height="15" fill="rgb(238,126,27)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="709" width="0.9976%" height="15" fill="rgb(249,202,22)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="693" width="0.9976%" height="15" fill="rgb(254,195,49)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="677" width="0.9976%" height="15" fill="rgb(208,123,14)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="661" width="0.9976%" height="15" fill="rgb(224,200,8)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="645" width="0.9976%" height="15" fill="rgb(217,61,36)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="629" width="0.9976%" height="15" fill="rgb(206,35,45)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="613" width="0.9976%" height="15" fill="rgb(217,65,33)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="597" width="0.9976%" height="15" fill="rgb(222,158,48)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="581" width="0.9976%" height="15" fill="rgb(254,2,54)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="565" width="0.9976%" height="15" fill="rgb(250,143,38)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="549" width="0.9976%" height="15" fill="rgb(248,25,0)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="533" width="0.9976%" height="15" fill="rgb(206,152,27)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="517" width="0.9976%" height="15" fill="rgb(240,77,30)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="501" width="0.9976%" height="15" fill="rgb(231,5,3)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="485" width="0.9976%" height="15" fill="rgb(207,226,32)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="469" width="0.9976%" height="15" fill="rgb(222,207,47)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="453" width="0.9976%" height="15" fill="rgb(229,115,45)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="437" width="0.9976%" height="15" fill="rgb(224,191,6)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="421" width="0.9976%" height="15" fill="rgb(230,227,24)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="405" width="0.9976%" height="15" fill="rgb(228,80,19)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="389" width="0.9976%" height="15" fill="rgb(247,229,0)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="373" width="0.9976%" height="15" fill="rgb(237,194,15)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="357" width="0.9976%" height="15" fill="rgb(219,203,20)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="341" width="0.9976%" height="15" fill="rgb(234,128,8)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="325" width="0.9976%" height="15" fill="rgb(248,202,8)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="309" width="0.9976%" height="15" fill="rgb(206,104,37)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="293" width="0.9976%" height="15" fill="rgb(223,8,27)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="277" width="0.9976%" height="15" fill="rgb(216,217,28)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="261" width="0.9976%" height="15" fill="rgb(249,199,1)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="245" width="0.9976%" height="15" fill="rgb(240,85,17)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="229" width="0.9976%" height="15" fill="rgb(206,108,45)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="213" width="0.9976%" height="15" fill="rgb(245,210,41)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,357,182,578 samples, 1.00%)</title><rect x="5.5781%" y="197" width="0.9976%" height="15" fill="rgb(206,13,37)" fg:x="7588929349" fg:w="1357182578"/><text x="5.8281%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,356,451,523 samples, 1.00%)</title><rect x="5.5786%" y="181" width="0.9970%" height="15" fill="rgb(250,61,18)" fg:x="7589660404" fg:w="1356451523"/><text x="5.8286%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,355,682,753 samples, 1.00%)</title><rect x="5.5792%" y="165" width="0.9965%" height="15" fill="rgb(235,172,48)" fg:x="7590429174" fg:w="1355682753"/><text x="5.8292%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,355,682,753 samples, 1.00%)</title><rect x="5.5792%" y="149" width="0.9965%" height="15" fill="rgb(249,201,17)" fg:x="7590429174" fg:w="1355682753"/><text x="5.8292%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,355,682,753 samples, 1.00%)</title><rect x="5.5792%" y="133" width="0.9965%" height="15" fill="rgb(219,208,6)" fg:x="7590429174" fg:w="1355682753"/><text x="5.8292%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,355,682,753 samples, 1.00%)</title><rect x="5.5792%" y="117" width="0.9965%" height="15" fill="rgb(248,31,23)" fg:x="7590429174" fg:w="1355682753"/><text x="5.8292%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,355,682,753 samples, 1.00%)</title><rect x="5.5792%" y="101" width="0.9965%" height="15" fill="rgb(245,15,42)" fg:x="7590429174" fg:w="1355682753"/><text x="5.8292%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (1,355,682,753 samples, 1.00%)</title><rect x="5.5792%" y="85" width="0.9965%" height="15" fill="rgb(222,217,39)" fg:x="7590429174" fg:w="1355682753"/><text x="5.8292%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,355,682,753 samples, 1.00%)</title><rect x="5.5792%" y="69" width="0.9965%" height="15" fill="rgb(210,219,27)" fg:x="7590429174" fg:w="1355682753"/><text x="5.8292%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (1,003,549,438 samples, 0.74%)</title><rect x="5.8380%" y="53" width="0.7376%" height="15" fill="rgb(252,166,36)" fg:x="7942562489" fg:w="1003549438"/><text x="6.0880%" y="63.50"></text></g><g><title>std::vector&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt; &gt;::vector (234,045,254 samples, 0.17%)</title><rect x="6.4036%" y="37" width="0.1720%" height="15" fill="rgb(245,132,34)" fg:x="8712066673" fg:w="234045254"/><text x="6.6536%" y="47.50"></text></g><g><title>std::_Function_handler&lt;bool (char), std::__detail::_CharMatcher&lt;std::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_invoke (25,143,680 samples, 0.02%)</title><rect x="6.5762%" y="37" width="0.0185%" height="15" fill="rgb(236,54,3)" fg:x="8946904718" fg:w="25143680"/><text x="6.8262%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (177,697,893 samples, 0.13%)</title><rect x="6.5947%" y="37" width="0.1306%" height="15" fill="rgb(241,173,43)" fg:x="8972048398" fg:w="177697893"/><text x="6.8447%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (439,092,591 samples, 0.32%)</title><rect x="6.5762%" y="69" width="0.3227%" height="15" fill="rgb(215,190,9)" fg:x="8946904718" fg:w="439092591"/><text x="6.8262%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (439,092,591 samples, 0.32%)</title><rect x="6.5762%" y="53" width="0.3227%" height="15" fill="rgb(242,101,16)" fg:x="8946904718" fg:w="439092591"/><text x="6.8262%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (236,251,018 samples, 0.17%)</title><rect x="6.7253%" y="37" width="0.1737%" height="15" fill="rgb(223,190,21)" fg:x="9149746291" fg:w="236251018"/><text x="6.9753%" y="47.50"></text></g><g><title>std::_Function_handler&lt;bool (char), std::__detail::_CharMatcher&lt;std::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_invoke (22,066,675 samples, 0.02%)</title><rect x="6.8990%" y="37" width="0.0162%" height="15" fill="rgb(215,228,25)" fg:x="9385997309" fg:w="22066675"/><text x="7.1490%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,053,308 samples, 0.72%)</title><rect x="6.5756%" y="261" width="0.7167%" height="15" fill="rgb(225,36,22)" fg:x="8946111927" fg:w="975053308"/><text x="6.8256%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,053,308 samples, 0.72%)</title><rect x="6.5756%" y="245" width="0.7167%" height="15" fill="rgb(251,106,46)" fg:x="8946111927" fg:w="975053308"/><text x="6.8256%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="229" width="0.7161%" height="15" fill="rgb(208,90,1)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="213" width="0.7161%" height="15" fill="rgb(243,10,4)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="197" width="0.7161%" height="15" fill="rgb(212,137,27)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="181" width="0.7161%" height="15" fill="rgb(231,220,49)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="165" width="0.7161%" height="15" fill="rgb(237,96,20)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="149" width="0.7161%" height="15" fill="rgb(239,229,30)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="133" width="0.7161%" height="15" fill="rgb(219,65,33)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="117" width="0.7161%" height="15" fill="rgb(243,134,7)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="101" width="0.7161%" height="15" fill="rgb(216,177,54)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (974,260,517 samples, 0.72%)</title><rect x="6.5762%" y="85" width="0.7161%" height="15" fill="rgb(211,160,20)" fg:x="8946904718" fg:w="974260517"/><text x="6.8262%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (535,167,926 samples, 0.39%)</title><rect x="6.8990%" y="69" width="0.3934%" height="15" fill="rgb(239,85,39)" fg:x="9385997309" fg:w="535167926"/><text x="7.1490%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (535,167,926 samples, 0.39%)</title><rect x="6.8990%" y="53" width="0.3934%" height="15" fill="rgb(232,125,22)" fg:x="9385997309" fg:w="535167926"/><text x="7.1490%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (513,101,251 samples, 0.38%)</title><rect x="6.9152%" y="37" width="0.3771%" height="15" fill="rgb(244,57,34)" fg:x="9408063984" fg:w="513101251"/><text x="7.1652%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (2,377,298,245 samples, 1.75%)</title><rect x="5.5455%" y="2037" width="1.7474%" height="15" fill="rgb(214,203,32)" fg:x="7544643748" fg:w="2377298245"/><text x="5.7955%" y="2047.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="2021" width="0.7173%" height="15" fill="rgb(207,58,43)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="2031.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="2005" width="0.7173%" height="15" fill="rgb(215,193,15)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1989" width="0.7173%" height="15" fill="rgb(232,15,44)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1973" width="0.7173%" height="15" fill="rgb(212,3,48)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1957" width="0.7173%" height="15" fill="rgb(218,128,7)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1941" width="0.7173%" height="15" fill="rgb(226,216,39)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1925" width="0.7173%" height="15" fill="rgb(243,47,51)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1909" width="0.7173%" height="15" fill="rgb(241,183,40)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1893" width="0.7173%" height="15" fill="rgb(231,217,32)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1877" width="0.7173%" height="15" fill="rgb(229,61,38)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1861" width="0.7173%" height="15" fill="rgb(225,210,5)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1845" width="0.7173%" height="15" fill="rgb(231,79,45)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1829" width="0.7173%" height="15" fill="rgb(224,100,7)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1813" width="0.7173%" height="15" fill="rgb(241,198,18)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1797" width="0.7173%" height="15" fill="rgb(252,97,53)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1781" width="0.7173%" height="15" fill="rgb(220,88,7)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1765" width="0.7173%" height="15" fill="rgb(213,176,14)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1749" width="0.7173%" height="15" fill="rgb(246,73,7)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1733" width="0.7173%" height="15" fill="rgb(245,64,36)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1717" width="0.7173%" height="15" fill="rgb(245,80,10)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1701" width="0.7173%" height="15" fill="rgb(232,107,50)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1685" width="0.7173%" height="15" fill="rgb(253,3,0)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1669" width="0.7173%" height="15" fill="rgb(212,99,53)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1653" width="0.7173%" height="15" fill="rgb(249,111,54)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1637" width="0.7173%" height="15" fill="rgb(249,55,30)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1621" width="0.7173%" height="15" fill="rgb(237,47,42)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1605" width="0.7173%" height="15" fill="rgb(211,20,18)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1589" width="0.7173%" height="15" fill="rgb(231,203,46)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1573" width="0.7173%" height="15" fill="rgb(237,142,3)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1557" width="0.7173%" height="15" fill="rgb(241,107,1)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1541" width="0.7173%" height="15" fill="rgb(229,83,13)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1525" width="0.7173%" height="15" fill="rgb(241,91,40)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1509" width="0.7173%" height="15" fill="rgb(225,3,45)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1493" width="0.7173%" height="15" fill="rgb(244,223,14)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1477" width="0.7173%" height="15" fill="rgb(224,124,37)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1461" width="0.7173%" height="15" fill="rgb(251,171,30)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1445" width="0.7173%" height="15" fill="rgb(236,46,54)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1429" width="0.7173%" height="15" fill="rgb(245,213,5)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1413" width="0.7173%" height="15" fill="rgb(230,144,27)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1397" width="0.7173%" height="15" fill="rgb(220,86,6)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1381" width="0.7173%" height="15" fill="rgb(240,20,13)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1365" width="0.7173%" height="15" fill="rgb(217,89,34)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1349" width="0.7173%" height="15" fill="rgb(229,13,5)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1333" width="0.7173%" height="15" fill="rgb(244,67,35)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1317" width="0.7173%" height="15" fill="rgb(221,40,2)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1301" width="0.7173%" height="15" fill="rgb(237,157,21)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1285" width="0.7173%" height="15" fill="rgb(222,94,11)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1269" width="0.7173%" height="15" fill="rgb(249,113,6)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1253" width="0.7173%" height="15" fill="rgb(238,137,36)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1237" width="0.7173%" height="15" fill="rgb(210,102,26)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1221" width="0.7173%" height="15" fill="rgb(218,30,30)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1205" width="0.7173%" height="15" fill="rgb(214,67,26)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1189" width="0.7173%" height="15" fill="rgb(251,9,53)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1173" width="0.7173%" height="15" fill="rgb(228,204,25)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1157" width="0.7173%" height="15" fill="rgb(207,153,8)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1141" width="0.7173%" height="15" fill="rgb(242,9,16)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1125" width="0.7173%" height="15" fill="rgb(217,211,10)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1109" width="0.7173%" height="15" fill="rgb(219,228,52)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1093" width="0.7173%" height="15" fill="rgb(231,92,29)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1077" width="0.7173%" height="15" fill="rgb(232,8,23)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1061" width="0.7173%" height="15" fill="rgb(216,211,34)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1045" width="0.7173%" height="15" fill="rgb(236,151,0)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1029" width="0.7173%" height="15" fill="rgb(209,168,3)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="1013" width="0.7173%" height="15" fill="rgb(208,129,28)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="997" width="0.7173%" height="15" fill="rgb(229,78,22)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="981" width="0.7173%" height="15" fill="rgb(228,187,13)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="965" width="0.7173%" height="15" fill="rgb(240,119,24)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="949" width="0.7173%" height="15" fill="rgb(209,194,42)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="933" width="0.7173%" height="15" fill="rgb(247,200,46)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="917" width="0.7173%" height="15" fill="rgb(218,76,16)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="901" width="0.7173%" height="15" fill="rgb(225,21,48)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="885" width="0.7173%" height="15" fill="rgb(239,223,50)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="869" width="0.7173%" height="15" fill="rgb(244,45,21)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="853" width="0.7173%" height="15" fill="rgb(232,33,43)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="837" width="0.7173%" height="15" fill="rgb(209,8,3)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="821" width="0.7173%" height="15" fill="rgb(214,25,53)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="805" width="0.7173%" height="15" fill="rgb(254,186,54)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="789" width="0.7173%" height="15" fill="rgb(208,174,49)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="773" width="0.7173%" height="15" fill="rgb(233,191,51)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="757" width="0.7173%" height="15" fill="rgb(222,134,10)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="741" width="0.7173%" height="15" fill="rgb(230,226,20)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="725" width="0.7173%" height="15" fill="rgb(251,111,25)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="709" width="0.7173%" height="15" fill="rgb(224,40,46)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="693" width="0.7173%" height="15" fill="rgb(236,108,47)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="677" width="0.7173%" height="15" fill="rgb(234,93,0)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="661" width="0.7173%" height="15" fill="rgb(224,213,32)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="645" width="0.7173%" height="15" fill="rgb(251,11,48)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="629" width="0.7173%" height="15" fill="rgb(236,173,5)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="613" width="0.7173%" height="15" fill="rgb(230,95,12)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="597" width="0.7173%" height="15" fill="rgb(232,209,1)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="581" width="0.7173%" height="15" fill="rgb(232,6,1)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="565" width="0.7173%" height="15" fill="rgb(210,224,50)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="549" width="0.7173%" height="15" fill="rgb(228,127,35)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="533" width="0.7173%" height="15" fill="rgb(245,102,45)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="517" width="0.7173%" height="15" fill="rgb(214,1,49)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="501" width="0.7173%" height="15" fill="rgb(226,163,40)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="485" width="0.7173%" height="15" fill="rgb(239,212,28)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="469" width="0.7173%" height="15" fill="rgb(220,20,13)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="453" width="0.7173%" height="15" fill="rgb(210,164,35)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="437" width="0.7173%" height="15" fill="rgb(248,109,41)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="421" width="0.7173%" height="15" fill="rgb(238,23,50)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="405" width="0.7173%" height="15" fill="rgb(211,48,49)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="389" width="0.7173%" height="15" fill="rgb(223,36,21)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="373" width="0.7173%" height="15" fill="rgb(207,123,46)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="357" width="0.7173%" height="15" fill="rgb(240,218,32)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="341" width="0.7173%" height="15" fill="rgb(252,5,43)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="325" width="0.7173%" height="15" fill="rgb(252,84,19)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="309" width="0.7173%" height="15" fill="rgb(243,152,39)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="293" width="0.7173%" height="15" fill="rgb(234,160,15)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (975,830,066 samples, 0.72%)</title><rect x="6.5756%" y="277" width="0.7173%" height="15" fill="rgb(237,34,20)" fg:x="8946111927" fg:w="975830066"/><text x="6.8256%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (441,984,748 samples, 0.32%)</title><rect x="7.2946%" y="37" width="0.3249%" height="15" fill="rgb(229,97,13)" fg:x="9924207016" fg:w="441984748"/><text x="7.5446%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (445,740,358 samples, 0.33%)</title><rect x="7.2929%" y="85" width="0.3276%" height="15" fill="rgb(234,71,50)" fg:x="9921941993" fg:w="445740358"/><text x="7.5429%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (445,740,358 samples, 0.33%)</title><rect x="7.2929%" y="69" width="0.3276%" height="15" fill="rgb(253,155,4)" fg:x="9921941993" fg:w="445740358"/><text x="7.5429%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (443,475,335 samples, 0.33%)</title><rect x="7.2946%" y="53" width="0.3260%" height="15" fill="rgb(222,185,37)" fg:x="9924207016" fg:w="443475335"/><text x="7.5446%" y="63.50"></text></g><g><title>std::_Function_handler&lt;bool (char), std::__detail::_CharMatcher&lt;std::regex_traits&lt;char&gt;, false, false&gt; &gt;::_M_invoke (39,690,250 samples, 0.03%)</title><rect x="7.6205%" y="37" width="0.0292%" height="15" fill="rgb(251,177,13)" fg:x="10367682351" fg:w="39690250"/><text x="7.8705%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (663,339,292 samples, 0.49%)</title><rect x="7.2929%" y="149" width="0.4876%" height="15" fill="rgb(250,179,40)" fg:x="9921941993" fg:w="663339292"/><text x="7.5429%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (663,339,292 samples, 0.49%)</title><rect x="7.2929%" y="133" width="0.4876%" height="15" fill="rgb(242,44,2)" fg:x="9921941993" fg:w="663339292"/><text x="7.5429%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (663,339,292 samples, 0.49%)</title><rect x="7.2929%" y="117" width="0.4876%" height="15" fill="rgb(216,177,13)" fg:x="9921941993" fg:w="663339292"/><text x="7.5429%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (663,339,292 samples, 0.49%)</title><rect x="7.2929%" y="101" width="0.4876%" height="15" fill="rgb(216,106,43)" fg:x="9921941993" fg:w="663339292"/><text x="7.5429%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (217,598,934 samples, 0.16%)</title><rect x="7.6205%" y="85" width="0.1599%" height="15" fill="rgb(216,183,2)" fg:x="10367682351" fg:w="217598934"/><text x="7.8705%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (217,598,934 samples, 0.16%)</title><rect x="7.6205%" y="69" width="0.1599%" height="15" fill="rgb(249,75,3)" fg:x="10367682351" fg:w="217598934"/><text x="7.8705%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (217,598,934 samples, 0.16%)</title><rect x="7.6205%" y="53" width="0.1599%" height="15" fill="rgb(219,67,39)" fg:x="10367682351" fg:w="217598934"/><text x="7.8705%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (177,908,684 samples, 0.13%)</title><rect x="7.6497%" y="37" width="0.1308%" height="15" fill="rgb(253,228,2)" fg:x="10407372601" fg:w="177908684"/><text x="7.8997%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,125,313 samples, 0.49%)</title><rect x="7.2929%" y="213" width="0.4882%" height="15" fill="rgb(235,138,27)" fg:x="9921941993" fg:w="664125313"/><text x="7.5429%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,125,313 samples, 0.49%)</title><rect x="7.2929%" y="197" width="0.4882%" height="15" fill="rgb(236,97,51)" fg:x="9921941993" fg:w="664125313"/><text x="7.5429%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,125,313 samples, 0.49%)</title><rect x="7.2929%" y="181" width="0.4882%" height="15" fill="rgb(240,80,30)" fg:x="9921941993" fg:w="664125313"/><text x="7.5429%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,125,313 samples, 0.49%)</title><rect x="7.2929%" y="165" width="0.4882%" height="15" fill="rgb(230,178,19)" fg:x="9921941993" fg:w="664125313"/><text x="7.5429%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (3,042,205,888 samples, 2.24%)</title><rect x="5.5455%" y="2053" width="2.2361%" height="15" fill="rgb(210,190,27)" fg:x="7544643748" fg:w="3042205888"/><text x="5.7955%" y="2063.50">s..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="2037" width="0.4887%" height="15" fill="rgb(222,107,31)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="2047.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="2021" width="0.4887%" height="15" fill="rgb(216,127,34)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="2031.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="2005" width="0.4887%" height="15" fill="rgb(234,116,52)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="2015.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1989" width="0.4887%" height="15" fill="rgb(222,124,15)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1999.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1973" width="0.4887%" height="15" fill="rgb(231,179,28)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1983.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1957" width="0.4887%" height="15" fill="rgb(226,93,45)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1967.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1941" width="0.4887%" height="15" fill="rgb(215,8,51)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1925" width="0.4887%" height="15" fill="rgb(223,106,5)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1909" width="0.4887%" height="15" fill="rgb(250,191,5)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1893" width="0.4887%" height="15" fill="rgb(242,132,44)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1877" width="0.4887%" height="15" fill="rgb(251,152,29)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1861" width="0.4887%" height="15" fill="rgb(218,179,5)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1845" width="0.4887%" height="15" fill="rgb(227,67,19)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1829" width="0.4887%" height="15" fill="rgb(233,119,31)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1813" width="0.4887%" height="15" fill="rgb(241,120,22)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1797" width="0.4887%" height="15" fill="rgb(224,102,30)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1781" width="0.4887%" height="15" fill="rgb(210,164,37)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1765" width="0.4887%" height="15" fill="rgb(226,191,16)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1749" width="0.4887%" height="15" fill="rgb(214,40,45)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1733" width="0.4887%" height="15" fill="rgb(244,29,26)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1717" width="0.4887%" height="15" fill="rgb(216,16,5)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1701" width="0.4887%" height="15" fill="rgb(249,76,35)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1685" width="0.4887%" height="15" fill="rgb(207,11,44)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1669" width="0.4887%" height="15" fill="rgb(228,190,49)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1653" width="0.4887%" height="15" fill="rgb(214,173,12)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1637" width="0.4887%" height="15" fill="rgb(218,26,35)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1621" width="0.4887%" height="15" fill="rgb(220,200,19)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1605" width="0.4887%" height="15" fill="rgb(239,95,49)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1589" width="0.4887%" height="15" fill="rgb(235,85,53)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1573" width="0.4887%" height="15" fill="rgb(233,133,31)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1557" width="0.4887%" height="15" fill="rgb(218,25,20)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1541" width="0.4887%" height="15" fill="rgb(252,210,38)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1525" width="0.4887%" height="15" fill="rgb(242,134,21)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1509" width="0.4887%" height="15" fill="rgb(213,28,48)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1493" width="0.4887%" height="15" fill="rgb(250,196,2)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1477" width="0.4887%" height="15" fill="rgb(227,5,17)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1461" width="0.4887%" height="15" fill="rgb(221,226,24)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1445" width="0.4887%" height="15" fill="rgb(211,5,48)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1429" width="0.4887%" height="15" fill="rgb(219,150,6)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1413" width="0.4887%" height="15" fill="rgb(251,46,16)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1397" width="0.4887%" height="15" fill="rgb(220,204,40)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1381" width="0.4887%" height="15" fill="rgb(211,85,2)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1365" width="0.4887%" height="15" fill="rgb(229,17,7)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1349" width="0.4887%" height="15" fill="rgb(239,72,28)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1333" width="0.4887%" height="15" fill="rgb(230,47,54)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1317" width="0.4887%" height="15" fill="rgb(214,50,8)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1301" width="0.4887%" height="15" fill="rgb(216,198,43)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1285" width="0.4887%" height="15" fill="rgb(234,20,35)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1269" width="0.4887%" height="15" fill="rgb(254,45,19)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1253" width="0.4887%" height="15" fill="rgb(219,14,44)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1237" width="0.4887%" height="15" fill="rgb(217,220,26)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1221" width="0.4887%" height="15" fill="rgb(213,158,28)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1205" width="0.4887%" height="15" fill="rgb(252,51,52)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1189" width="0.4887%" height="15" fill="rgb(246,89,16)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1173" width="0.4887%" height="15" fill="rgb(216,158,49)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1157" width="0.4887%" height="15" fill="rgb(236,107,19)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1141" width="0.4887%" height="15" fill="rgb(228,185,30)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1125" width="0.4887%" height="15" fill="rgb(246,134,8)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1109" width="0.4887%" height="15" fill="rgb(214,143,50)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1093" width="0.4887%" height="15" fill="rgb(228,75,8)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1077" width="0.4887%" height="15" fill="rgb(207,175,4)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1061" width="0.4887%" height="15" fill="rgb(205,108,24)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1045" width="0.4887%" height="15" fill="rgb(244,120,49)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1029" width="0.4887%" height="15" fill="rgb(223,47,38)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="1013" width="0.4887%" height="15" fill="rgb(229,179,11)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="997" width="0.4887%" height="15" fill="rgb(231,122,1)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="981" width="0.4887%" height="15" fill="rgb(245,119,9)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="965" width="0.4887%" height="15" fill="rgb(241,163,25)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="949" width="0.4887%" height="15" fill="rgb(217,214,3)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="933" width="0.4887%" height="15" fill="rgb(240,86,28)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="917" width="0.4887%" height="15" fill="rgb(215,47,9)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="901" width="0.4887%" height="15" fill="rgb(252,25,45)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="885" width="0.4887%" height="15" fill="rgb(251,164,9)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="869" width="0.4887%" height="15" fill="rgb(233,194,0)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="853" width="0.4887%" height="15" fill="rgb(249,111,24)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="837" width="0.4887%" height="15" fill="rgb(250,223,3)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="821" width="0.4887%" height="15" fill="rgb(236,178,37)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="805" width="0.4887%" height="15" fill="rgb(241,158,50)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="789" width="0.4887%" height="15" fill="rgb(213,121,41)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="773" width="0.4887%" height="15" fill="rgb(240,92,3)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="757" width="0.4887%" height="15" fill="rgb(205,123,3)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="741" width="0.4887%" height="15" fill="rgb(205,97,47)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="725" width="0.4887%" height="15" fill="rgb(247,152,14)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="709" width="0.4887%" height="15" fill="rgb(248,195,53)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="693" width="0.4887%" height="15" fill="rgb(226,201,16)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="677" width="0.4887%" height="15" fill="rgb(205,98,0)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="661" width="0.4887%" height="15" fill="rgb(214,191,48)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="645" width="0.4887%" height="15" fill="rgb(237,112,39)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="629" width="0.4887%" height="15" fill="rgb(247,203,27)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="613" width="0.4887%" height="15" fill="rgb(235,124,28)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="597" width="0.4887%" height="15" fill="rgb(208,207,46)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="581" width="0.4887%" height="15" fill="rgb(234,176,4)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="565" width="0.4887%" height="15" fill="rgb(230,133,28)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="549" width="0.4887%" height="15" fill="rgb(211,137,40)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="533" width="0.4887%" height="15" fill="rgb(254,35,13)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="517" width="0.4887%" height="15" fill="rgb(225,49,51)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="501" width="0.4887%" height="15" fill="rgb(251,10,15)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="485" width="0.4887%" height="15" fill="rgb(228,207,15)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="469" width="0.4887%" height="15" fill="rgb(241,99,19)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="453" width="0.4887%" height="15" fill="rgb(207,104,49)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="437" width="0.4887%" height="15" fill="rgb(234,99,18)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="421" width="0.4887%" height="15" fill="rgb(213,191,49)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="405" width="0.4887%" height="15" fill="rgb(210,226,19)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="389" width="0.4887%" height="15" fill="rgb(229,97,18)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="373" width="0.4887%" height="15" fill="rgb(211,167,15)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="357" width="0.4887%" height="15" fill="rgb(210,169,34)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="341" width="0.4887%" height="15" fill="rgb(241,121,31)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="325" width="0.4887%" height="15" fill="rgb(232,40,11)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="309" width="0.4887%" height="15" fill="rgb(205,86,26)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="293" width="0.4887%" height="15" fill="rgb(231,126,28)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="277" width="0.4887%" height="15" fill="rgb(219,221,18)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="261" width="0.4887%" height="15" fill="rgb(211,40,0)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="245" width="0.4887%" height="15" fill="rgb(239,85,43)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (664,907,643 samples, 0.49%)</title><rect x="7.2929%" y="229" width="0.4887%" height="15" fill="rgb(231,55,21)" fg:x="9921941993" fg:w="664907643"/><text x="7.5429%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (83,675,681 samples, 0.06%)</title><rect x="7.7822%" y="37" width="0.0615%" height="15" fill="rgb(225,184,43)" fg:x="10587603522" fg:w="83675681"/><text x="8.0322%" y="47.50"></text></g><g><title>operator delete (28,944,974 samples, 0.02%)</title><rect x="7.8548%" y="37" width="0.0213%" height="15" fill="rgb(251,158,41)" fg:x="10686350183" fg:w="28944974"/><text x="8.1048%" y="47.50"></text></g><g><title>operator new (28,597,407 samples, 0.02%)</title><rect x="7.8760%" y="37" width="0.0210%" height="15" fill="rgb(234,159,37)" fg:x="10715295157" fg:w="28597407"/><text x="8.1260%" y="47.50"></text></g><g><title>std::_Function_handler&lt;bool (char), std::__detail::_AnyMatcher&lt;std::regex_traits&lt;char&gt;, true, false, false&gt; &gt;::_M_invoke (26,044,622 samples, 0.02%)</title><rect x="7.8971%" y="37" width="0.0191%" height="15" fill="rgb(216,204,22)" fg:x="10743892564" fg:w="26044622"/><text x="8.1471%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (391,470,041 samples, 0.29%)</title><rect x="7.9162%" y="37" width="0.2877%" height="15" fill="rgb(214,17,3)" fg:x="10769937186" fg:w="391470041"/><text x="8.1662%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (4,177,103,969 samples, 3.07%)</title><rect x="8.2039%" y="37" width="3.0703%" height="15" fill="rgb(212,111,17)" fg:x="11161407227" fg:w="4177103969"/><text x="8.4539%" y="47.50">std..</text></g><g><title>std::vector&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt; &gt;::operator= (43,682,577 samples, 0.03%)</title><rect x="11.2742%" y="37" width="0.0321%" height="15" fill="rgb(221,157,24)" fg:x="15338511196" fg:w="43682577"/><text x="11.5242%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,809,363,504 samples, 3.54%)</title><rect x="7.7822%" y="165" width="3.5350%" height="15" fill="rgb(252,16,13)" fg:x="10587603522" fg:w="4809363504"/><text x="8.0322%" y="175.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,809,363,504 samples, 3.54%)</title><rect x="7.7822%" y="149" width="3.5350%" height="15" fill="rgb(221,62,2)" fg:x="10587603522" fg:w="4809363504"/><text x="8.0322%" y="159.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,809,363,504 samples, 3.54%)</title><rect x="7.7822%" y="133" width="3.5350%" height="15" fill="rgb(247,87,22)" fg:x="10587603522" fg:w="4809363504"/><text x="8.0322%" y="143.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,809,363,504 samples, 3.54%)</title><rect x="7.7822%" y="117" width="3.5350%" height="15" fill="rgb(215,73,9)" fg:x="10587603522" fg:w="4809363504"/><text x="8.0322%" y="127.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,809,363,504 samples, 3.54%)</title><rect x="7.7822%" y="101" width="3.5350%" height="15" fill="rgb(207,175,33)" fg:x="10587603522" fg:w="4809363504"/><text x="8.0322%" y="111.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,809,363,504 samples, 3.54%)</title><rect x="7.7822%" y="85" width="3.5350%" height="15" fill="rgb(243,129,54)" fg:x="10587603522" fg:w="4809363504"/><text x="8.0322%" y="95.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,809,363,504 samples, 3.54%)</title><rect x="7.7822%" y="69" width="3.5350%" height="15" fill="rgb(227,119,45)" fg:x="10587603522" fg:w="4809363504"/><text x="8.0322%" y="79.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,809,363,504 samples, 3.54%)</title><rect x="7.7822%" y="53" width="3.5350%" height="15" fill="rgb(205,109,36)" fg:x="10587603522" fg:w="4809363504"/><text x="8.0322%" y="63.50">std..</text></g><g><title>std::vector&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt; &gt;::vector (14,773,253 samples, 0.01%)</title><rect x="11.3063%" y="37" width="0.0109%" height="15" fill="rgb(205,6,39)" fg:x="15382193773" fg:w="14773253"/><text x="11.5563%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,810,802,897 samples, 3.54%)</title><rect x="7.7816%" y="229" width="3.5361%" height="15" fill="rgb(221,32,16)" fg:x="10586849636" fg:w="4810802897"/><text x="8.0316%" y="239.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,810,802,897 samples, 3.54%)</title><rect x="7.7816%" y="213" width="3.5361%" height="15" fill="rgb(228,144,50)" fg:x="10586849636" fg:w="4810802897"/><text x="8.0316%" y="223.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,810,802,897 samples, 3.54%)</title><rect x="7.7816%" y="197" width="3.5361%" height="15" fill="rgb(229,201,53)" fg:x="10586849636" fg:w="4810802897"/><text x="8.0316%" y="207.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,810,802,897 samples, 3.54%)</title><rect x="7.7816%" y="181" width="3.5361%" height="15" fill="rgb(249,153,27)" fg:x="10586849636" fg:w="4810802897"/><text x="8.0316%" y="191.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="2053" width="3.5366%" height="15" fill="rgb(227,106,25)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="2063.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="2037" width="3.5366%" height="15" fill="rgb(230,65,29)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="2047.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="2021" width="3.5366%" height="15" fill="rgb(221,57,46)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="2031.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="2005" width="3.5366%" height="15" fill="rgb(229,161,17)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="2015.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1989" width="3.5366%" height="15" fill="rgb(222,213,11)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1999.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1973" width="3.5366%" height="15" fill="rgb(235,35,13)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1983.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1957" width="3.5366%" height="15" fill="rgb(233,158,34)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1967.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1941" width="3.5366%" height="15" fill="rgb(215,151,48)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1951.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1925" width="3.5366%" height="15" fill="rgb(229,84,14)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1935.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1909" width="3.5366%" height="15" fill="rgb(229,68,14)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1919.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1893" width="3.5366%" height="15" fill="rgb(243,106,26)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1903.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1877" width="3.5366%" height="15" fill="rgb(206,45,38)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1887.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1861" width="3.5366%" height="15" fill="rgb(226,6,15)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1871.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1845" width="3.5366%" height="15" fill="rgb(232,22,54)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1855.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1829" width="3.5366%" height="15" fill="rgb(229,222,32)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1839.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1813" width="3.5366%" height="15" fill="rgb(228,62,29)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1823.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1797" width="3.5366%" height="15" fill="rgb(251,103,34)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1807.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1781" width="3.5366%" height="15" fill="rgb(233,12,30)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1791.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1765" width="3.5366%" height="15" fill="rgb(238,52,0)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1775.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1749" width="3.5366%" height="15" fill="rgb(223,98,5)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1759.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1733" width="3.5366%" height="15" fill="rgb(228,75,37)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1743.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1717" width="3.5366%" height="15" fill="rgb(205,115,49)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1727.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1701" width="3.5366%" height="15" fill="rgb(250,154,43)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1711.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1685" width="3.5366%" height="15" fill="rgb(226,43,29)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1695.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1669" width="3.5366%" height="15" fill="rgb(249,228,39)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1679.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1653" width="3.5366%" height="15" fill="rgb(216,79,43)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1663.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1637" width="3.5366%" height="15" fill="rgb(228,95,12)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1647.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1621" width="3.5366%" height="15" fill="rgb(249,221,15)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1631.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1605" width="3.5366%" height="15" fill="rgb(233,34,13)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1615.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1589" width="3.5366%" height="15" fill="rgb(214,103,39)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1599.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1573" width="3.5366%" height="15" fill="rgb(251,126,39)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1583.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1557" width="3.5366%" height="15" fill="rgb(214,216,36)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1567.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1541" width="3.5366%" height="15" fill="rgb(220,221,8)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1551.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1525" width="3.5366%" height="15" fill="rgb(240,216,3)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1535.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1509" width="3.5366%" height="15" fill="rgb(232,218,17)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1519.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1493" width="3.5366%" height="15" fill="rgb(229,163,45)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1503.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1477" width="3.5366%" height="15" fill="rgb(231,110,42)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1487.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1461" width="3.5366%" height="15" fill="rgb(208,170,48)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1471.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1445" width="3.5366%" height="15" fill="rgb(239,116,25)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1455.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1429" width="3.5366%" height="15" fill="rgb(219,200,50)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1439.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1413" width="3.5366%" height="15" fill="rgb(245,200,0)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1423.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1397" width="3.5366%" height="15" fill="rgb(245,119,33)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1407.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1381" width="3.5366%" height="15" fill="rgb(231,125,12)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1391.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1365" width="3.5366%" height="15" fill="rgb(216,96,41)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1375.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1349" width="3.5366%" height="15" fill="rgb(248,43,45)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1359.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1333" width="3.5366%" height="15" fill="rgb(217,222,7)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1343.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1317" width="3.5366%" height="15" fill="rgb(233,28,6)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1327.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1301" width="3.5366%" height="15" fill="rgb(231,218,15)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1311.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1285" width="3.5366%" height="15" fill="rgb(226,171,48)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1295.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1269" width="3.5366%" height="15" fill="rgb(235,201,9)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1279.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1253" width="3.5366%" height="15" fill="rgb(217,80,15)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1263.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1237" width="3.5366%" height="15" fill="rgb(219,152,8)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1247.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1221" width="3.5366%" height="15" fill="rgb(243,107,38)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1231.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1205" width="3.5366%" height="15" fill="rgb(231,17,5)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1215.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1189" width="3.5366%" height="15" fill="rgb(209,25,54)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1199.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1173" width="3.5366%" height="15" fill="rgb(219,0,2)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1183.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1157" width="3.5366%" height="15" fill="rgb(246,9,5)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1167.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1141" width="3.5366%" height="15" fill="rgb(226,159,4)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1151.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1125" width="3.5366%" height="15" fill="rgb(219,175,34)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1135.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1109" width="3.5366%" height="15" fill="rgb(236,10,46)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1119.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1093" width="3.5366%" height="15" fill="rgb(240,211,16)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1103.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1077" width="3.5366%" height="15" fill="rgb(205,3,43)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1087.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1061" width="3.5366%" height="15" fill="rgb(245,7,22)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1071.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1045" width="3.5366%" height="15" fill="rgb(239,132,32)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1055.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1029" width="3.5366%" height="15" fill="rgb(228,202,34)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1039.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="1013" width="3.5366%" height="15" fill="rgb(254,200,22)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1023.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="997" width="3.5366%" height="15" fill="rgb(219,10,39)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="1007.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="981" width="3.5366%" height="15" fill="rgb(226,210,39)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="991.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="965" width="3.5366%" height="15" fill="rgb(208,219,16)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="975.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="949" width="3.5366%" height="15" fill="rgb(216,158,51)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="959.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="933" width="3.5366%" height="15" fill="rgb(233,14,44)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="943.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="917" width="3.5366%" height="15" fill="rgb(237,97,39)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="927.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="901" width="3.5366%" height="15" fill="rgb(218,198,43)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="911.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="885" width="3.5366%" height="15" fill="rgb(231,104,20)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="895.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="869" width="3.5366%" height="15" fill="rgb(254,36,13)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="879.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="853" width="3.5366%" height="15" fill="rgb(248,14,50)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="863.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="837" width="3.5366%" height="15" fill="rgb(217,107,29)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="847.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="821" width="3.5366%" height="15" fill="rgb(251,169,33)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="831.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="805" width="3.5366%" height="15" fill="rgb(217,108,32)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="815.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="789" width="3.5366%" height="15" fill="rgb(219,66,42)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="799.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="773" width="3.5366%" height="15" fill="rgb(206,180,7)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="783.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="757" width="3.5366%" height="15" fill="rgb(208,226,31)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="767.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="741" width="3.5366%" height="15" fill="rgb(218,26,49)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="751.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="725" width="3.5366%" height="15" fill="rgb(233,197,48)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="735.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="709" width="3.5366%" height="15" fill="rgb(252,181,51)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="719.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="693" width="3.5366%" height="15" fill="rgb(253,90,19)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="703.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="677" width="3.5366%" height="15" fill="rgb(215,171,30)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="687.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="661" width="3.5366%" height="15" fill="rgb(214,222,9)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="671.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="645" width="3.5366%" height="15" fill="rgb(223,3,22)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="655.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="629" width="3.5366%" height="15" fill="rgb(225,196,46)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="639.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="613" width="3.5366%" height="15" fill="rgb(209,110,37)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="623.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="597" width="3.5366%" height="15" fill="rgb(249,89,12)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="607.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="581" width="3.5366%" height="15" fill="rgb(226,27,33)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="591.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="565" width="3.5366%" height="15" fill="rgb(213,82,22)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="575.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="549" width="3.5366%" height="15" fill="rgb(248,140,0)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="559.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="533" width="3.5366%" height="15" fill="rgb(228,106,3)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="543.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="517" width="3.5366%" height="15" fill="rgb(209,23,37)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="527.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="501" width="3.5366%" height="15" fill="rgb(241,93,50)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="511.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="485" width="3.5366%" height="15" fill="rgb(253,46,43)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="495.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="469" width="3.5366%" height="15" fill="rgb(226,206,43)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="479.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="453" width="3.5366%" height="15" fill="rgb(217,54,7)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="463.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="437" width="3.5366%" height="15" fill="rgb(223,5,52)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="447.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="421" width="3.5366%" height="15" fill="rgb(206,52,46)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="431.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="405" width="3.5366%" height="15" fill="rgb(253,136,11)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="415.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="389" width="3.5366%" height="15" fill="rgb(208,106,33)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="399.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="373" width="3.5366%" height="15" fill="rgb(206,54,4)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="383.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="357" width="3.5366%" height="15" fill="rgb(213,3,15)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="367.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="341" width="3.5366%" height="15" fill="rgb(252,211,39)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="351.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="325" width="3.5366%" height="15" fill="rgb(223,6,36)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="335.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="309" width="3.5366%" height="15" fill="rgb(252,169,45)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="319.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="293" width="3.5366%" height="15" fill="rgb(212,48,26)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="303.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="277" width="3.5366%" height="15" fill="rgb(251,102,48)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="287.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="261" width="3.5366%" height="15" fill="rgb(243,208,16)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="271.50">std..</text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (4,811,590,442 samples, 3.54%)</title><rect x="7.7816%" y="245" width="3.5366%" height="15" fill="rgb(219,96,24)" fg:x="10586849636" fg:w="4811590442"/><text x="8.0316%" y="255.50">std..</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Backend::run()::{lambda()#1}&gt; &gt; &gt;::_M_run (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="2053" width="0.0281%" height="15" fill="rgb(219,33,29)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="2063.50"></text></g><g><title>InotifyBackend::start (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="2037" width="0.0281%" height="15" fill="rgb(223,176,5)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="2047.50"></text></g><g><title>InotifyBackend::handleEvents (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="2021" width="0.0281%" height="15" fill="rgb(228,140,14)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="2031.50"></text></g><g><title>InotifyBackend::handleEvent (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="2005" width="0.0281%" height="15" fill="rgb(217,179,31)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="2015.50"></text></g><g><title>InotifyBackend::handleSubscription (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1989" width="0.0281%" height="15" fill="rgb(230,9,30)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1999.50"></text></g><g><title>Watcher::isIgnored (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1973" width="0.0281%" height="15" fill="rgb(230,136,20)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1983.50"></text></g><g><title>Glob::isIgnored (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1957" width="0.0281%" height="15" fill="rgb(215,210,22)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1967.50"></text></g><g><title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;, (std::__detail::_RegexExecutorPolicy)0, true&gt; (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1941" width="0.0281%" height="15" fill="rgb(218,43,5)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1951.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1925" width="0.0281%" height="15" fill="rgb(216,11,5)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1935.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1909" width="0.0281%" height="15" fill="rgb(209,82,29)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1919.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1893" width="0.0281%" height="15" fill="rgb(244,115,12)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1903.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1877" width="0.0281%" height="15" fill="rgb(222,82,18)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1887.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1861" width="0.0281%" height="15" fill="rgb(249,227,8)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1871.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1845" width="0.0281%" height="15" fill="rgb(253,141,45)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1855.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1829" width="0.0281%" height="15" fill="rgb(234,184,4)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1839.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1813" width="0.0281%" height="15" fill="rgb(218,194,23)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1823.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1797" width="0.0281%" height="15" fill="rgb(235,66,41)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1807.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1781" width="0.0281%" height="15" fill="rgb(245,217,1)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1791.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1765" width="0.0281%" height="15" fill="rgb(229,91,1)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1775.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1749" width="0.0281%" height="15" fill="rgb(207,101,30)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1759.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1733" width="0.0281%" height="15" fill="rgb(223,82,49)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1743.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1717" width="0.0281%" height="15" fill="rgb(218,167,17)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1727.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1701" width="0.0281%" height="15" fill="rgb(208,103,14)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1711.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1685" width="0.0281%" height="15" fill="rgb(238,20,8)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1695.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1669" width="0.0281%" height="15" fill="rgb(218,80,54)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1679.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1653" width="0.0281%" height="15" fill="rgb(240,144,17)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1663.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1637" width="0.0281%" height="15" fill="rgb(245,27,50)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1647.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1621" width="0.0281%" height="15" fill="rgb(251,51,7)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1631.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1605" width="0.0281%" height="15" fill="rgb(245,217,29)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1615.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1589" width="0.0281%" height="15" fill="rgb(221,176,29)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1599.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1573" width="0.0281%" height="15" fill="rgb(212,180,24)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1583.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1557" width="0.0281%" height="15" fill="rgb(254,24,2)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1567.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1541" width="0.0281%" height="15" fill="rgb(230,100,2)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1551.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1525" width="0.0281%" height="15" fill="rgb(219,142,25)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1535.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1509" width="0.0281%" height="15" fill="rgb(240,73,43)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1519.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1493" width="0.0281%" height="15" fill="rgb(214,114,15)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1503.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1477" width="0.0281%" height="15" fill="rgb(207,130,4)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1487.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1461" width="0.0281%" height="15" fill="rgb(221,25,40)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1471.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1445" width="0.0281%" height="15" fill="rgb(241,184,7)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1455.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1429" width="0.0281%" height="15" fill="rgb(235,159,4)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1439.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1413" width="0.0281%" height="15" fill="rgb(214,87,48)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1423.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1397" width="0.0281%" height="15" fill="rgb(246,198,24)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1407.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1381" width="0.0281%" height="15" fill="rgb(209,66,40)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1391.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1365" width="0.0281%" height="15" fill="rgb(233,147,39)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1375.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1349" width="0.0281%" height="15" fill="rgb(231,145,52)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1359.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1333" width="0.0281%" height="15" fill="rgb(206,20,26)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1343.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1317" width="0.0281%" height="15" fill="rgb(238,220,4)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1327.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1301" width="0.0281%" height="15" fill="rgb(252,195,42)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1311.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1285" width="0.0281%" height="15" fill="rgb(209,10,6)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1295.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1269" width="0.0281%" height="15" fill="rgb(229,3,52)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1279.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1253" width="0.0281%" height="15" fill="rgb(253,49,37)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1263.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1237" width="0.0281%" height="15" fill="rgb(240,103,49)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1247.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1221" width="0.0281%" height="15" fill="rgb(250,182,30)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1231.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1205" width="0.0281%" height="15" fill="rgb(248,8,30)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1215.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1189" width="0.0281%" height="15" fill="rgb(237,120,30)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1199.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1173" width="0.0281%" height="15" fill="rgb(221,146,34)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1183.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1157" width="0.0281%" height="15" fill="rgb(242,55,13)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1167.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1141" width="0.0281%" height="15" fill="rgb(242,112,31)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1151.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1125" width="0.0281%" height="15" fill="rgb(249,192,27)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1135.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1109" width="0.0281%" height="15" fill="rgb(208,204,44)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1119.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1093" width="0.0281%" height="15" fill="rgb(208,93,54)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1103.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1077" width="0.0281%" height="15" fill="rgb(242,1,31)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1087.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1061" width="0.0281%" height="15" fill="rgb(241,83,25)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1071.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1045" width="0.0281%" height="15" fill="rgb(205,169,50)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1055.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1029" width="0.0281%" height="15" fill="rgb(239,186,37)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1039.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="1013" width="0.0281%" height="15" fill="rgb(205,221,10)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1023.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="997" width="0.0281%" height="15" fill="rgb(218,196,15)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="1007.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="981" width="0.0281%" height="15" fill="rgb(218,196,35)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="991.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="965" width="0.0281%" height="15" fill="rgb(233,63,24)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="975.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="949" width="0.0281%" height="15" fill="rgb(225,8,4)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="959.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="933" width="0.0281%" height="15" fill="rgb(234,105,35)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="943.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="917" width="0.0281%" height="15" fill="rgb(236,21,32)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="927.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="901" width="0.0281%" height="15" fill="rgb(228,109,6)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="911.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="885" width="0.0281%" height="15" fill="rgb(229,215,31)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="895.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="869" width="0.0281%" height="15" fill="rgb(221,52,54)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="879.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="853" width="0.0281%" height="15" fill="rgb(252,129,43)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="863.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="837" width="0.0281%" height="15" fill="rgb(248,183,27)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="847.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="821" width="0.0281%" height="15" fill="rgb(250,0,22)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="831.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="805" width="0.0281%" height="15" fill="rgb(213,166,10)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="815.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="789" width="0.0281%" height="15" fill="rgb(207,163,36)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="799.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="773" width="0.0281%" height="15" fill="rgb(208,122,22)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="783.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="757" width="0.0281%" height="15" fill="rgb(207,104,49)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="767.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="741" width="0.0281%" height="15" fill="rgb(248,211,50)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="751.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="725" width="0.0281%" height="15" fill="rgb(217,13,45)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="735.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="709" width="0.0281%" height="15" fill="rgb(211,216,49)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="719.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="693" width="0.0281%" height="15" fill="rgb(221,58,53)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="703.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="677" width="0.0281%" height="15" fill="rgb(220,112,41)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="687.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="661" width="0.0281%" height="15" fill="rgb(236,38,28)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="671.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="645" width="0.0281%" height="15" fill="rgb(227,195,22)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="629" width="0.0281%" height="15" fill="rgb(214,55,33)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="639.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="613" width="0.0281%" height="15" fill="rgb(248,80,13)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="623.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="597" width="0.0281%" height="15" fill="rgb(238,52,6)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="607.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="581" width="0.0281%" height="15" fill="rgb(224,198,47)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="591.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="565" width="0.0281%" height="15" fill="rgb(233,171,20)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="575.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="549" width="0.0281%" height="15" fill="rgb(241,30,25)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="559.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="533" width="0.0281%" height="15" fill="rgb(207,171,38)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="543.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="517" width="0.0281%" height="15" fill="rgb(234,70,1)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="527.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="501" width="0.0281%" height="15" fill="rgb(232,178,18)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="485" width="0.0281%" height="15" fill="rgb(241,78,40)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="469" width="0.0281%" height="15" fill="rgb(222,35,25)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="453" width="0.0281%" height="15" fill="rgb(207,92,16)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="437" width="0.0281%" height="15" fill="rgb(216,59,51)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="421" width="0.0281%" height="15" fill="rgb(213,80,28)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="431.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="405" width="0.0281%" height="15" fill="rgb(220,93,7)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="389" width="0.0281%" height="15" fill="rgb(225,24,44)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="373" width="0.0281%" height="15" fill="rgb(243,74,40)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="357" width="0.0281%" height="15" fill="rgb(228,39,7)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="341" width="0.0281%" height="15" fill="rgb(227,79,8)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="325" width="0.0281%" height="15" fill="rgb(236,58,11)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="309" width="0.0281%" height="15" fill="rgb(249,63,35)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="293" width="0.0281%" height="15" fill="rgb(252,114,16)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="277" width="0.0281%" height="15" fill="rgb(254,151,24)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="261" width="0.0281%" height="15" fill="rgb(253,54,39)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="245" width="0.0281%" height="15" fill="rgb(243,25,45)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="229" width="0.0281%" height="15" fill="rgb(234,134,9)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="213" width="0.0281%" height="15" fill="rgb(227,166,31)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="197" width="0.0281%" height="15" fill="rgb(245,143,41)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="181" width="0.0281%" height="15" fill="rgb(238,181,32)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="165" width="0.0281%" height="15" fill="rgb(224,113,18)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="149" width="0.0281%" height="15" fill="rgb(240,229,28)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="133" width="0.0281%" height="15" fill="rgb(250,185,3)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="117" width="0.0281%" height="15" fill="rgb(212,59,25)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="101" width="0.0281%" height="15" fill="rgb(221,87,20)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="85" width="0.0281%" height="15" fill="rgb(213,74,28)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="69" width="0.0281%" height="15" fill="rgb(224,132,34)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,181,878 samples, 0.03%)</title><rect x="11.3183%" y="53" width="0.0281%" height="15" fill="rgb(222,101,24)" fg:x="15398440078" fg:w="38181878"/><text x="11.5683%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (35,822,633 samples, 0.03%)</title><rect x="11.3200%" y="37" width="0.0263%" height="15" fill="rgb(254,142,4)" fg:x="15400799323" fg:w="35822633"/><text x="11.5700%" y="47.50"></text></g><g><title>node (15,611,569,897 samples, 11.47%)</title><rect x="0.1825%" y="2069" width="11.4749%" height="15" fill="rgb(230,229,49)" fg:x="248310503" fg:w="15611569897"/><text x="0.4325%" y="2079.50">node</text></g><g><title>unlink_chunk.constprop.0 (423,258,444 samples, 0.31%)</title><rect x="11.3463%" y="2053" width="0.3111%" height="15" fill="rgb(238,70,47)" fg:x="15436621956" fg:w="423258444"/><text x="11.5963%" y="2063.50"></text></g><g><title>__fsnotify_parent (14,438,979 samples, 0.01%)</title><rect x="11.6742%" y="1813" width="0.0106%" height="15" fill="rgb(231,160,17)" fg:x="15882706507" fg:w="14438979"/><text x="11.9242%" y="1823.50"></text></g><g><title>__alloc_pages (14,689,219 samples, 0.01%)</title><rect x="11.7019%" y="1685" width="0.0108%" height="15" fill="rgb(218,68,53)" fg:x="15920401014" fg:w="14689219"/><text x="11.9519%" y="1695.50"></text></g><g><title>filemap_alloc_folio (15,606,575 samples, 0.01%)</title><rect x="11.7014%" y="1733" width="0.0115%" height="15" fill="rgb(236,111,10)" fg:x="15919744372" fg:w="15606575"/><text x="11.9514%" y="1743.50"></text></g><g><title>folio_alloc (15,287,134 samples, 0.01%)</title><rect x="11.7017%" y="1717" width="0.0112%" height="15" fill="rgb(224,34,41)" fg:x="15920063813" fg:w="15287134"/><text x="11.9517%" y="1727.50"></text></g><g><title>alloc_pages (15,287,134 samples, 0.01%)</title><rect x="11.7017%" y="1701" width="0.0112%" height="15" fill="rgb(241,118,19)" fg:x="15920063813" fg:w="15287134"/><text x="11.9517%" y="1711.50"></text></g><g><title>__filemap_get_folio (32,777,110 samples, 0.02%)</title><rect x="11.6934%" y="1749" width="0.0241%" height="15" fill="rgb(238,129,25)" fg:x="15908836678" fg:w="32777110"/><text x="11.9434%" y="1759.50"></text></g><g><title>ext4_block_write_begin (19,266,586 samples, 0.01%)</title><rect x="11.7175%" y="1749" width="0.0142%" height="15" fill="rgb(238,22,31)" fg:x="15941613788" fg:w="19266586"/><text x="11.9675%" y="1759.50"></text></g><g><title>ext4_da_write_begin (55,358,371 samples, 0.04%)</title><rect x="11.6916%" y="1765" width="0.0407%" height="15" fill="rgb(222,174,48)" fg:x="15906318380" fg:w="55358371"/><text x="11.9416%" y="1775.50"></text></g><g><title>generic_perform_write (80,371,655 samples, 0.06%)</title><rect x="11.6883%" y="1781" width="0.0591%" height="15" fill="rgb(206,152,40)" fg:x="15901928281" fg:w="80371655"/><text x="11.9383%" y="1791.50"></text></g><g><title>ext4_file_write_iter (84,529,641 samples, 0.06%)</title><rect x="11.6859%" y="1813" width="0.0621%" height="15" fill="rgb(218,99,54)" fg:x="15898660645" fg:w="84529641"/><text x="11.9359%" y="1823.50"></text></g><g><title>ext4_buffered_write_iter (84,001,453 samples, 0.06%)</title><rect x="11.6863%" y="1797" width="0.0617%" height="15" fill="rgb(220,174,26)" fg:x="15899188833" fg:w="84001453"/><text x="11.9363%" y="1807.50"></text></g><g><title>__x64_sys_write (107,403,486 samples, 0.08%)</title><rect x="11.6704%" y="1861" width="0.0789%" height="15" fill="rgb(245,116,9)" fg:x="15877474509" fg:w="107403486"/><text x="11.9204%" y="1871.50"></text></g><g><title>ksys_write (106,922,392 samples, 0.08%)</title><rect x="11.6707%" y="1845" width="0.0786%" height="15" fill="rgb(209,72,35)" fg:x="15877955603" fg:w="106922392"/><text x="11.9207%" y="1855.50"></text></g><g><title>vfs_write (103,710,704 samples, 0.08%)</title><rect x="11.6731%" y="1829" width="0.0762%" height="15" fill="rgb(226,126,21)" fg:x="15881167291" fg:w="103710704"/><text x="11.9231%" y="1839.50"></text></g><g><title>entry_SYSCALL_64 (109,738,041 samples, 0.08%)</title><rect x="11.6701%" y="1893" width="0.0807%" height="15" fill="rgb(227,192,1)" fg:x="15877119251" fg:w="109738041"/><text x="11.9201%" y="1903.50"></text></g><g><title>do_syscall_64 (109,382,783 samples, 0.08%)</title><rect x="11.6704%" y="1877" width="0.0804%" height="15" fill="rgb(237,180,29)" fg:x="15877474509" fg:w="109382783"/><text x="11.9204%" y="1887.50"></text></g><g><title>__GI___libc_write (116,540,793 samples, 0.09%)</title><rect x="11.6700%" y="1909" width="0.0857%" height="15" fill="rgb(230,197,35)" fg:x="15876960820" fg:w="116540793"/><text x="11.9200%" y="1919.50"></text></g><g><title>record__pushfn (117,979,315 samples, 0.09%)</title><rect x="11.6694%" y="1941" width="0.0867%" height="15" fill="rgb(246,193,31)" fg:x="15876185225" fg:w="117979315"/><text x="11.9194%" y="1951.50"></text></g><g><title>writen (117,478,997 samples, 0.09%)</title><rect x="11.6698%" y="1925" width="0.0864%" height="15" fill="rgb(241,36,4)" fg:x="15876685543" fg:w="117478997"/><text x="11.9198%" y="1935.50"></text></g><g><title>perf_mmap__push (122,610,077 samples, 0.09%)</title><rect x="11.6663%" y="1957" width="0.0901%" height="15" fill="rgb(241,130,17)" fg:x="15871909409" fg:w="122610077"/><text x="11.9163%" y="1967.50"></text></g><g><title>__cmd_record.constprop.0 (139,813,110 samples, 0.10%)</title><rect x="11.6586%" y="1989" width="0.1028%" height="15" fill="rgb(206,137,32)" fg:x="15861460678" fg:w="139813110"/><text x="11.9086%" y="1999.50"></text></g><g><title>record__mmap_read_evlist (129,944,361 samples, 0.10%)</title><rect x="11.6659%" y="1973" width="0.0955%" height="15" fill="rgb(237,228,51)" fg:x="15871329427" fg:w="129944361"/><text x="11.9159%" y="1983.50"></text></g><g><title>__libc_start_call_main (140,471,420 samples, 0.10%)</title><rect x="11.6586%" y="2053" width="0.1033%" height="15" fill="rgb(243,6,42)" fg:x="15861460678" fg:w="140471420"/><text x="11.9086%" y="2063.50"></text></g><g><title>main (140,471,420 samples, 0.10%)</title><rect x="11.6586%" y="2037" width="0.1033%" height="15" fill="rgb(251,74,28)" fg:x="15861460678" fg:w="140471420"/><text x="11.9086%" y="2047.50"></text></g><g><title>run_builtin (140,471,420 samples, 0.10%)</title><rect x="11.6586%" y="2021" width="0.1033%" height="15" fill="rgb(218,20,49)" fg:x="15861460678" fg:w="140471420"/><text x="11.9086%" y="2031.50"></text></g><g><title>cmd_record (140,471,420 samples, 0.10%)</title><rect x="11.6586%" y="2005" width="0.1033%" height="15" fill="rgb(238,28,14)" fg:x="15861460678" fg:w="140471420"/><text x="11.9086%" y="2015.50"></text></g><g><title>perf (140,958,960 samples, 0.10%)</title><rect x="11.6586%" y="2069" width="0.1036%" height="15" fill="rgb(229,40,46)" fg:x="15861431743" fg:w="140958960"/><text x="11.9086%" y="2079.50"></text></g><g><title>entry_SYSCALL_64 (14,832,931 samples, 0.01%)</title><rect x="11.7716%" y="2005" width="0.0109%" height="15" fill="rgb(244,195,20)" fg:x="16015181687" fg:w="14832931"/><text x="12.0216%" y="2015.50"></text></g><g><title>do_syscall_64 (14,832,931 samples, 0.01%)</title><rect x="11.7716%" y="1989" width="0.0109%" height="15" fill="rgb(253,56,35)" fg:x="16015181687" fg:w="14832931"/><text x="12.0216%" y="1999.50"></text></g><g><title>__x64_sys_newfstatat (14,832,931 samples, 0.01%)</title><rect x="11.7716%" y="1973" width="0.0109%" height="15" fill="rgb(210,149,44)" fg:x="16015181687" fg:w="14832931"/><text x="12.0216%" y="1983.50"></text></g><g><title>__se_sys_newfstatat (14,832,931 samples, 0.01%)</title><rect x="11.7716%" y="1957" width="0.0109%" height="15" fill="rgb(240,135,12)" fg:x="16015181687" fg:w="14832931"/><text x="12.0216%" y="1967.50"></text></g><g><title>vfs_fstatat (14,832,931 samples, 0.01%)</title><rect x="11.7716%" y="1941" width="0.0109%" height="15" fill="rgb(251,24,50)" fg:x="16015181687" fg:w="14832931"/><text x="12.0216%" y="1951.50"></text></g><g><title>__GI___fstatat64 (15,504,976 samples, 0.01%)</title><rect x="11.7716%" y="2021" width="0.0114%" height="15" fill="rgb(243,200,47)" fg:x="16015181687" fg:w="15504976"/><text x="12.0216%" y="2031.50"></text></g><g><title>[unknown] (19,213,545 samples, 0.01%)</title><rect x="11.7700%" y="2037" width="0.0141%" height="15" fill="rgb(224,166,26)" fg:x="16013058323" fg:w="19213545"/><text x="12.0200%" y="2047.50"></text></g><g><title>path_openat (29,756,186 samples, 0.02%)</title><rect x="11.7953%" y="1941" width="0.0219%" height="15" fill="rgb(233,0,47)" fg:x="16047489225" fg:w="29756186"/><text x="12.0453%" y="1951.50"></text></g><g><title>do_filp_open (45,425,010 samples, 0.03%)</title><rect x="11.7938%" y="1957" width="0.0334%" height="15" fill="rgb(253,80,5)" fg:x="16045356171" fg:w="45425010"/><text x="12.0438%" y="1967.50"></text></g><g><title>__x64_sys_openat (60,575,219 samples, 0.04%)</title><rect x="11.7918%" y="1989" width="0.0445%" height="15" fill="rgb(214,133,25)" fg:x="16042674042" fg:w="60575219"/><text x="12.0418%" y="1999.50"></text></g><g><title>do_sys_openat2 (60,575,219 samples, 0.04%)</title><rect x="11.7918%" y="1973" width="0.0445%" height="15" fill="rgb(209,27,14)" fg:x="16042674042" fg:w="60575219"/><text x="12.0418%" y="1983.50"></text></g><g><title>entry_SYSCALL_64 (65,520,259 samples, 0.05%)</title><rect x="11.7907%" y="2021" width="0.0482%" height="15" fill="rgb(219,102,51)" fg:x="16041219734" fg:w="65520259"/><text x="12.0407%" y="2031.50"></text></g><g><title>do_syscall_64 (64,065,951 samples, 0.05%)</title><rect x="11.7918%" y="2005" width="0.0471%" height="15" fill="rgb(237,18,16)" fg:x="16042674042" fg:w="64065951"/><text x="12.0418%" y="2015.50"></text></g><g><title>__GI___libc_open (72,152,269 samples, 0.05%)</title><rect x="11.7902%" y="2037" width="0.0530%" height="15" fill="rgb(241,85,17)" fg:x="16040505567" fg:w="72152269"/><text x="12.0402%" y="2047.50"></text></g><g><title>[unknown] (151,583,445 samples, 0.11%)</title><rect x="11.7684%" y="2053" width="0.1114%" height="15" fill="rgb(236,90,42)" fg:x="16010874891" fg:w="151583445"/><text x="12.0184%" y="2063.50"></text></g><g><title>__x64_sys_close (14,048,381 samples, 0.01%)</title><rect x="11.8845%" y="2005" width="0.0103%" height="15" fill="rgb(249,57,21)" fg:x="16168739345" fg:w="14048381"/><text x="12.1345%" y="2015.50"></text></g><g><title>__se_sys_close (14,048,381 samples, 0.01%)</title><rect x="11.8845%" y="1989" width="0.0103%" height="15" fill="rgb(243,12,36)" fg:x="16168739345" fg:w="14048381"/><text x="12.1345%" y="1999.50"></text></g><g><title>__fput_sync (14,048,381 samples, 0.01%)</title><rect x="11.8845%" y="1973" width="0.0103%" height="15" fill="rgb(253,128,47)" fg:x="16168739345" fg:w="14048381"/><text x="12.1345%" y="1983.50"></text></g><g><title>entry_SYSCALL_64 (14,744,638 samples, 0.01%)</title><rect x="11.8845%" y="2037" width="0.0108%" height="15" fill="rgb(207,33,20)" fg:x="16168739345" fg:w="14744638"/><text x="12.1345%" y="2047.50"></text></g><g><title>do_syscall_64 (14,744,638 samples, 0.01%)</title><rect x="11.8845%" y="2021" width="0.0108%" height="15" fill="rgb(233,215,35)" fg:x="16168739345" fg:w="14744638"/><text x="12.1345%" y="2031.50"></text></g><g><title>__close (17,341,235 samples, 0.01%)</title><rect x="11.8845%" y="2053" width="0.0127%" height="15" fill="rgb(249,188,52)" fg:x="16168739345" fg:w="17341235"/><text x="12.1345%" y="2063.50"></text></g><g><title>proc_pid_status (30,421,378 samples, 0.02%)</title><rect x="11.9216%" y="1909" width="0.0224%" height="15" fill="rgb(225,12,32)" fg:x="16219329026" fg:w="30421378"/><text x="12.1716%" y="1919.50"></text></g><g><title>proc_single_show (37,365,474 samples, 0.03%)</title><rect x="11.9205%" y="1925" width="0.0275%" height="15" fill="rgb(247,98,14)" fg:x="16217776131" fg:w="37365474"/><text x="12.1705%" y="1935.50"></text></g><g><title>__x64_sys_read (53,810,972 samples, 0.04%)</title><rect x="11.9094%" y="2005" width="0.0396%" height="15" fill="rgb(247,219,48)" fg:x="16202703376" fg:w="53810972"/><text x="12.1594%" y="2015.50"></text></g><g><title>ksys_read (53,167,868 samples, 0.04%)</title><rect x="11.9099%" y="1989" width="0.0391%" height="15" fill="rgb(253,60,48)" fg:x="16203346480" fg:w="53167868"/><text x="12.1599%" y="1999.50"></text></g><g><title>vfs_read (51,724,496 samples, 0.04%)</title><rect x="11.9110%" y="1973" width="0.0380%" height="15" fill="rgb(245,15,52)" fg:x="16204789852" fg:w="51724496"/><text x="12.1610%" y="1983.50"></text></g><g><title>seq_read (48,731,444 samples, 0.04%)</title><rect x="11.9132%" y="1957" width="0.0358%" height="15" fill="rgb(220,133,28)" fg:x="16207782904" fg:w="48731444"/><text x="12.1632%" y="1967.50"></text></g><g><title>seq_read_iter (48,007,177 samples, 0.04%)</title><rect x="11.9137%" y="1941" width="0.0353%" height="15" fill="rgb(217,180,4)" fg:x="16208507171" fg:w="48007177"/><text x="12.1637%" y="1951.50"></text></g><g><title>entry_SYSCALL_64 (56,069,720 samples, 0.04%)</title><rect x="11.9089%" y="2037" width="0.0412%" height="15" fill="rgb(251,24,1)" fg:x="16201945050" fg:w="56069720"/><text x="12.1589%" y="2047.50"></text></g><g><title>do_syscall_64 (55,311,394 samples, 0.04%)</title><rect x="11.9094%" y="2021" width="0.0407%" height="15" fill="rgb(212,185,49)" fg:x="16202703376" fg:w="55311394"/><text x="12.1594%" y="2031.50"></text></g><g><title>read (61,692,042 samples, 0.05%)</title><rect x="11.9079%" y="2053" width="0.0453%" height="15" fill="rgb(215,175,22)" fg:x="16200585928" fg:w="61692042"/><text x="12.1579%" y="2063.50"></text></g><g><title>ps (261,687,520 samples, 0.19%)</title><rect x="11.7622%" y="2069" width="0.1923%" height="15" fill="rgb(250,205,14)" fg:x="16002390703" fg:w="261687520"/><text x="12.0122%" y="2079.50"></text></g><g><title>IOTraceClient::do_operation (37,939,393 samples, 0.03%)</title><rect x="11.9601%" y="1957" width="0.0279%" height="15" fill="rgb(225,211,22)" fg:x="16271610240" fg:w="37939393"/><text x="12.2101%" y="1967.50"></text></g><g><title>OpMeasurement::record_op (21,722,429 samples, 0.02%)</title><rect x="11.9880%" y="1957" width="0.0160%" height="15" fill="rgb(251,179,42)" fg:x="16309549633" fg:w="21722429"/><text x="12.2380%" y="1967.50"></text></g><g><title>TraceWorkload::has_next_op (30,722,661 samples, 0.02%)</title><rect x="12.0131%" y="1957" width="0.0226%" height="15" fill="rgb(208,216,51)" fg:x="16343755023" fg:w="30722661"/><text x="12.2631%" y="1967.50"></text></g><g><title>TraceWorkload::next_op (16,288,653 samples, 0.01%)</title><rect x="12.0357%" y="1957" width="0.0120%" height="15" fill="rgb(235,36,11)" fg:x="16374477684" fg:w="16288653"/><text x="12.2857%" y="1967.50"></text></g><g><title>__interceptor_clock_gettime (41,008,929 samples, 0.03%)</title><rect x="12.0477%" y="1957" width="0.0301%" height="15" fill="rgb(213,189,28)" fg:x="16390766337" fg:w="41008929"/><text x="12.2977%" y="1967.50"></text></g><g><title>__interceptor_clock_gettime.part.0 (13,668,980 samples, 0.01%)</title><rect x="12.0778%" y="1957" width="0.0100%" height="15" fill="rgb(227,203,42)" fg:x="16431775266" fg:w="13668980"/><text x="12.3278%" y="1967.50"></text></g><g><title>clock_gettime@plt (17,452,908 samples, 0.01%)</title><rect x="12.0884%" y="1957" width="0.0128%" height="15" fill="rgb(244,72,36)" fg:x="16446235386" fg:w="17452908"/><text x="12.3384%" y="1967.50"></text></g><g><title>std::atomic&lt;bool&gt;::operator bool (16,237,206 samples, 0.01%)</title><rect x="12.1013%" y="1957" width="0.0119%" height="15" fill="rgb(213,53,17)" fg:x="16463688294" fg:w="16237206"/><text x="12.3513%" y="1967.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (20,082,435 samples, 0.01%)</title><rect x="12.1992%" y="1941" width="0.0148%" height="15" fill="rgb(207,167,3)" fg:x="16596999522" fg:w="20082435"/><text x="12.4492%" y="1951.50"></text></g><g><title>__interceptor_clock_gettime.part.0 (33,835,042 samples, 0.02%)</title><rect x="12.2140%" y="1941" width="0.0249%" height="15" fill="rgb(216,98,30)" fg:x="16617081957" fg:w="33835042"/><text x="12.4640%" y="1951.50"></text></g><g><title>__vdso_clock_gettime (18,424,322 samples, 0.01%)</title><rect x="12.2389%" y="1941" width="0.0135%" height="15" fill="rgb(236,123,15)" fg:x="16650916999" fg:w="18424322"/><text x="12.4889%" y="1951.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (392,426,580 samples, 0.29%)</title><rect x="12.1132%" y="1957" width="0.2884%" height="15" fill="rgb(248,81,50)" fg:x="16479925500" fg:w="392426580"/><text x="12.3632%" y="1967.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (203,010,759 samples, 0.15%)</title><rect x="12.2524%" y="1941" width="0.1492%" height="15" fill="rgb(214,120,4)" fg:x="16669341321" fg:w="203010759"/><text x="12.5024%" y="1951.50"></text></g><g><title>__vdso_clock_gettime (149,362,432 samples, 0.11%)</title><rect x="12.2919%" y="1925" width="0.1098%" height="15" fill="rgb(208,179,34)" fg:x="16722989648" fg:w="149362432"/><text x="12.5419%" y="1935.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (16,492,264 samples, 0.01%)</title><rect x="12.4113%" y="1957" width="0.0121%" height="15" fill="rgb(227,140,7)" fg:x="16885554763" fg:w="16492264"/><text x="12.6613%" y="1967.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (18,285,167 samples, 0.01%)</title><rect x="12.4315%" y="1957" width="0.0134%" height="15" fill="rgb(214,22,6)" fg:x="16913003355" fg:w="18285167"/><text x="12.6815%" y="1967.50"></text></g><g><title>IOTraceClient::do_insert (22,764,060 samples, 0.02%)</title><rect x="12.7459%" y="1941" width="0.0167%" height="15" fill="rgb(207,137,27)" fg:x="17340740312" fg:w="22764060"/><text x="12.9959%" y="1951.50"></text></g><g><title>FileDescriptorCache::get_file_descriptor (22,924,664 samples, 0.02%)</title><rect x="12.9068%" y="1925" width="0.0169%" height="15" fill="rgb(210,8,46)" fg:x="17559573885" fg:w="22924664"/><text x="13.1568%" y="1935.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, false, true&gt;::operator (75,633,432 samples, 0.06%)</title><rect x="13.2841%" y="1893" width="0.0556%" height="15" fill="rgb(240,16,54)" fg:x="18072885539" fg:w="75633432"/><text x="13.5341%" y="1903.50"></text></g><g><title> (75,633,432 samples, 0.06%)</title><rect x="13.2841%" y="1877" width="0.0556%" height="15" fill="rgb(211,209,29)" fg:x="18072885539" fg:w="75633432"/><text x="13.5341%" y="1887.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_valptr (41,664,417 samples, 0.03%)</title><rect x="13.3090%" y="1861" width="0.0306%" height="15" fill="rgb(226,228,24)" fg:x="18106854554" fg:w="41664417"/><text x="13.5590%" y="1871.50"></text></g><g><title>std::__detail::operator== (37,579,240 samples, 0.03%)</title><rect x="13.3397%" y="1893" width="0.0276%" height="15" fill="rgb(222,84,9)" fg:x="18148518971" fg:w="37579240"/><text x="13.5897%" y="1903.50"></text></g><g><title>__get_user_nocheck_4 (20,628,508 samples, 0.02%)</title><rect x="13.4277%" y="1733" width="0.0152%" height="15" fill="rgb(234,203,30)" fg:x="18268265369" fg:w="20628508"/><text x="13.6777%" y="1743.50"></text></g><g><title>futex_q_lock (31,911,330 samples, 0.02%)</title><rect x="13.4439%" y="1733" width="0.0235%" height="15" fill="rgb(238,109,14)" fg:x="18290374742" fg:w="31911330"/><text x="13.6939%" y="1743.50"></text></g><g><title>futex_wait_setup (65,852,013 samples, 0.05%)</title><rect x="13.4250%" y="1749" width="0.0484%" height="15" fill="rgb(233,206,34)" fg:x="18264628858" fg:w="65852013"/><text x="13.6750%" y="1759.50"></text></g><g><title>dequeue_entity (30,626,815 samples, 0.02%)</title><rect x="13.4956%" y="1685" width="0.0225%" height="15" fill="rgb(220,167,47)" fg:x="18360656183" fg:w="30626815"/><text x="13.7456%" y="1695.50"></text></g><g><title>dequeue_task (45,904,989 samples, 0.03%)</title><rect x="13.4886%" y="1717" width="0.0337%" height="15" fill="rgb(238,105,10)" fg:x="18351224083" fg:w="45904989"/><text x="13.7386%" y="1727.50"></text></g><g><title>dequeue_task_fair (42,246,009 samples, 0.03%)</title><rect x="13.4913%" y="1701" width="0.0311%" height="15" fill="rgb(213,227,17)" fg:x="18354883063" fg:w="42246009"/><text x="13.7413%" y="1711.50"></text></g><g><title>__sched_text_start (98,731,570 samples, 0.07%)</title><rect x="13.4772%" y="1733" width="0.0726%" height="15" fill="rgb(217,132,38)" fg:x="18335664197" fg:w="98731570"/><text x="13.7272%" y="1743.50"></text></g><g><title>futex_wait (192,878,606 samples, 0.14%)</title><rect x="13.4091%" y="1765" width="0.1418%" height="15" fill="rgb(242,146,4)" fg:x="18243041305" fg:w="192878606"/><text x="13.6591%" y="1775.50"></text></g><g><title>schedule (103,200,004 samples, 0.08%)</title><rect x="13.4750%" y="1749" width="0.0759%" height="15" fill="rgb(212,61,9)" fg:x="18332719907" fg:w="103200004"/><text x="13.7250%" y="1759.50"></text></g><g><title>do_futex (197,926,377 samples, 0.15%)</title><rect x="13.4066%" y="1781" width="0.1455%" height="15" fill="rgb(247,126,22)" fg:x="18239585449" fg:w="197926377"/><text x="13.6566%" y="1791.50"></text></g><g><title>__se_sys_futex (203,795,594 samples, 0.15%)</title><rect x="13.4039%" y="1797" width="0.1498%" height="15" fill="rgb(220,196,2)" fg:x="18235899850" fg:w="203795594"/><text x="13.6539%" y="1807.50"></text></g><g><title>__x64_sys_futex (206,134,384 samples, 0.15%)</title><rect x="13.4033%" y="1813" width="0.1515%" height="15" fill="rgb(208,46,4)" fg:x="18235106888" fg:w="206134384"/><text x="13.6533%" y="1823.50"></text></g><g><title>syscall_enter_from_user_mode (17,537,324 samples, 0.01%)</title><rect x="13.5581%" y="1813" width="0.0129%" height="15" fill="rgb(252,104,46)" fg:x="18445715850" fg:w="17537324"/><text x="13.8081%" y="1823.50"></text></g><g><title>exit_to_user_mode_prepare (21,199,658 samples, 0.02%)</title><rect x="13.5748%" y="1797" width="0.0156%" height="15" fill="rgb(237,152,48)" fg:x="18468502961" fg:w="21199658"/><text x="13.8248%" y="1807.50"></text></g><g><title>do_syscall_64 (273,473,845 samples, 0.20%)</title><rect x="13.4001%" y="1829" width="0.2010%" height="15" fill="rgb(221,59,37)" fg:x="18230690339" fg:w="273473845"/><text x="13.6501%" y="1839.50"></text></g><g><title>syscall_exit_to_user_mode (40,911,010 samples, 0.03%)</title><rect x="13.5710%" y="1813" width="0.0301%" height="15" fill="rgb(209,202,51)" fg:x="18463253174" fg:w="40911010"/><text x="13.8210%" y="1823.50"></text></g><g><title>entry_SYSCALL_64 (284,086,882 samples, 0.21%)</title><rect x="13.3928%" y="1845" width="0.2088%" height="15" fill="rgb(228,81,30)" fg:x="18220848837" fg:w="284086882"/><text x="13.6428%" y="1855.50"></text></g><g><title>entry_ibpb (93,781,403 samples, 0.07%)</title><rect x="13.6016%" y="1845" width="0.0689%" height="15" fill="rgb(227,42,39)" fg:x="18504935719" fg:w="93781403"/><text x="13.8516%" y="1855.50"></text></g><g><title>__GI___lll_lock_wait (404,818,384 samples, 0.30%)</title><rect x="13.3788%" y="1861" width="0.2976%" height="15" fill="rgb(221,26,2)" fg:x="18201814011" fg:w="404818384"/><text x="13.6288%" y="1871.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (584,244,601 samples, 0.43%)</title><rect x="13.3673%" y="1893" width="0.4294%" height="15" fill="rgb(254,61,31)" fg:x="18186098211" fg:w="584244601"/><text x="13.6173%" y="1903.50"></text></g><g><title>std::mutex::lock (574,537,195 samples, 0.42%)</title><rect x="13.3744%" y="1877" width="0.4223%" height="15" fill="rgb(222,173,38)" fg:x="18195805617" fg:w="574537195"/><text x="13.6244%" y="1887.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (144,601,692 samples, 0.11%)</title><rect x="13.6904%" y="1861" width="0.1063%" height="15" fill="rgb(218,50,12)" fg:x="18625741120" fg:w="144601692"/><text x="13.9404%" y="1871.50"></text></g><g><title>try_to_wake_up (54,962,899 samples, 0.04%)</title><rect x="13.9270%" y="1733" width="0.0404%" height="15" fill="rgb(223,88,40)" fg:x="18947647339" fg:w="54962899"/><text x="14.1770%" y="1743.50"></text></g><g><title>futex_wake (140,540,822 samples, 0.10%)</title><rect x="13.8647%" y="1765" width="0.1033%" height="15" fill="rgb(237,54,19)" fg:x="18862824808" fg:w="140540822"/><text x="14.1147%" y="1775.50"></text></g><g><title>wake_up_q (57,205,855 samples, 0.04%)</title><rect x="13.9259%" y="1749" width="0.0420%" height="15" fill="rgb(251,129,25)" fg:x="18946159775" fg:w="57205855"/><text x="14.1759%" y="1759.50"></text></g><g><title>do_futex (160,949,126 samples, 0.12%)</title><rect x="13.8530%" y="1781" width="0.1183%" height="15" fill="rgb(238,97,19)" fg:x="18846881461" fg:w="160949126"/><text x="14.1030%" y="1791.50"></text></g><g><title>__se_sys_futex (169,070,430 samples, 0.12%)</title><rect x="13.8497%" y="1797" width="0.1243%" height="15" fill="rgb(240,169,18)" fg:x="18842456959" fg:w="169070430"/><text x="14.0997%" y="1807.50"></text></g><g><title>__x64_sys_futex (171,228,907 samples, 0.13%)</title><rect x="13.8497%" y="1813" width="0.1259%" height="15" fill="rgb(230,187,49)" fg:x="18842456959" fg:w="171228907"/><text x="14.0997%" y="1823.50"></text></g><g><title>syscall_enter_from_user_mode (36,305,173 samples, 0.03%)</title><rect x="13.9789%" y="1813" width="0.0267%" height="15" fill="rgb(209,44,26)" fg:x="19018181446" fg:w="36305173"/><text x="14.2289%" y="1823.50"></text></g><g><title>syscall_exit_to_user_mode (47,306,529 samples, 0.03%)</title><rect x="14.0056%" y="1813" width="0.0348%" height="15" fill="rgb(244,0,6)" fg:x="19054486619" fg:w="47306529"/><text x="14.2556%" y="1823.50"></text></g><g><title>syscall_exit_work (24,486,832 samples, 0.02%)</title><rect x="14.0223%" y="1797" width="0.0180%" height="15" fill="rgb(248,18,21)" fg:x="19077306316" fg:w="24486832"/><text x="14.2723%" y="1807.50"></text></g><g><title>do_syscall_64 (272,621,029 samples, 0.20%)</title><rect x="13.8416%" y="1829" width="0.2004%" height="15" fill="rgb(245,180,19)" fg:x="18831349737" fg:w="272621029"/><text x="14.0916%" y="1839.50"></text></g><g><title>entry_SYSCALL_64 (300,623,828 samples, 0.22%)</title><rect x="13.8232%" y="1845" width="0.2210%" height="15" fill="rgb(252,118,36)" fg:x="18806380608" fg:w="300623828"/><text x="14.0732%" y="1855.50"></text></g><g><title>entry_ibpb (123,755,588 samples, 0.09%)</title><rect x="14.0442%" y="1845" width="0.0910%" height="15" fill="rgb(210,224,19)" fg:x="19107004436" fg:w="123755588"/><text x="14.2942%" y="1855.50"></text></g><g><title>__GI___lll_lock_wake (439,179,567 samples, 0.32%)</title><rect x="13.8150%" y="1861" width="0.3228%" height="15" fill="rgb(218,30,24)" fg:x="18795204575" fg:w="439179567"/><text x="14.0650%" y="1871.50"></text></g><g><title>__gthread_mutex_unlock (14,343,244 samples, 0.01%)</title><rect x="14.1432%" y="1861" width="0.0105%" height="15" fill="rgb(219,75,50)" fg:x="19241697619" fg:w="14343244"/><text x="14.3932%" y="1871.50"></text></g><g><title>pthread_mutex_unlock@@GLIBC_2.2.5 (26,524,476 samples, 0.02%)</title><rect x="14.1565%" y="1861" width="0.0195%" height="15" fill="rgb(234,72,50)" fg:x="19259827680" fg:w="26524476"/><text x="14.4065%" y="1871.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (519,593,657 samples, 0.38%)</title><rect x="13.7967%" y="1893" width="0.3819%" height="15" fill="rgb(219,100,48)" fg:x="18770342812" fg:w="519593657"/><text x="14.0467%" y="1903.50"></text></g><g><title>std::mutex::unlock (501,487,697 samples, 0.37%)</title><rect x="13.8100%" y="1877" width="0.3686%" height="15" fill="rgb(253,5,41)" fg:x="18788448772" fg:w="501487697"/><text x="14.0600%" y="1887.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (58,289,635 samples, 0.04%)</title><rect x="14.1863%" y="1877" width="0.0428%" height="15" fill="rgb(247,181,11)" fg:x="19300336313" fg:w="58289635"/><text x="14.4363%" y="1887.50"></text></g><g><title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::end (72,398,451 samples, 0.05%)</title><rect x="14.1803%" y="1893" width="0.0532%" height="15" fill="rgb(222,223,25)" fg:x="19292210366" fg:w="72398451"/><text x="14.4303%" y="1903.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (62,582,369 samples, 0.05%)</title><rect x="14.3567%" y="1845" width="0.0460%" height="15" fill="rgb(214,198,28)" fg:x="19532271789" fg:w="62582369"/><text x="14.6067%" y="1855.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (27,655,743 samples, 0.02%)</title><rect x="14.3824%" y="1829" width="0.0203%" height="15" fill="rgb(230,46,43)" fg:x="19567198415" fg:w="27655743"/><text x="14.6324%" y="1839.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (118,956,610 samples, 0.09%)</title><rect x="14.3323%" y="1861" width="0.0874%" height="15" fill="rgb(233,65,53)" fg:x="19498985463" fg:w="118956610"/><text x="14.5823%" y="1871.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (23,087,915 samples, 0.02%)</title><rect x="14.4027%" y="1845" width="0.0170%" height="15" fill="rgb(221,121,27)" fg:x="19594854158" fg:w="23087915"/><text x="14.6527%" y="1855.50"></text></g><g><title>decltype (23,681,907 samples, 0.02%)</title><rect x="14.6889%" y="1813" width="0.0174%" height="15" fill="rgb(247,70,47)" fg:x="19984176211" fg:w="23681907"/><text x="14.9389%" y="1823.50"></text></g><g><title>decltype  (17,810,889 samples, 0.01%)</title><rect x="14.7063%" y="1813" width="0.0131%" height="15" fill="rgb(228,85,35)" fg:x="20007858118" fg:w="17810889"/><text x="14.9563%" y="1823.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_ptr (17,510,780 samples, 0.01%)</title><rect x="14.7299%" y="1797" width="0.0129%" height="15" fill="rgb(209,50,18)" fg:x="20039891933" fg:w="17510780"/><text x="14.9799%" y="1807.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_v (64,328,035 samples, 0.05%)</title><rect x="14.7194%" y="1813" width="0.0473%" height="15" fill="rgb(250,19,35)" fg:x="20025669007" fg:w="64328035"/><text x="14.9694%" y="1823.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_valptr (32,594,329 samples, 0.02%)</title><rect x="14.7427%" y="1797" width="0.0240%" height="15" fill="rgb(253,107,29)" fg:x="20057402713" fg:w="32594329"/><text x="14.9927%" y="1807.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (20,644,267 samples, 0.02%)</title><rect x="14.7765%" y="1813" width="0.0152%" height="15" fill="rgb(252,179,29)" fg:x="20103375567" fg:w="20644267"/><text x="15.0265%" y="1823.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (38,393,801 samples, 0.03%)</title><rect x="14.7917%" y="1813" width="0.0282%" height="15" fill="rgb(238,194,6)" fg:x="20124019834" fg:w="38393801"/><text x="15.0417%" y="1823.50"></text></g><g><title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_cget (14,510,336 samples, 0.01%)</title><rect x="14.8199%" y="1813" width="0.0107%" height="15" fill="rgb(238,164,29)" fg:x="20162413635" fg:w="14510336"/><text x="15.0699%" y="1823.50"></text></g><g><title>MemcmpInterceptorCommon (24,369,847 samples, 0.02%)</title><rect x="14.8597%" y="1781" width="0.0179%" height="15" fill="rgb(224,25,9)" fg:x="20216554394" fg:w="24369847"/><text x="15.1097%" y="1791.50"></text></g><g><title>MemcmpInterceptorCommon (43,267,206 samples, 0.03%)</title><rect x="14.9242%" y="1765" width="0.0318%" height="15" fill="rgb(244,153,23)" fg:x="20304299348" fg:w="43267206"/><text x="15.1742%" y="1775.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (28,594,956 samples, 0.02%)</title><rect x="14.9560%" y="1765" width="0.0210%" height="15" fill="rgb(212,203,14)" fg:x="20347566554" fg:w="28594956"/><text x="15.2060%" y="1775.50"></text></g><g><title>__asan_region_is_poisoned (111,962,965 samples, 0.08%)</title><rect x="14.9770%" y="1765" width="0.0823%" height="15" fill="rgb(220,164,20)" fg:x="20376161510" fg:w="111962965"/><text x="15.2270%" y="1775.50"></text></g><g><title>__asan_region_is_poisoned@plt (19,971,902 samples, 0.01%)</title><rect x="15.0593%" y="1765" width="0.0147%" height="15" fill="rgb(222,203,48)" fg:x="20488124475" fg:w="19971902"/><text x="15.3093%" y="1775.50"></text></g><g><title>__memcmp_avx2_movbe (65,020,698 samples, 0.05%)</title><rect x="15.0740%" y="1765" width="0.0478%" height="15" fill="rgb(215,159,22)" fg:x="20508096377" fg:w="65020698"/><text x="15.3240%" y="1775.50"></text></g><g><title>__sanitizer::mem_is_zero (55,380,760 samples, 0.04%)</title><rect x="15.1218%" y="1765" width="0.0407%" height="15" fill="rgb(216,183,47)" fg:x="20573117075" fg:w="55380760"/><text x="15.3718%" y="1775.50"></text></g><g><title>__interceptor_memcmp (424,163,788 samples, 0.31%)</title><rect x="14.8776%" y="1781" width="0.3118%" height="15" fill="rgb(229,195,25)" fg:x="20240924241" fg:w="424163788"/><text x="15.1276%" y="1791.50"></text></g><g><title>__sanitizer_weak_hook_memcmp (36,590,194 samples, 0.03%)</title><rect x="15.1625%" y="1765" width="0.0269%" height="15" fill="rgb(224,132,51)" fg:x="20628497835" fg:w="36590194"/><text x="15.4125%" y="1775.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (518,386,888 samples, 0.38%)</title><rect x="14.8372%" y="1797" width="0.3810%" height="15" fill="rgb(240,63,7)" fg:x="20185895151" fg:w="518386888"/><text x="15.0872%" y="1807.50"></text></g><g><title>std::char_traits&lt;char&gt;::compare (32,404,430 samples, 0.02%)</title><rect x="15.1944%" y="1781" width="0.0238%" height="15" fill="rgb(249,182,41)" fg:x="20671877609" fg:w="32404430"/><text x="15.4444%" y="1791.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (22,332,490 samples, 0.02%)</title><rect x="15.2182%" y="1797" width="0.0164%" height="15" fill="rgb(243,47,26)" fg:x="20704282039" fg:w="22332490"/><text x="15.4682%" y="1807.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (43,663,106 samples, 0.03%)</title><rect x="15.2346%" y="1797" width="0.0321%" height="15" fill="rgb(233,48,2)" fg:x="20726614529" fg:w="43663106"/><text x="15.4846%" y="1807.50"></text></g><g><title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (612,605,299 samples, 0.45%)</title><rect x="14.8306%" y="1813" width="0.4503%" height="15" fill="rgb(244,165,34)" fg:x="20176923971" fg:w="612605299"/><text x="15.0806%" y="1823.50"></text></g><g><title>std::char_traits&lt;char&gt;::compare (19,251,635 samples, 0.01%)</title><rect x="15.2667%" y="1797" width="0.0142%" height="15" fill="rgb(207,89,7)" fg:x="20770277635" fg:w="19251635"/><text x="15.5167%" y="1807.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (939,791,799 samples, 0.69%)</title><rect x="14.6082%" y="1829" width="0.6908%" height="15" fill="rgb(244,117,36)" fg:x="19874367371" fg:w="939791799"/><text x="14.8582%" y="1839.50"></text></g><g><title>std::tuple_element&lt;0ul, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::type const&amp; std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; (18,018,602 samples, 0.01%)</title><rect x="15.2857%" y="1813" width="0.0132%" height="15" fill="rgb(226,144,34)" fg:x="20796140568" fg:w="18018602"/><text x="15.5357%" y="1823.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (27,749,628 samples, 0.02%)</title><rect x="15.2990%" y="1829" width="0.0204%" height="15" fill="rgb(213,23,19)" fg:x="20814159170" fg:w="27749628"/><text x="15.5490%" y="1839.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,165,117,932 samples, 0.86%)</title><rect x="14.4678%" y="1845" width="0.8564%" height="15" fill="rgb(217,75,12)" fg:x="19683398589" fg:w="1165117932"/><text x="14.7178%" y="1855.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,219,533,177 samples, 0.90%)</title><rect x="14.4284%" y="1861" width="0.8964%" height="15" fill="rgb(224,159,17)" fg:x="19629766261" fg:w="1219533177"/><text x="14.6784%" y="1871.50"></text></g><g><title>std::_Hash_impl::hash (21,877,174 samples, 0.02%)</title><rect x="15.3429%" y="1845" width="0.0161%" height="15" fill="rgb(217,118,1)" fg:x="20873988559" fg:w="21877174"/><text x="15.5929%" y="1855.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (30,111,573 samples, 0.02%)</title><rect x="15.3590%" y="1845" width="0.0221%" height="15" fill="rgb(232,180,48)" fg:x="20895865733" fg:w="30111573"/><text x="15.6090%" y="1855.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (17,182,895 samples, 0.01%)</title><rect x="15.3812%" y="1845" width="0.0126%" height="15" fill="rgb(230,27,33)" fg:x="20925977306" fg:w="17182895"/><text x="15.6312%" y="1855.50"></text></g><g><title>std::_Hash_bytes (170,945,827 samples, 0.13%)</title><rect x="15.4255%" y="1829" width="0.1256%" height="15" fill="rgb(205,31,21)" fg:x="20986247198" fg:w="170945827"/><text x="15.6755%" y="1839.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (318,062,323 samples, 0.23%)</title><rect x="15.3324%" y="1861" width="0.2338%" height="15" fill="rgb(253,59,4)" fg:x="20859631248" fg:w="318062323"/><text x="15.5824%" y="1871.50"></text></g><g><title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (225,668,924 samples, 0.17%)</title><rect x="15.4003%" y="1845" width="0.1659%" height="15" fill="rgb(224,201,9)" fg:x="20952024647" fg:w="225668924"/><text x="15.6503%" y="1855.50"></text></g><g><title>std::_Hash_impl::hash (20,500,546 samples, 0.02%)</title><rect x="15.5511%" y="1829" width="0.0151%" height="15" fill="rgb(229,206,30)" fg:x="21157193025" fg:w="20500546"/><text x="15.8011%" y="1839.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, false, true&gt;::_Node_iterator (48,034,621 samples, 0.04%)</title><rect x="15.5662%" y="1861" width="0.0353%" height="15" fill="rgb(212,67,47)" fg:x="21177693571" fg:w="48034621"/><text x="15.8162%" y="1871.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, true&gt;::_Node_iterator_base (22,211,140 samples, 0.02%)</title><rect x="15.5852%" y="1845" width="0.0163%" height="15" fill="rgb(211,96,50)" fg:x="21203517052" fg:w="22211140"/><text x="15.8352%" y="1855.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1,854,721,054 samples, 1.36%)</title><rect x="14.2504%" y="1877" width="1.3633%" height="15" fill="rgb(252,114,18)" fg:x="19387600408" fg:w="1854721054"/><text x="14.5004%" y="1887.50"></text></g><g><title>FileDescriptorCache::get_file_descriptor (3,381,609,757 samples, 2.49%)</title><rect x="13.1521%" y="1909" width="2.4856%" height="15" fill="rgb(223,58,37)" fg:x="17893377771" fg:w="3381609757"/><text x="13.4021%" y="1919.50">Fi..</text></g><g><title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::find (1,910,378,711 samples, 1.40%)</title><rect x="14.2335%" y="1893" width="1.4042%" height="15" fill="rgb(237,70,4)" fg:x="19364608817" fg:w="1910378711"/><text x="14.4835%" y="1903.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, false, true&gt;::_Node_iterator (26,041,037 samples, 0.02%)</title><rect x="15.6186%" y="1877" width="0.0191%" height="15" fill="rgb(244,85,46)" fg:x="21248946491" fg:w="26041037"/><text x="15.8686%" y="1887.50"></text></g><g><title>__GI___pthread_disable_asynccancel (14,509,723 samples, 0.01%)</title><rect x="15.6387%" y="1909" width="0.0107%" height="15" fill="rgb(223,39,52)" fg:x="21276405680" fg:w="14509723"/><text x="15.8887%" y="1919.50"></text></g><g><title>__GI___pthread_enable_asynccancel (31,994,531 samples, 0.02%)</title><rect x="15.6494%" y="1909" width="0.0235%" height="15" fill="rgb(218,200,14)" fg:x="21290915403" fg:w="31994531"/><text x="15.8994%" y="1919.50"></text></g><g><title>__asan::Allocator::Deallocate (18,506,296 samples, 0.01%)</title><rect x="15.6729%" y="1909" width="0.0136%" height="15" fill="rgb(208,171,16)" fg:x="21322909934" fg:w="18506296"/><text x="15.9229%" y="1919.50"></text></g><g><title>__asan::Allocator::QuarantineChunk (21,727,193 samples, 0.02%)</title><rect x="15.6865%" y="1909" width="0.0160%" height="15" fill="rgb(234,200,18)" fg:x="21341416230" fg:w="21727193"/><text x="15.9365%" y="1919.50"></text></g><g><title>__asan::GetMallocContextSize (49,922,168 samples, 0.04%)</title><rect x="15.7025%" y="1909" width="0.0367%" height="15" fill="rgb(228,45,11)" fg:x="21363143423" fg:w="49922168"/><text x="15.9525%" y="1919.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (28,393,021 samples, 0.02%)</title><rect x="15.7392%" y="1909" width="0.0209%" height="15" fill="rgb(237,182,11)" fg:x="21413065591" fg:w="28393021"/><text x="15.9892%" y="1919.50"></text></g><g><title>__asan::asan_delete (20,209,625 samples, 0.01%)</title><rect x="15.7601%" y="1909" width="0.0149%" height="15" fill="rgb(241,175,49)" fg:x="21441458612" fg:w="20209625"/><text x="16.0101%" y="1919.50"></text></g><g><title>__asan_region_is_poisoned (185,941,745 samples, 0.14%)</title><rect x="15.7749%" y="1909" width="0.1367%" height="15" fill="rgb(247,38,35)" fg:x="21461668237" fg:w="185941745"/><text x="16.0249%" y="1919.50"></text></g><g><title>__interceptor_memcpy (26,086,043 samples, 0.02%)</title><rect x="15.9203%" y="1909" width="0.0192%" height="15" fill="rgb(228,39,49)" fg:x="21659425401" fg:w="26086043"/><text x="16.1703%" y="1919.50"></text></g><g><title>__interceptor_pwrite.part.0 (55,378,161 samples, 0.04%)</title><rect x="15.9394%" y="1909" width="0.0407%" height="15" fill="rgb(226,101,26)" fg:x="21685511444" fg:w="55378161"/><text x="16.1894%" y="1919.50"></text></g><g><title>__x64_sys_pwrite64 (38,672,619 samples, 0.03%)</title><rect x="16.1923%" y="1877" width="0.0284%" height="15" fill="rgb(206,141,19)" fg:x="22029569628" fg:w="38672619"/><text x="16.4423%" y="1887.50"></text></g><g><title>__fdget (14,689,685 samples, 0.01%)</title><rect x="16.2707%" y="1861" width="0.0108%" height="15" fill="rgb(211,200,13)" fg:x="22136162470" fg:w="14689685"/><text x="16.5207%" y="1871.50"></text></g><g><title>__rcu_read_lock (16,925,516 samples, 0.01%)</title><rect x="16.5156%" y="1813" width="0.0124%" height="15" fill="rgb(241,121,6)" fg:x="22469342356" fg:w="16925516"/><text x="16.7656%" y="1823.50"></text></g><g><title>__fget_files (250,153,757 samples, 0.18%)</title><rect x="16.3458%" y="1829" width="0.1839%" height="15" fill="rgb(234,221,29)" fg:x="22238408828" fg:w="250153757"/><text x="16.5958%" y="1839.50"></text></g><g><title>__rcu_read_lock (20,038,804 samples, 0.01%)</title><rect x="16.5297%" y="1829" width="0.0147%" height="15" fill="rgb(229,136,5)" fg:x="22488562585" fg:w="20038804"/><text x="16.7797%" y="1839.50"></text></g><g><title>__fdget (311,848,326 samples, 0.23%)</title><rect x="16.3164%" y="1845" width="0.2292%" height="15" fill="rgb(238,36,11)" fg:x="22198325358" fg:w="311848326"/><text x="16.5664%" y="1855.50"></text></g><g><title>__fget_files (27,716,565 samples, 0.02%)</title><rect x="16.5456%" y="1845" width="0.0204%" height="15" fill="rgb(251,55,41)" fg:x="22510173684" fg:w="27716565"/><text x="16.7956%" y="1855.50"></text></g><g><title>fput (43,886,914 samples, 0.03%)</title><rect x="16.5816%" y="1845" width="0.0323%" height="15" fill="rgb(242,34,40)" fg:x="22559201316" fg:w="43886914"/><text x="16.8316%" y="1855.50"></text></g><g><title>__rcu_read_lock (18,301,524 samples, 0.01%)</title><rect x="17.0378%" y="1813" width="0.0135%" height="15" fill="rgb(215,42,17)" fg:x="23179815538" fg:w="18301524"/><text x="17.2878%" y="1823.50"></text></g><g><title>__rcu_read_unlock (31,976,319 samples, 0.02%)</title><rect x="17.0512%" y="1813" width="0.0235%" height="15" fill="rgb(207,44,46)" fg:x="23198117062" fg:w="31976319"/><text x="17.3012%" y="1823.50"></text></g><g><title>dget_parent (261,049,506 samples, 0.19%)</title><rect x="17.0939%" y="1813" width="0.1919%" height="15" fill="rgb(211,206,28)" fg:x="23256161514" fg:w="261049506"/><text x="17.3439%" y="1823.50"></text></g><g><title>lockref_get_not_zero (239,242,219 samples, 0.18%)</title><rect x="17.1099%" y="1797" width="0.1758%" height="15" fill="rgb(237,167,16)" fg:x="23277968801" fg:w="239242219"/><text x="17.3599%" y="1807.50"></text></g><g><title>dput (68,441,213 samples, 0.05%)</title><rect x="17.2858%" y="1813" width="0.0503%" height="15" fill="rgb(233,66,6)" fg:x="23517211020" fg:w="68441213"/><text x="17.5358%" y="1823.50"></text></g><g><title>lockref_put_return (56,493,184 samples, 0.04%)</title><rect x="17.2946%" y="1797" width="0.0415%" height="15" fill="rgb(246,123,29)" fg:x="23529159049" fg:w="56493184"/><text x="17.5446%" y="1807.50"></text></g><g><title>__srcu_read_lock (22,404,167 samples, 0.02%)</title><rect x="17.5600%" y="1797" width="0.0165%" height="15" fill="rgb(209,62,40)" fg:x="23890276752" fg:w="22404167"/><text x="17.8100%" y="1807.50"></text></g><g><title>__rcu_read_lock (35,665,504 samples, 0.03%)</title><rect x="18.1830%" y="1717" width="0.0262%" height="15" fill="rgb(218,4,25)" fg:x="24737914786" fg:w="35665504"/><text x="18.4330%" y="1727.50"></text></g><g><title>__get_obj_cgroup_from_memcg (33,784,096 samples, 0.02%)</title><rect x="18.2404%" y="1701" width="0.0248%" height="15" fill="rgb(253,91,49)" fg:x="24815943594" fg:w="33784096"/><text x="18.4904%" y="1711.50"></text></g><g><title>get_obj_cgroup_from_current (72,458,829 samples, 0.05%)</title><rect x="18.2191%" y="1717" width="0.0533%" height="15" fill="rgb(228,155,29)" fg:x="24786914191" fg:w="72458829"/><text x="18.4691%" y="1727.50"></text></g><g><title>memcg_slab_post_alloc_hook (218,289,757 samples, 0.16%)</title><rect x="18.2723%" y="1717" width="0.1604%" height="15" fill="rgb(243,57,37)" fg:x="24859373020" fg:w="218289757"/><text x="18.5223%" y="1727.50"></text></g><g><title>mod_objcg_state (76,351,989 samples, 0.06%)</title><rect x="18.3766%" y="1701" width="0.0561%" height="15" fill="rgb(244,167,17)" fg:x="25001310788" fg:w="76351989"/><text x="18.6266%" y="1711.50"></text></g><g><title>obj_cgroup_charge (41,844,636 samples, 0.03%)</title><rect x="18.4338%" y="1717" width="0.0308%" height="15" fill="rgb(207,181,38)" fg:x="25079108952" fg:w="41844636"/><text x="18.6838%" y="1727.50"></text></g><g><title>__kmem_cache_alloc_node (538,578,750 samples, 0.40%)</title><rect x="18.0693%" y="1733" width="0.3959%" height="15" fill="rgb(211,8,23)" fg:x="24583173237" fg:w="538578750"/><text x="18.3193%" y="1743.50"></text></g><g><title>get_obj_cgroup_from_current (15,034,202 samples, 0.01%)</title><rect x="18.4652%" y="1733" width="0.0111%" height="15" fill="rgb(235,11,44)" fg:x="25121751987" fg:w="15034202"/><text x="18.7152%" y="1743.50"></text></g><g><title>memset_orig (27,571,582 samples, 0.02%)</title><rect x="18.4938%" y="1733" width="0.0203%" height="15" fill="rgb(248,18,52)" fg:x="25160748746" fg:w="27571582"/><text x="18.7438%" y="1743.50"></text></g><g><title>obj_cgroup_charge (14,587,707 samples, 0.01%)</title><rect x="18.5141%" y="1733" width="0.0107%" height="15" fill="rgb(208,4,7)" fg:x="25188320328" fg:w="14587707"/><text x="18.7641%" y="1743.50"></text></g><g><title>__kmalloc (664,078,641 samples, 0.49%)</title><rect x="18.0415%" y="1749" width="0.4881%" height="15" fill="rgb(240,17,39)" fg:x="24545409130" fg:w="664078641"/><text x="18.2915%" y="1759.50"></text></g><g><title>__kmem_cache_free (15,911,868 samples, 0.01%)</title><rect x="18.5713%" y="1717" width="0.0117%" height="15" fill="rgb(207,170,3)" fg:x="25266206048" fg:w="15911868"/><text x="18.8213%" y="1727.50"></text></g><g><title>mod_objcg_state (19,953,400 samples, 0.01%)</title><rect x="18.7354%" y="1669" width="0.0147%" height="15" fill="rgb(236,100,52)" fg:x="25489334407" fg:w="19953400"/><text x="18.9854%" y="1679.50"></text></g><g><title>obj_cgroup_uncharge (91,531,614 samples, 0.07%)</title><rect x="18.7500%" y="1669" width="0.0673%" height="15" fill="rgb(246,78,51)" fg:x="25509287807" fg:w="91531614"/><text x="19.0000%" y="1679.50"></text></g><g><title>refill_obj_stock (87,779,282 samples, 0.06%)</title><rect x="18.7528%" y="1653" width="0.0645%" height="15" fill="rgb(211,17,15)" fg:x="25513040139" fg:w="87779282"/><text x="19.0028%" y="1663.50"></text></g><g><title>memcg_slab_free_hook (205,715,962 samples, 0.15%)</title><rect x="18.6763%" y="1685" width="0.1512%" height="15" fill="rgb(209,59,46)" fg:x="25408956940" fg:w="205715962"/><text x="18.9263%" y="1695.50"></text></g><g><title>refill_obj_stock (13,853,481 samples, 0.01%)</title><rect x="18.8173%" y="1669" width="0.0102%" height="15" fill="rgb(210,92,25)" fg:x="25600819421" fg:w="13853481"/><text x="19.0673%" y="1679.50"></text></g><g><title>__kmem_cache_free (316,351,740 samples, 0.23%)</title><rect x="18.6005%" y="1701" width="0.2325%" height="15" fill="rgb(238,174,52)" fg:x="25305854190" fg:w="316351740"/><text x="18.8505%" y="1711.50"></text></g><g><title>inotify_free_event (391,086,285 samples, 0.29%)</title><rect x="18.5647%" y="1733" width="0.2875%" height="15" fill="rgb(230,73,7)" fg:x="25257222225" fg:w="391086285"/><text x="18.8147%" y="1743.50"></text></g><g><title>kfree (366,190,594 samples, 0.27%)</title><rect x="18.5830%" y="1717" width="0.2692%" height="15" fill="rgb(243,124,40)" fg:x="25282117916" fg:w="366190594"/><text x="18.8330%" y="1727.50"></text></g><g><title>memcg_slab_free_hook (26,102,580 samples, 0.02%)</title><rect x="18.8330%" y="1701" width="0.0192%" height="15" fill="rgb(244,170,11)" fg:x="25622205930" fg:w="26102580"/><text x="19.0830%" y="1711.50"></text></g><g><title>fsnotify_destroy_event (421,473,416 samples, 0.31%)</title><rect x="18.5499%" y="1749" width="0.3098%" height="15" fill="rgb(207,114,54)" fg:x="25237093912" fg:w="421473416"/><text x="18.7999%" y="1759.50"></text></g><g><title>_raw_spin_lock (23,314,991 samples, 0.02%)</title><rect x="18.8945%" y="1733" width="0.0171%" height="15" fill="rgb(205,42,20)" fg:x="25705852517" fg:w="23314991"/><text x="19.1445%" y="1743.50"></text></g><g><title>inotify_merge (34,785,231 samples, 0.03%)</title><rect x="18.9122%" y="1733" width="0.0256%" height="15" fill="rgb(230,30,28)" fg:x="25729899991" fg:w="34785231"/><text x="19.1622%" y="1743.50"></text></g><g><title>strcmp (14,225,107 samples, 0.01%)</title><rect x="18.9273%" y="1717" width="0.0105%" height="15" fill="rgb(205,73,54)" fg:x="25750460115" fg:w="14225107"/><text x="19.1773%" y="1727.50"></text></g><g><title>fsnotify_insert_event (109,657,144 samples, 0.08%)</title><rect x="18.8597%" y="1749" width="0.0806%" height="15" fill="rgb(254,227,23)" fg:x="25658567328" fg:w="109657144"/><text x="19.1097%" y="1759.50"></text></g><g><title>inotify_handle_inode_event (1,415,922,351 samples, 1.04%)</title><rect x="17.9751%" y="1765" width="1.0407%" height="15" fill="rgb(228,202,34)" fg:x="24454960535" fg:w="1415922351"/><text x="18.2251%" y="1775.50"></text></g><g><title>strlen (92,254,770 samples, 0.07%)</title><rect x="18.9480%" y="1749" width="0.0678%" height="15" fill="rgb(222,225,37)" fg:x="25778628116" fg:w="92254770"/><text x="19.1980%" y="1759.50"></text></g><g><title>memcpy_orig (144,084,069 samples, 0.11%)</title><rect x="19.0229%" y="1765" width="0.1059%" height="15" fill="rgb(221,14,54)" fg:x="25880561741" fg:w="144084069"/><text x="19.2729%" y="1775.50"></text></g><g><title>fsnotify_handle_inode_event (1,638,167,550 samples, 1.20%)</title><rect x="17.9401%" y="1781" width="1.2041%" height="15" fill="rgb(254,102,2)" fg:x="24407412121" fg:w="1638167550"/><text x="18.1901%" y="1791.50"></text></g><g><title>strlen (20,933,861 samples, 0.02%)</title><rect x="19.1288%" y="1765" width="0.0154%" height="15" fill="rgb(232,104,17)" fg:x="26024645810" fg:w="20933861"/><text x="19.3788%" y="1775.50"></text></g><g><title>fsnotify (2,469,487,578 samples, 1.82%)</title><rect x="17.3361%" y="1813" width="1.8151%" height="15" fill="rgb(250,220,14)" fg:x="23585652233" fg:w="2469487578"/><text x="17.5861%" y="1823.50">f..</text></g><g><title>send_to_group (2,124,369,289 samples, 1.56%)</title><rect x="17.5898%" y="1797" width="1.5615%" height="15" fill="rgb(241,158,9)" fg:x="23930770522" fg:w="2124369289"/><text x="17.8398%" y="1807.50"></text></g><g><title>release_dentry_name_snapshot (23,607,161 samples, 0.02%)</title><rect x="19.1635%" y="1813" width="0.0174%" height="15" fill="rgb(246,9,43)" fg:x="26071795449" fg:w="23607161"/><text x="19.4135%" y="1823.50"></text></g><g><title>_raw_spin_lock (318,517,854 samples, 0.23%)</title><rect x="19.2238%" y="1797" width="0.2341%" height="15" fill="rgb(206,73,33)" fg:x="26153886284" fg:w="318517854"/><text x="19.4738%" y="1807.50"></text></g><g><title>__fsnotify_parent (3,382,866,944 samples, 2.49%)</title><rect x="16.9719%" y="1829" width="2.4865%" height="15" fill="rgb(222,79,8)" fg:x="23090223152" fg:w="3382866944"/><text x="17.2219%" y="1839.50">__..</text></g><g><title>take_dentry_name_snapshot (365,085,533 samples, 0.27%)</title><rect x="19.1901%" y="1813" width="0.2683%" height="15" fill="rgb(234,8,54)" fg:x="26108004563" fg:w="365085533"/><text x="19.4401%" y="1823.50"></text></g><g><title>__cond_resched (14,398,979 samples, 0.01%)</title><rect x="19.6009%" y="1797" width="0.0106%" height="15" fill="rgb(209,134,38)" fg:x="26666976560" fg:w="14398979"/><text x="19.8509%" y="1807.50"></text></g><g><title>__x86_indirect_thunk_r11 (56,943,171 samples, 0.04%)</title><rect x="19.6115%" y="1797" width="0.0419%" height="15" fill="rgb(230,127,29)" fg:x="26681375539" fg:w="56943171"/><text x="19.8615%" y="1807.50"></text></g><g><title>balance_dirty_pages_ratelimited (51,959,928 samples, 0.04%)</title><rect x="19.6539%" y="1797" width="0.0382%" height="15" fill="rgb(242,44,41)" fg:x="26739074529" fg:w="51959928"/><text x="19.9039%" y="1807.50"></text></g><g><title>copy_page_from_iter_atomic (24,097,545 samples, 0.02%)</title><rect x="19.6921%" y="1797" width="0.0177%" height="15" fill="rgb(222,56,43)" fg:x="26791034457" fg:w="24097545"/><text x="19.9421%" y="1807.50"></text></g><g><title>__sysvec_apic_timer_interrupt (15,048,540 samples, 0.01%)</title><rect x="29.8294%" y="1717" width="0.0111%" height="15" fill="rgb(238,39,47)" fg:x="40582692896" fg:w="15048540"/><text x="30.0794%" y="1727.50"></text></g><g><title>hrtimer_interrupt (15,048,540 samples, 0.01%)</title><rect x="29.8294%" y="1701" width="0.0111%" height="15" fill="rgb(226,79,43)" fg:x="40582692896" fg:w="15048540"/><text x="30.0794%" y="1711.50"></text></g><g><title>rwsem_down_write_slowpath (13,753,842,646 samples, 10.11%)</title><rect x="19.7345%" y="1781" width="10.1094%" height="15" fill="rgb(242,105,53)" fg:x="26848674658" fg:w="13753842646"/><text x="19.9845%" y="1791.50">rwsem_down_writ..</text></g><g><title>rwsem_spin_on_owner (13,712,532,197 samples, 10.08%)</title><rect x="19.7649%" y="1765" width="10.0791%" height="15" fill="rgb(251,132,46)" fg:x="26889985107" fg:w="13712532197"/><text x="20.0149%" y="1775.50">rwsem_spin_on_o..</text></g><g><title>asm_sysvec_apic_timer_interrupt (19,824,408 samples, 0.01%)</title><rect x="29.8294%" y="1749" width="0.0146%" height="15" fill="rgb(231,77,14)" fg:x="40582692896" fg:w="19824408"/><text x="30.0794%" y="1759.50"></text></g><g><title>sysvec_apic_timer_interrupt (19,824,408 samples, 0.01%)</title><rect x="29.8294%" y="1733" width="0.0146%" height="15" fill="rgb(240,135,9)" fg:x="40582692896" fg:w="19824408"/><text x="30.0794%" y="1743.50"></text></g><g><title>down_write (13,788,799,721 samples, 10.14%)</title><rect x="19.7098%" y="1797" width="10.1351%" height="15" fill="rgb(248,109,14)" fg:x="26815132002" fg:w="13788799721"/><text x="19.9598%" y="1807.50">down_write</text></g><g><title>ext4_da_write_begin (317,204,736 samples, 0.23%)</title><rect x="29.8450%" y="1797" width="0.2332%" height="15" fill="rgb(227,146,52)" fg:x="40603931723" fg:w="317204736"/><text x="30.0950%" y="1807.50"></text></g><g><title>ext4_da_write_end (311,748,546 samples, 0.23%)</title><rect x="30.0781%" y="1797" width="0.2291%" height="15" fill="rgb(232,54,3)" fg:x="40921136459" fg:w="311748546"/><text x="30.3281%" y="1807.50"></text></g><g><title>fault_in_iov_iter_readable (46,682,344 samples, 0.03%)</title><rect x="30.3073%" y="1797" width="0.0343%" height="15" fill="rgb(229,201,43)" fg:x="41232885005" fg:w="46682344"/><text x="30.5573%" y="1807.50"></text></g><g><title>__file_remove_privs (20,944,244 samples, 0.02%)</title><rect x="30.3492%" y="1781" width="0.0154%" height="15" fill="rgb(252,161,33)" fg:x="41289925941" fg:w="20944244"/><text x="30.5992%" y="1791.50"></text></g><g><title>__file_remove_privs (27,309,093 samples, 0.02%)</title><rect x="30.4094%" y="1765" width="0.0201%" height="15" fill="rgb(226,146,40)" fg:x="41371803529" fg:w="27309093"/><text x="30.6594%" y="1775.50"></text></g><g><title>__mark_inode_dirty (24,488,176 samples, 0.02%)</title><rect x="30.4295%" y="1765" width="0.0180%" height="15" fill="rgb(219,47,25)" fg:x="41399112622" fg:w="24488176"/><text x="30.6795%" y="1775.50"></text></g><g><title>ext4_dirty_inode (24,488,176 samples, 0.02%)</title><rect x="30.4295%" y="1749" width="0.0180%" height="15" fill="rgb(250,135,13)" fg:x="41399112622" fg:w="24488176"/><text x="30.6795%" y="1759.50"></text></g><g><title>__ext4_mark_inode_dirty (20,671,927 samples, 0.02%)</title><rect x="30.4323%" y="1733" width="0.0152%" height="15" fill="rgb(219,229,18)" fg:x="41402928871" fg:w="20671927"/><text x="30.6823%" y="1743.50"></text></g><g><title>inode_needs_update_time (54,793,544 samples, 0.04%)</title><rect x="30.4475%" y="1765" width="0.0403%" height="15" fill="rgb(217,152,27)" fg:x="41423600798" fg:w="54793544"/><text x="30.6975%" y="1775.50"></text></g><g><title>file_modified_flags (181,558,375 samples, 0.13%)</title><rect x="30.3646%" y="1781" width="0.1335%" height="15" fill="rgb(225,71,47)" fg:x="41310870185" fg:w="181558375"/><text x="30.6146%" y="1791.50"></text></g><g><title>file_modified (225,560,341 samples, 0.17%)</title><rect x="30.3416%" y="1797" width="0.1658%" height="15" fill="rgb(220,139,14)" fg:x="41279567349" fg:w="225560341"/><text x="30.5916%" y="1807.50"></text></g><g><title>__cond_resched (30,009,121 samples, 0.02%)</title><rect x="31.0270%" y="1781" width="0.0221%" height="15" fill="rgb(247,54,32)" fg:x="42212094258" fg:w="30009121"/><text x="31.2770%" y="1791.50"></text></g><g><title>__filemap_get_folio (52,816,493 samples, 0.04%)</title><rect x="31.0491%" y="1781" width="0.0388%" height="15" fill="rgb(252,131,39)" fg:x="42242103379" fg:w="52816493"/><text x="31.2991%" y="1791.50"></text></g><g><title>__rcu_read_lock (83,340,408 samples, 0.06%)</title><rect x="31.0996%" y="1765" width="0.0613%" height="15" fill="rgb(210,108,39)" fg:x="42310808083" fg:w="83340408"/><text x="31.3496%" y="1775.50"></text></g><g><title>__rcu_read_unlock (59,983,009 samples, 0.04%)</title><rect x="31.1608%" y="1765" width="0.0441%" height="15" fill="rgb(205,23,29)" fg:x="42394148491" fg:w="59983009"/><text x="31.4108%" y="1775.50"></text></g><g><title>__rcu_read_lock (112,792,622 samples, 0.08%)</title><rect x="31.7631%" y="1749" width="0.0829%" height="15" fill="rgb(246,139,46)" fg:x="43213472932" fg:w="112792622"/><text x="32.0131%" y="1759.50"></text></g><g><title>__rcu_read_unlock (82,354,425 samples, 0.06%)</title><rect x="31.8460%" y="1749" width="0.0605%" height="15" fill="rgb(250,81,26)" fg:x="43326265554" fg:w="82354425"/><text x="32.0960%" y="1759.50"></text></g><g><title>inode_to_bdi (54,302,514 samples, 0.04%)</title><rect x="31.9065%" y="1749" width="0.0399%" height="15" fill="rgb(214,104,7)" fg:x="43408619979" fg:w="54302514"/><text x="32.1565%" y="1759.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (1,456,124,587 samples, 1.07%)</title><rect x="31.2049%" y="1765" width="1.0703%" height="15" fill="rgb(233,189,8)" fg:x="42454131500" fg:w="1456124587"/><text x="31.4549%" y="1775.50"></text></g><g><title>radix_tree_lookup (447,333,594 samples, 0.33%)</title><rect x="31.9464%" y="1749" width="0.3288%" height="15" fill="rgb(228,141,17)" fg:x="43462922493" fg:w="447333594"/><text x="32.1964%" y="1759.50"></text></g><g><title>inode_to_bdi (69,663,624 samples, 0.05%)</title><rect x="32.2752%" y="1765" width="0.0512%" height="15" fill="rgb(247,157,1)" fg:x="43910256087" fg:w="69663624"/><text x="32.5252%" y="1775.50"></text></g><g><title>balance_dirty_pages_ratelimited (1,709,127,641 samples, 1.26%)</title><rect x="31.0896%" y="1781" width="1.2563%" height="15" fill="rgb(249,225,5)" fg:x="42297221714" fg:w="1709127641"/><text x="31.3396%" y="1791.50"></text></g><g><title>radix_tree_lookup (26,429,644 samples, 0.02%)</title><rect x="32.3264%" y="1765" width="0.0194%" height="15" fill="rgb(242,55,13)" fg:x="43979919711" fg:w="26429644"/><text x="32.5764%" y="1775.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (42,466,571 samples, 0.03%)</title><rect x="32.3459%" y="1781" width="0.0312%" height="15" fill="rgb(230,49,50)" fg:x="44006349355" fg:w="42466571"/><text x="32.5959%" y="1791.50"></text></g><g><title>copy_page_from_iter_atomic (1,284,729,632 samples, 0.94%)</title><rect x="32.3771%" y="1781" width="0.9443%" height="15" fill="rgb(241,111,38)" fg:x="44048815926" fg:w="1284729632"/><text x="32.6271%" y="1791.50"></text></g><g><title>ext4_block_write_begin (22,215,082 samples, 0.02%)</title><rect x="33.3220%" y="1781" width="0.0163%" height="15" fill="rgb(252,155,4)" fg:x="45334342670" fg:w="22215082"/><text x="33.5720%" y="1791.50"></text></g><g><title>ext4_da_do_write_end (77,074,405 samples, 0.06%)</title><rect x="33.3383%" y="1781" width="0.0567%" height="15" fill="rgb(212,69,32)" fg:x="45356557752" fg:w="77074405"/><text x="33.5883%" y="1791.50"></text></g><g><title>__cond_resched (16,592,008 samples, 0.01%)</title><rect x="33.9022%" y="1765" width="0.0122%" height="15" fill="rgb(243,107,47)" fg:x="46123713143" fg:w="16592008"/><text x="34.1522%" y="1775.50"></text></g><g><title>__cond_resched (86,779,306 samples, 0.06%)</title><rect x="34.1883%" y="1749" width="0.0638%" height="15" fill="rgb(247,130,12)" fg:x="46513042034" fg:w="86779306"/><text x="34.4383%" y="1759.50"></text></g><g><title>__rcu_read_lock (86,978,396 samples, 0.06%)</title><rect x="34.2521%" y="1749" width="0.0639%" height="15" fill="rgb(233,74,16)" fg:x="46599821340" fg:w="86978396"/><text x="34.5021%" y="1759.50"></text></g><g><title>__rcu_read_lock (55,076,524 samples, 0.04%)</title><rect x="35.2320%" y="1733" width="0.0405%" height="15" fill="rgb(208,58,18)" fg:x="47932995011" fg:w="55076524"/><text x="35.4820%" y="1743.50"></text></g><g><title>__rcu_read_unlock (19,714,195 samples, 0.01%)</title><rect x="35.2725%" y="1733" width="0.0145%" height="15" fill="rgb(242,225,1)" fg:x="47988071535" fg:w="19714195"/><text x="35.5225%" y="1743.50"></text></g><g><title>xas_load (699,043,858 samples, 0.51%)</title><rect x="35.2881%" y="1733" width="0.5138%" height="15" fill="rgb(249,39,40)" fg:x="48009311580" fg:w="699043858"/><text x="35.5381%" y="1743.50"></text></g><g><title>xas_start (198,351,948 samples, 0.15%)</title><rect x="35.6562%" y="1717" width="0.1458%" height="15" fill="rgb(207,72,44)" fg:x="48510003490" fg:w="198351948"/><text x="35.9062%" y="1727.50"></text></g><g><title>filemap_get_entry (2,031,228,493 samples, 1.49%)</title><rect x="34.3194%" y="1749" width="1.4930%" height="15" fill="rgb(215,193,12)" fg:x="46691307924" fg:w="2031228493"/><text x="34.5694%" y="1759.50"></text></g><g><title>xas_start (14,180,979 samples, 0.01%)</title><rect x="35.8020%" y="1733" width="0.0104%" height="15" fill="rgb(248,41,39)" fg:x="48708355438" fg:w="14180979"/><text x="36.0520%" y="1743.50"></text></g><g><title>folio_mapping (36,594,303 samples, 0.03%)</title><rect x="35.8124%" y="1749" width="0.0269%" height="15" fill="rgb(253,85,4)" fg:x="48722536417" fg:w="36594303"/><text x="36.0624%" y="1759.50"></text></g><g><title>folio_wait_stable (67,909,074 samples, 0.05%)</title><rect x="35.8393%" y="1749" width="0.0499%" height="15" fill="rgb(243,70,31)" fg:x="48759130720" fg:w="67909074"/><text x="36.0893%" y="1759.50"></text></g><g><title>folio_mapping (35,279,533 samples, 0.03%)</title><rect x="35.8633%" y="1733" width="0.0259%" height="15" fill="rgb(253,195,26)" fg:x="48791760261" fg:w="35279533"/><text x="36.1133%" y="1743.50"></text></g><g><title>__filemap_get_folio (2,720,388,949 samples, 2.00%)</title><rect x="33.9144%" y="1765" width="1.9996%" height="15" fill="rgb(243,42,11)" fg:x="46140305151" fg:w="2720388949"/><text x="34.1644%" y="1775.50">_..</text></g><g><title>xas_load (33,654,306 samples, 0.02%)</title><rect x="35.8892%" y="1749" width="0.0247%" height="15" fill="rgb(239,66,17)" fg:x="48827039794" fg:w="33654306"/><text x="36.1392%" y="1759.50"></text></g><g><title>ext4_block_write_begin (1,045,904,723 samples, 0.77%)</title><rect x="35.9145%" y="1765" width="0.7688%" height="15" fill="rgb(217,132,21)" fg:x="48861477153" fg:w="1045904723"/><text x="36.1645%" y="1775.50"></text></g><g><title>filemap_get_entry (62,205,910 samples, 0.05%)</title><rect x="36.6833%" y="1765" width="0.0457%" height="15" fill="rgb(252,202,21)" fg:x="49907381876" fg:w="62205910"/><text x="36.9333%" y="1775.50"></text></g><g><title>folio_mapping (14,216,261 samples, 0.01%)</title><rect x="36.7290%" y="1765" width="0.0104%" height="15" fill="rgb(233,98,36)" fg:x="49969587786" fg:w="14216261"/><text x="36.9790%" y="1775.50"></text></g><g><title>ext4_da_write_begin (4,617,841,210 samples, 3.39%)</title><rect x="33.3949%" y="1781" width="3.3942%" height="15" fill="rgb(216,153,54)" fg:x="45433632157" fg:w="4617841210"/><text x="33.6449%" y="1791.50">ext..</text></g><g><title>folio_wait_stable (67,669,320 samples, 0.05%)</title><rect x="36.7394%" y="1765" width="0.0497%" height="15" fill="rgb(250,99,7)" fg:x="49983804047" fg:w="67669320"/><text x="36.9894%" y="1775.50"></text></g><g><title>folio_mapping (19,438,470 samples, 0.01%)</title><rect x="36.7749%" y="1749" width="0.0143%" height="15" fill="rgb(207,56,50)" fg:x="50032034897" fg:w="19438470"/><text x="37.0249%" y="1759.50"></text></g><g><title>block_write_end (42,947,861 samples, 0.03%)</title><rect x="36.9889%" y="1765" width="0.0316%" height="15" fill="rgb(244,61,34)" fg:x="50323121080" fg:w="42947861"/><text x="37.2389%" y="1775.50"></text></g><g><title>__block_commit_write (39,839,269 samples, 0.03%)</title><rect x="37.4246%" y="1749" width="0.0293%" height="15" fill="rgb(241,50,38)" fg:x="50915974854" fg:w="39839269"/><text x="37.6746%" y="1759.50"></text></g><g><title>__block_commit_write (862,974,956 samples, 0.63%)</title><rect x="37.5140%" y="1733" width="0.6343%" height="15" fill="rgb(212,166,30)" fg:x="51037605265" fg:w="862974956"/><text x="37.7640%" y="1743.50"></text></g><g><title>mark_buffer_dirty (218,304,452 samples, 0.16%)</title><rect x="37.9879%" y="1717" width="0.1605%" height="15" fill="rgb(249,127,32)" fg:x="51682275769" fg:w="218304452"/><text x="38.2379%" y="1727.50"></text></g><g><title>block_write_end (965,814,785 samples, 0.71%)</title><rect x="37.4545%" y="1749" width="0.7099%" height="15" fill="rgb(209,103,0)" fg:x="50956614127" fg:w="965814785"/><text x="37.7045%" y="1759.50"></text></g><g><title>mark_buffer_dirty (21,848,691 samples, 0.02%)</title><rect x="38.1483%" y="1733" width="0.0161%" height="15" fill="rgb(238,209,51)" fg:x="51900580221" fg:w="21848691"/><text x="38.3983%" y="1743.50"></text></g><g><title>folio_unlock (23,998,912 samples, 0.02%)</title><rect x="38.1644%" y="1749" width="0.0176%" height="15" fill="rgb(237,56,23)" fg:x="51922428912" fg:w="23998912"/><text x="38.4144%" y="1759.50"></text></g><g><title>ext4_da_do_write_end (1,756,790,708 samples, 1.29%)</title><rect x="37.0204%" y="1765" width="1.2913%" height="15" fill="rgb(215,153,46)" fg:x="50366068941" fg:w="1756790708"/><text x="37.2704%" y="1775.50"></text></g><g><title>unlock_page (176,431,825 samples, 0.13%)</title><rect x="38.1820%" y="1749" width="0.1297%" height="15" fill="rgb(224,49,31)" fg:x="51946427824" fg:w="176431825"/><text x="38.4320%" y="1759.50"></text></g><g><title>folio_unlock (169,734,181 samples, 0.12%)</title><rect x="38.1870%" y="1733" width="0.1248%" height="15" fill="rgb(250,18,42)" fg:x="51953125468" fg:w="169734181"/><text x="38.4370%" y="1743.50"></text></g><g><title>ext4_da_write_end (2,108,116,493 samples, 1.55%)</title><rect x="36.7892%" y="1781" width="1.5495%" height="15" fill="rgb(215,176,39)" fg:x="50051473367" fg:w="2108116493"/><text x="37.0392%" y="1791.50"></text></g><g><title>unlock_page (36,730,211 samples, 0.03%)</title><rect x="38.3117%" y="1765" width="0.0270%" height="15" fill="rgb(223,77,29)" fg:x="52122859649" fg:w="36730211"/><text x="38.5617%" y="1775.50"></text></g><g><title>fault_in_iov_iter_readable (1,976,534,376 samples, 1.45%)</title><rect x="38.3387%" y="1781" width="1.4528%" height="15" fill="rgb(234,94,52)" fg:x="52159589860" fg:w="1976534376"/><text x="38.5887%" y="1791.50"></text></g><g><title>fault_in_readable (1,871,442,650 samples, 1.38%)</title><rect x="38.4160%" y="1765" width="1.3756%" height="15" fill="rgb(220,154,50)" fg:x="52264681586" fg:w="1871442650"/><text x="38.6660%" y="1775.50"></text></g><g><title>fault_in_readable (126,186,634 samples, 0.09%)</title><rect x="39.7915%" y="1781" width="0.0928%" height="15" fill="rgb(212,11,10)" fg:x="54136124236" fg:w="126186634"/><text x="40.0415%" y="1791.50"></text></g><g><title>folio_wait_stable (23,869,042 samples, 0.02%)</title><rect x="39.8843%" y="1781" width="0.0175%" height="15" fill="rgb(205,166,19)" fg:x="54262310870" fg:w="23869042"/><text x="40.1343%" y="1791.50"></text></g><g><title>generic_perform_write (23,137,871,769 samples, 17.01%)</title><rect x="30.5149%" y="1797" width="17.0070%" height="15" fill="rgb(244,198,16)" fg:x="41515372770" fg:w="23137871769"/><text x="30.7649%" y="1807.50">generic_perform_write</text></g><g><title>rep_movs_alternative (10,367,064,627 samples, 7.62%)</title><rect x="39.9018%" y="1781" width="7.6201%" height="15" fill="rgb(219,69,12)" fg:x="54286179912" fg:w="10367064627"/><text x="40.1518%" y="1791.50">rep_movs_a..</text></g><g><title>generic_write_checks (103,575,443 samples, 0.08%)</title><rect x="47.5219%" y="1797" width="0.0761%" height="15" fill="rgb(245,30,7)" fg:x="64653244539" fg:w="103575443"/><text x="47.7719%" y="1807.50"></text></g><g><title>generic_write_checks_count (87,170,032 samples, 0.06%)</title><rect x="47.5339%" y="1781" width="0.0641%" height="15" fill="rgb(218,221,48)" fg:x="64669649950" fg:w="87170032"/><text x="47.7839%" y="1791.50"></text></g><g><title>generic_write_checks_count (19,136,706 samples, 0.01%)</title><rect x="47.5980%" y="1797" width="0.0141%" height="15" fill="rgb(216,66,15)" fg:x="64756819982" fg:w="19136706"/><text x="47.8480%" y="1807.50"></text></g><g><title>ext4_buffered_write_iter (38,267,755,352 samples, 28.13%)</title><rect x="19.5247%" y="1813" width="28.1278%" height="15" fill="rgb(226,122,50)" fg:x="26563260956" fg:w="38267755352"/><text x="19.7747%" y="1823.50">ext4_buffered_write_iter</text></g><g><title>up_write (50,546,082 samples, 0.04%)</title><rect x="47.6154%" y="1797" width="0.0372%" height="15" fill="rgb(239,156,16)" fg:x="64780470226" fg:w="50546082"/><text x="47.8654%" y="1807.50"></text></g><g><title>generic_perform_write (20,725,536 samples, 0.02%)</title><rect x="47.6624%" y="1813" width="0.0152%" height="15" fill="rgb(224,27,38)" fg:x="64844421858" fg:w="20725536"/><text x="47.9124%" y="1823.50"></text></g><g><title>generic_write_checks (14,831,960 samples, 0.01%)</title><rect x="47.6776%" y="1813" width="0.0109%" height="15" fill="rgb(224,39,27)" fg:x="64865147394" fg:w="14831960"/><text x="47.9276%" y="1823.50"></text></g><g><title>ext4_file_write_iter (38,423,276,229 samples, 28.24%)</title><rect x="19.4912%" y="1829" width="28.2421%" height="15" fill="rgb(215,92,29)" fg:x="26517687211" fg:w="38423276229"/><text x="19.7412%" y="1839.50">ext4_file_write_iter</text></g><g><title>up_write (60,984,086 samples, 0.04%)</title><rect x="47.6885%" y="1813" width="0.0448%" height="15" fill="rgb(207,159,16)" fg:x="64879979354" fg:w="60984086"/><text x="47.9385%" y="1823.50"></text></g><g><title>aa_file_perm (24,521,090 samples, 0.02%)</title><rect x="47.7852%" y="1797" width="0.0180%" height="15" fill="rgb(238,163,47)" fg:x="65011529164" fg:w="24521090"/><text x="48.0352%" y="1807.50"></text></g><g><title>apparmor_file_permission (185,351,294 samples, 0.14%)</title><rect x="47.7799%" y="1813" width="0.1362%" height="15" fill="rgb(219,91,49)" fg:x="65004271527" fg:w="185351294"/><text x="48.0299%" y="1823.50"></text></g><g><title>common_file_perm (153,572,567 samples, 0.11%)</title><rect x="47.8033%" y="1797" width="0.1129%" height="15" fill="rgb(227,167,31)" fg:x="65036050254" fg:w="153572567"/><text x="48.0533%" y="1807.50"></text></g><g><title>aa_file_perm (37,650,955 samples, 0.03%)</title><rect x="47.8885%" y="1781" width="0.0277%" height="15" fill="rgb(234,80,54)" fg:x="65151971866" fg:w="37650955"/><text x="48.1385%" y="1791.50"></text></g><g><title>security_file_permission (246,013,147 samples, 0.18%)</title><rect x="47.7508%" y="1829" width="0.1808%" height="15" fill="rgb(212,114,2)" fg:x="64964649914" fg:w="246013147"/><text x="48.0008%" y="1839.50"></text></g><g><title>__x64_sys_pwrite64 (43,067,189,044 samples, 31.66%)</title><rect x="16.2815%" y="1861" width="31.6555%" height="15" fill="rgb(234,50,24)" fg:x="22150852155" fg:w="43067189044"/><text x="16.5315%" y="1871.50">__x64_sys_pwrite64</text></g><g><title>vfs_write (42,605,096,364 samples, 31.32%)</title><rect x="16.6211%" y="1845" width="31.3159%" height="15" fill="rgb(221,68,8)" fg:x="22612944835" fg:w="42605096364"/><text x="16.8711%" y="1855.50">vfs_write</text></g><g><title>amd_clear_divider (20,588,840 samples, 0.02%)</title><rect x="47.9370%" y="1861" width="0.0151%" height="15" fill="rgb(254,180,31)" fg:x="65218041199" fg:w="20588840"/><text x="48.1870%" y="1871.50"></text></g><g><title>__audit_syscall_entry (80,009,229 samples, 0.06%)</title><rect x="48.0340%" y="1845" width="0.0588%" height="15" fill="rgb(247,130,50)" fg:x="65350017400" fg:w="80009229"/><text x="48.2840%" y="1855.50"></text></g><g><title>ktime_get_coarse_real_ts64 (20,688,616 samples, 0.02%)</title><rect x="48.0776%" y="1829" width="0.0152%" height="15" fill="rgb(211,109,4)" fg:x="65409338013" fg:w="20688616"/><text x="48.3276%" y="1839.50"></text></g><g><title>syscall_enter_from_user_mode (185,746,317 samples, 0.14%)</title><rect x="47.9656%" y="1861" width="0.1365%" height="15" fill="rgb(238,50,21)" fg:x="65256921629" fg:w="185746317"/><text x="48.2156%" y="1871.50"></text></g><g><title>__audit_syscall_exit (22,248,228 samples, 0.02%)</title><rect x="48.1374%" y="1845" width="0.0164%" height="15" fill="rgb(225,57,45)" fg:x="65490671109" fg:w="22248228"/><text x="48.3874%" y="1855.50"></text></g><g><title>exit_to_user_mode_prepare (73,230,231 samples, 0.05%)</title><rect x="48.1559%" y="1845" width="0.0538%" height="15" fill="rgb(209,196,50)" fg:x="65515856853" fg:w="73230231"/><text x="48.4059%" y="1855.50"></text></g><g><title>fpregs_assert_state_consistent (42,960,207 samples, 0.03%)</title><rect x="48.1782%" y="1829" width="0.0316%" height="15" fill="rgb(242,140,13)" fg:x="65546126877" fg:w="42960207"/><text x="48.4282%" y="1839.50"></text></g><g><title>__audit_syscall_exit (56,872,209 samples, 0.04%)</title><rect x="48.2589%" y="1829" width="0.0418%" height="15" fill="rgb(217,111,7)" fg:x="65655908762" fg:w="56872209"/><text x="48.5089%" y="1839.50"></text></g><g><title>audit_reset_context (19,825,922 samples, 0.01%)</title><rect x="48.2861%" y="1813" width="0.0146%" height="15" fill="rgb(253,193,51)" fg:x="65692955049" fg:w="19825922"/><text x="48.5361%" y="1823.50"></text></g><g><title>syscall_exit_to_user_mode (285,040,270 samples, 0.21%)</title><rect x="48.1021%" y="1861" width="0.2095%" height="15" fill="rgb(252,70,29)" fg:x="65442667946" fg:w="285040270"/><text x="48.3521%" y="1871.50"></text></g><g><title>syscall_exit_work (125,867,931 samples, 0.09%)</title><rect x="48.2191%" y="1845" width="0.0925%" height="15" fill="rgb(232,127,12)" fg:x="65601840285" fg:w="125867931"/><text x="48.4691%" y="1855.50"></text></g><g><title>audit_reset_context (14,927,245 samples, 0.01%)</title><rect x="48.3007%" y="1829" width="0.0110%" height="15" fill="rgb(211,180,21)" fg:x="65712780971" fg:w="14927245"/><text x="48.5507%" y="1839.50"></text></g><g><title>syscall_exit_work (20,866,147 samples, 0.02%)</title><rect x="48.3116%" y="1861" width="0.0153%" height="15" fill="rgb(229,72,13)" fg:x="65727708216" fg:w="20866147"/><text x="48.5616%" y="1871.50"></text></g><g><title>do_syscall_64 (43,681,124,654 samples, 32.11%)</title><rect x="16.2290%" y="1877" width="32.1068%" height="15" fill="rgb(240,211,49)" fg:x="22079498025" fg:w="43681124654"/><text x="16.4790%" y="1887.50">do_syscall_64</text></g><g><title>entry_SYSCALL_64 (43,919,988,046 samples, 32.28%)</title><rect x="16.0711%" y="1893" width="32.2824%" height="15" fill="rgb(219,149,40)" fg:x="21864577282" fg:w="43919988046"/><text x="16.3211%" y="1903.50">entry_SYSCALL_64</text></g><g><title>entry_ibpb (721,198,359 samples, 0.53%)</title><rect x="48.3534%" y="1893" width="0.5301%" height="15" fill="rgb(210,127,46)" fg:x="65784565328" fg:w="721198359"/><text x="48.6034%" y="1903.50"></text></g><g><title>__libc_pwrite (44,794,092,782 samples, 32.92%)</title><rect x="15.9801%" y="1909" width="32.9249%" height="15" fill="rgb(220,106,7)" fg:x="21740889605" fg:w="44794092782"/><text x="16.2301%" y="1919.50">__libc_pwrite</text></g><g><title>syscall_return_via_sysret (28,452,604 samples, 0.02%)</title><rect x="48.8841%" y="1893" width="0.0209%" height="15" fill="rgb(249,31,22)" fg:x="66506529783" fg:w="28452604"/><text x="49.1341%" y="1903.50"></text></g><g><title>__hrtimer_run_queues (18,635,134 samples, 0.01%)</title><rect x="61.2941%" y="1829" width="0.0137%" height="15" fill="rgb(253,1,49)" fg:x="83390221439" fg:w="18635134"/><text x="61.5441%" y="1839.50"></text></g><g><title>__run_hrtimer (18,635,134 samples, 0.01%)</title><rect x="61.2941%" y="1813" width="0.0137%" height="15" fill="rgb(227,144,33)" fg:x="83390221439" fg:w="18635134"/><text x="61.5441%" y="1823.50"></text></g><g><title>tick_sched_timer (16,414,241 samples, 0.01%)</title><rect x="61.2957%" y="1797" width="0.0121%" height="15" fill="rgb(249,163,44)" fg:x="83392442332" fg:w="16414241"/><text x="61.5457%" y="1807.50"></text></g><g><title>hrtimer_interrupt (20,230,300 samples, 0.01%)</title><rect x="61.2941%" y="1845" width="0.0149%" height="15" fill="rgb(234,15,39)" fg:x="83390221439" fg:w="20230300"/><text x="61.5441%" y="1855.50"></text></g><g><title>__sysvec_apic_timer_interrupt (21,751,495 samples, 0.02%)</title><rect x="61.2935%" y="1861" width="0.0160%" height="15" fill="rgb(207,66,16)" fg:x="83389492925" fg:w="21751495"/><text x="61.5435%" y="1871.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (24,935,433 samples, 0.02%)</title><rect x="61.2935%" y="1893" width="0.0183%" height="15" fill="rgb(233,112,24)" fg:x="83389492925" fg:w="24935433"/><text x="61.5435%" y="1903.50"></text></g><g><title>sysvec_apic_timer_interrupt (24,935,433 samples, 0.02%)</title><rect x="61.2935%" y="1877" width="0.0183%" height="15" fill="rgb(230,90,22)" fg:x="83389492925" fg:w="24935433"/><text x="61.5435%" y="1887.50"></text></g><g><title>__memmove_sse2_unaligned_erms (16,881,797,710 samples, 12.41%)</title><rect x="48.9050%" y="1909" width="12.4086%" height="15" fill="rgb(229,61,13)" fg:x="66534982387" fg:w="16881797710"/><text x="49.1550%" y="1919.50">__memmove_sse2_unal..</text></g><g><title>__sanitizer::mem_is_zero (1,735,979,360 samples, 1.28%)</title><rect x="61.3251%" y="1909" width="1.2760%" height="15" fill="rgb(225,57,24)" fg:x="83432414327" fg:w="1735979360"/><text x="61.5751%" y="1919.50"></text></g><g><title>file_and_offset_and_size::~file_and_offset_and_size (25,147,516 samples, 0.02%)</title><rect x="62.6017%" y="1909" width="0.0185%" height="15" fill="rgb(208,169,48)" fg:x="85169189143" fg:w="25147516"/><text x="62.8517%" y="1919.50"></text></g><g><title>operator delete (15,445,929 samples, 0.01%)</title><rect x="62.6088%" y="1893" width="0.0114%" height="15" fill="rgb(244,218,51)" fg:x="85178890730" fg:w="15445929"/><text x="62.8588%" y="1903.50"></text></g><g><title>__asan_region_is_poisoned (101,053,338 samples, 0.07%)</title><rect x="62.7880%" y="1893" width="0.0743%" height="15" fill="rgb(214,148,10)" fg:x="85422740835" fg:w="101053338"/><text x="63.0380%" y="1903.50"></text></g><g><title>__interceptor_memcpy (36,461,668 samples, 0.03%)</title><rect x="62.8668%" y="1893" width="0.0268%" height="15" fill="rgb(225,174,27)" fg:x="85529931181" fg:w="36461668"/><text x="63.1168%" y="1903.50"></text></g><g><title>__sanitizer::mem_is_zero (3,278,799,367 samples, 2.41%)</title><rect x="62.8936%" y="1893" width="2.4100%" height="15" fill="rgb(230,96,26)" fg:x="85566392849" fg:w="3278799367"/><text x="63.1436%" y="1903.50">__..</text></g><g><title>generate_random_string (3,693,523,822 samples, 2.71%)</title><rect x="62.6201%" y="1909" width="2.7148%" height="15" fill="rgb(232,10,30)" fg:x="85194336659" fg:w="3693523822"/><text x="62.8701%" y="1919.50">ge..</text></g><g><title>int const&amp; std::max&lt;int&gt; (41,931,888 samples, 0.03%)</title><rect x="65.3042%" y="1893" width="0.0308%" height="15" fill="rgb(222,8,50)" fg:x="88845928593" fg:w="41931888"/><text x="65.5542%" y="1903.50"></text></g><g><title>[libstdc++.so.6.0.30] (58,593,638 samples, 0.04%)</title><rect x="65.6217%" y="1893" width="0.0431%" height="15" fill="rgb(213,81,27)" fg:x="89277977015" fg:w="58593638"/><text x="65.8717%" y="1903.50"></text></g><g><title>__asan::Allocator::QuarantineChunk (14,776,960 samples, 0.01%)</title><rect x="65.6691%" y="1893" width="0.0109%" height="15" fill="rgb(245,50,10)" fg:x="89342455241" fg:w="14776960"/><text x="65.9191%" y="1903.50"></text></g><g><title>int __gnu_cxx::__stoa&lt;long, int, char, int&gt; (23,210,309 samples, 0.02%)</title><rect x="65.6947%" y="1893" width="0.0171%" height="15" fill="rgb(216,100,18)" fg:x="89377230877" fg:w="23210309"/><text x="65.9447%" y="1903.50"></text></g><g><title>operator delete (39,525,735 samples, 0.03%)</title><rect x="65.7117%" y="1893" width="0.0291%" height="15" fill="rgb(236,147,54)" fg:x="89400441186" fg:w="39525735"/><text x="65.9617%" y="1903.50"></text></g><g><title>pthread_once@GLIBC_2.2.5 (39,594,653 samples, 0.03%)</title><rect x="65.7408%" y="1893" width="0.0291%" height="15" fill="rgb(205,143,26)" fg:x="89439966921" fg:w="39594653"/><text x="65.9908%" y="1903.50"></text></g><g><title>operator delete (21,117,918 samples, 0.02%)</title><rect x="65.9680%" y="1877" width="0.0155%" height="15" fill="rgb(236,26,9)" fg:x="89749041653" fg:w="21117918"/><text x="66.2180%" y="1887.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (14,058,802 samples, 0.01%)</title><rect x="65.9911%" y="1877" width="0.0103%" height="15" fill="rgb(221,165,53)" fg:x="89780493502" fg:w="14058802"/><text x="66.2411%" y="1887.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (31,756,573 samples, 0.02%)</title><rect x="66.0559%" y="1861" width="0.0233%" height="15" fill="rgb(214,110,17)" fg:x="89868724345" fg:w="31756573"/><text x="66.3059%" y="1871.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (36,325,730 samples, 0.03%)</title><rect x="66.0898%" y="1861" width="0.0267%" height="15" fill="rgb(237,197,12)" fg:x="89914721742" fg:w="36325730"/><text x="66.3398%" y="1871.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (19,222,828 samples, 0.01%)</title><rect x="66.1165%" y="1861" width="0.0141%" height="15" fill="rgb(205,84,17)" fg:x="89951047472" fg:w="19222828"/><text x="66.3665%" y="1871.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (35,001,392 samples, 0.03%)</title><rect x="66.1306%" y="1861" width="0.0257%" height="15" fill="rgb(237,18,45)" fg:x="89970270300" fg:w="35001392"/><text x="66.3806%" y="1871.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (17,975,051 samples, 0.01%)</title><rect x="66.1661%" y="1861" width="0.0132%" height="15" fill="rgb(221,87,14)" fg:x="90018590374" fg:w="17975051"/><text x="66.4161%" y="1871.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (21,330,818 samples, 0.02%)</title><rect x="66.1793%" y="1861" width="0.0157%" height="15" fill="rgb(238,186,15)" fg:x="90036565425" fg:w="21330818"/><text x="66.4293%" y="1871.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (66,962,360 samples, 0.05%)</title><rect x="66.2031%" y="1861" width="0.0492%" height="15" fill="rgb(208,115,11)" fg:x="90068995610" fg:w="66962360"/><text x="66.4531%" y="1871.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (27,118,789 samples, 0.02%)</title><rect x="66.2324%" y="1845" width="0.0199%" height="15" fill="rgb(254,175,0)" fg:x="90108839181" fg:w="27118789"/><text x="66.4824%" y="1855.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (27,258,924 samples, 0.02%)</title><rect x="66.6135%" y="1845" width="0.0200%" height="15" fill="rgb(227,24,42)" fg:x="90627342374" fg:w="27258924"/><text x="66.8635%" y="1855.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (65,703,919 samples, 0.05%)</title><rect x="66.6336%" y="1845" width="0.0483%" height="15" fill="rgb(223,211,37)" fg:x="90654601298" fg:w="65703919"/><text x="66.8836%" y="1855.50"></text></g><g><title>__asan::asan_memalign (16,393,774 samples, 0.01%)</title><rect x="66.7662%" y="1797" width="0.0120%" height="15" fill="rgb(235,49,27)" fg:x="90834968108" fg:w="16393774"/><text x="67.0162%" y="1807.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (108,607,725 samples, 0.08%)</title><rect x="66.7373%" y="1813" width="0.0798%" height="15" fill="rgb(254,97,51)" fg:x="90795642522" fg:w="108607725"/><text x="66.9873%" y="1823.50"></text></g><g><title>operator new (35,302,642 samples, 0.03%)</title><rect x="66.7911%" y="1797" width="0.0259%" height="15" fill="rgb(249,51,40)" fg:x="90868947605" fg:w="35302642"/><text x="67.0411%" y="1807.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (220,578,834 samples, 0.16%)</title><rect x="66.6824%" y="1845" width="0.1621%" height="15" fill="rgb(210,128,45)" fg:x="90721049163" fg:w="220578834"/><text x="66.9324%" y="1855.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (180,855,266 samples, 0.13%)</title><rect x="66.7116%" y="1829" width="0.1329%" height="15" fill="rgb(224,137,50)" fg:x="90760772731" fg:w="180855266"/><text x="66.9616%" y="1839.50"></text></g><g><title>operator new (37,377,750 samples, 0.03%)</title><rect x="66.8171%" y="1813" width="0.0275%" height="15" fill="rgb(242,15,9)" fg:x="90904250247" fg:w="37377750"/><text x="67.0671%" y="1823.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (17,172,548 samples, 0.01%)</title><rect x="66.8670%" y="1829" width="0.0126%" height="15" fill="rgb(233,187,41)" fg:x="90972168351" fg:w="17172548"/><text x="67.1170%" y="1839.50"></text></g><g><title>__asan::GetMallocContextSize (35,289,653 samples, 0.03%)</title><rect x="66.9132%" y="1797" width="0.0259%" height="15" fill="rgb(227,2,29)" fg:x="91035012577" fg:w="35289653"/><text x="67.1632%" y="1807.50"></text></g><g><title>__asan::asan_delete (20,841,721 samples, 0.02%)</title><rect x="66.9391%" y="1797" width="0.0153%" height="15" fill="rgb(222,70,3)" fg:x="91070302230" fg:w="20841721"/><text x="67.1891%" y="1807.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindImpl (17,653,999 samples, 0.01%)</title><rect x="66.9545%" y="1797" width="0.0130%" height="15" fill="rgb(213,11,42)" fg:x="91091143951" fg:w="17653999"/><text x="67.2045%" y="1807.50"></text></g><g><title>__sanitizer::StackTrace::GetCurrentPc (14,131,939 samples, 0.01%)</title><rect x="66.9674%" y="1797" width="0.0104%" height="15" fill="rgb(225,150,9)" fg:x="91108797950" fg:w="14131939"/><text x="67.2174%" y="1807.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (146,926,787 samples, 0.11%)</title><rect x="66.8898%" y="1813" width="0.1080%" height="15" fill="rgb(230,162,45)" fg:x="91003121605" fg:w="146926787"/><text x="67.1398%" y="1823.50"></text></g><g><title>operator delete (27,118,503 samples, 0.02%)</title><rect x="66.9778%" y="1797" width="0.0199%" height="15" fill="rgb(222,14,52)" fg:x="91122929889" fg:w="27118503"/><text x="67.2278%" y="1807.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (244,566,048 samples, 0.18%)</title><rect x="66.8446%" y="1845" width="0.1798%" height="15" fill="rgb(254,198,14)" fg:x="90941627997" fg:w="244566048"/><text x="67.0946%" y="1855.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (196,853,146 samples, 0.14%)</title><rect x="66.8796%" y="1829" width="0.1447%" height="15" fill="rgb(220,217,30)" fg:x="90989340899" fg:w="196853146"/><text x="67.1296%" y="1839.50"></text></g><g><title>operator delete (36,145,653 samples, 0.03%)</title><rect x="66.9978%" y="1813" width="0.0266%" height="15" fill="rgb(215,146,41)" fg:x="91150048392" fg:w="36145653"/><text x="67.2478%" y="1823.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (17,839,474 samples, 0.01%)</title><rect x="67.0243%" y="1845" width="0.0131%" height="15" fill="rgb(217,27,36)" fg:x="91186194045" fg:w="17839474"/><text x="67.2743%" y="1855.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (21,540,932 samples, 0.02%)</title><rect x="67.0374%" y="1845" width="0.0158%" height="15" fill="rgb(219,218,39)" fg:x="91204033519" fg:w="21540932"/><text x="67.2874%" y="1855.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (28,522,933 samples, 0.02%)</title><rect x="67.2256%" y="1829" width="0.0210%" height="15" fill="rgb(219,4,42)" fg:x="91460065263" fg:w="28522933"/><text x="67.4756%" y="1839.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (31,555,844 samples, 0.02%)</title><rect x="67.2466%" y="1829" width="0.0232%" height="15" fill="rgb(249,119,36)" fg:x="91488588196" fg:w="31555844"/><text x="67.4966%" y="1839.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (23,462,653 samples, 0.02%)</title><rect x="67.2993%" y="1813" width="0.0172%" height="15" fill="rgb(209,23,33)" fg:x="91560335900" fg:w="23462653"/><text x="67.5493%" y="1823.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::max_size (16,554,322 samples, 0.01%)</title><rect x="67.4466%" y="1797" width="0.0122%" height="15" fill="rgb(211,10,0)" fg:x="91760696746" fg:w="16554322"/><text x="67.6966%" y="1807.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_max_size (19,816,715 samples, 0.01%)</title><rect x="67.4720%" y="1781" width="0.0146%" height="15" fill="rgb(208,99,37)" fg:x="91795259007" fg:w="19816715"/><text x="67.7220%" y="1791.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (61,974,417 samples, 0.05%)</title><rect x="67.4588%" y="1797" width="0.0456%" height="15" fill="rgb(213,132,31)" fg:x="91777251068" fg:w="61974417"/><text x="67.7088%" y="1807.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::max_size (24,149,763 samples, 0.02%)</title><rect x="67.4866%" y="1781" width="0.0178%" height="15" fill="rgb(243,129,40)" fg:x="91815075722" fg:w="24149763"/><text x="67.7366%" y="1791.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (323,111,319 samples, 0.24%)</title><rect x="67.3166%" y="1813" width="0.2375%" height="15" fill="rgb(210,66,33)" fg:x="91583798553" fg:w="323111319"/><text x="67.5666%" y="1823.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (67,684,387 samples, 0.05%)</title><rect x="67.5043%" y="1797" width="0.0497%" height="15" fill="rgb(209,189,4)" fg:x="91839225485" fg:w="67684387"/><text x="67.7543%" y="1807.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (418,841,546 samples, 0.31%)</title><rect x="67.2698%" y="1829" width="0.3079%" height="15" fill="rgb(214,107,37)" fg:x="91520144040" fg:w="418841546"/><text x="67.5198%" y="1839.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (32,075,714 samples, 0.02%)</title><rect x="67.5541%" y="1813" width="0.0236%" height="15" fill="rgb(245,88,54)" fg:x="91906909872" fg:w="32075714"/><text x="67.8041%" y="1823.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (89,850,529 samples, 0.07%)</title><rect x="67.5776%" y="1829" width="0.0660%" height="15" fill="rgb(205,146,20)" fg:x="91938985586" fg:w="89850529"/><text x="67.8276%" y="1839.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (829,862,936 samples, 0.61%)</title><rect x="67.0699%" y="1845" width="0.6100%" height="15" fill="rgb(220,161,25)" fg:x="91248221103" fg:w="829862936"/><text x="67.3199%" y="1855.50"></text></g><g><title>unsigned long const&amp; std::max&lt;unsigned long&gt; (49,247,924 samples, 0.04%)</title><rect x="67.6437%" y="1829" width="0.0362%" height="15" fill="rgb(215,152,15)" fg:x="92028836115" fg:w="49247924"/><text x="67.8937%" y="1839.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__niter_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (46,923,820 samples, 0.03%)</title><rect x="67.7458%" y="1813" width="0.0345%" height="15" fill="rgb(233,192,44)" fg:x="92167697829" fg:w="46923820"/><text x="67.9958%" y="1823.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (34,092,050 samples, 0.03%)</title><rect x="67.8283%" y="1797" width="0.0251%" height="15" fill="rgb(240,170,46)" fg:x="92279940794" fg:w="34092050"/><text x="68.0783%" y="1807.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__niter_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (36,189,099 samples, 0.03%)</title><rect x="67.8533%" y="1797" width="0.0266%" height="15" fill="rgb(207,104,33)" fg:x="92314032844" fg:w="36189099"/><text x="68.1033%" y="1807.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (34,326,813 samples, 0.03%)</title><rect x="67.9591%" y="1781" width="0.0252%" height="15" fill="rgb(219,21,39)" fg:x="92457916378" fg:w="34326813"/><text x="68.2091%" y="1791.50"></text></g><g><title>std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (15,615,356 samples, 0.01%)</title><rect x="67.9843%" y="1781" width="0.0115%" height="15" fill="rgb(214,133,29)" fg:x="92492243191" fg:w="15615356"/><text x="68.2343%" y="1791.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (30,243,503 samples, 0.02%)</title><rect x="68.0347%" y="1765" width="0.0222%" height="15" fill="rgb(226,93,6)" fg:x="92560844834" fg:w="30243503"/><text x="68.2847%" y="1775.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (84,592,426 samples, 0.06%)</title><rect x="68.1215%" y="1749" width="0.0622%" height="15" fill="rgb(252,222,34)" fg:x="92678902880" fg:w="84592426"/><text x="68.3715%" y="1759.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (187,256,572 samples, 0.14%)</title><rect x="68.0769%" y="1765" width="0.1376%" height="15" fill="rgb(252,92,48)" fg:x="92618277039" fg:w="187256572"/><text x="68.3269%" y="1775.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (42,038,305 samples, 0.03%)</title><rect x="68.1837%" y="1749" width="0.0309%" height="15" fill="rgb(245,223,24)" fg:x="92763495306" fg:w="42038305"/><text x="68.4337%" y="1759.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (18,043,029 samples, 0.01%)</title><rect x="68.2288%" y="1749" width="0.0133%" height="15" fill="rgb(205,176,3)" fg:x="92824894155" fg:w="18043029"/><text x="68.4788%" y="1759.50"></text></g><g><title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (348,441,643 samples, 0.26%)</title><rect x="67.9958%" y="1781" width="0.2561%" height="15" fill="rgb(235,151,15)" fg:x="92507858547" fg:w="348441643"/><text x="68.2458%" y="1791.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (50,766,579 samples, 0.04%)</title><rect x="68.2146%" y="1765" width="0.0373%" height="15" fill="rgb(237,209,11)" fg:x="92805533611" fg:w="50766579"/><text x="68.4646%" y="1775.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (27,914,224 samples, 0.02%)</title><rect x="68.2519%" y="1781" width="0.0205%" height="15" fill="rgb(243,227,24)" fg:x="92856300190" fg:w="27914224"/><text x="68.5019%" y="1791.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (550,264,859 samples, 0.40%)</title><rect x="67.8799%" y="1797" width="0.4045%" height="15" fill="rgb(239,193,16)" fg:x="92350221943" fg:w="550264859"/><text x="68.1299%" y="1807.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (16,272,388 samples, 0.01%)</title><rect x="68.2724%" y="1781" width="0.0120%" height="15" fill="rgb(231,27,9)" fg:x="92884214414" fg:w="16272388"/><text x="68.5224%" y="1791.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (697,250,660 samples, 0.51%)</title><rect x="67.7802%" y="1813" width="0.5125%" height="15" fill="rgb(219,169,10)" fg:x="92214621649" fg:w="697250660"/><text x="68.0302%" y="1823.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (832,649,149 samples, 0.61%)</title><rect x="67.6889%" y="1845" width="0.6120%" height="15" fill="rgb(244,229,43)" fg:x="92090405987" fg:w="832649149"/><text x="67.9389%" y="1855.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (781,621,833 samples, 0.57%)</title><rect x="67.7264%" y="1829" width="0.5745%" height="15" fill="rgb(254,38,20)" fg:x="92141433303" fg:w="781621833"/><text x="67.9764%" y="1839.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::begin (103,885,662 samples, 0.08%)</title><rect x="68.3010%" y="1845" width="0.0764%" height="15" fill="rgb(250,47,30)" fg:x="92923055136" fg:w="103885662"/><text x="68.5510%" y="1855.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (23,114,706 samples, 0.02%)</title><rect x="68.3603%" y="1829" width="0.0170%" height="15" fill="rgb(224,124,36)" fg:x="93003826092" fg:w="23114706"/><text x="68.6103%" y="1839.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (40,423,676 samples, 0.03%)</title><rect x="68.3773%" y="1845" width="0.0297%" height="15" fill="rgb(246,68,51)" fg:x="93026940798" fg:w="40423676"/><text x="68.6273%" y="1855.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (35,530,105 samples, 0.03%)</title><rect x="68.4070%" y="1845" width="0.0261%" height="15" fill="rgb(253,43,49)" fg:x="93067364474" fg:w="35530105"/><text x="68.6570%" y="1855.50"></text></g><g><title>unsigned long const&amp; std::max&lt;unsigned long&gt; (18,400,450 samples, 0.01%)</title><rect x="68.4331%" y="1845" width="0.0135%" height="15" fill="rgb(219,54,36)" fg:x="93102894579" fg:w="18400450"/><text x="68.6831%" y="1855.50"></text></g><g><title>operator new (21,458,859 samples, 0.02%)</title><rect x="68.4670%" y="1829" width="0.0158%" height="15" fill="rgb(227,133,34)" fg:x="93148937200" fg:w="21458859"/><text x="68.7170%" y="1839.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (26,823,743 samples, 0.02%)</title><rect x="68.4828%" y="1829" width="0.0197%" height="15" fill="rgb(247,227,15)" fg:x="93170396059" fg:w="26823743"/><text x="68.7328%" y="1839.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (40,489,062 samples, 0.03%)</title><rect x="68.5025%" y="1829" width="0.0298%" height="15" fill="rgb(229,96,14)" fg:x="93197219802" fg:w="40489062"/><text x="68.7525%" y="1839.50"></text></g><g><title>operator new (17,904,282 samples, 0.01%)</title><rect x="68.5563%" y="1813" width="0.0132%" height="15" fill="rgb(220,79,17)" fg:x="93270414131" fg:w="17904282"/><text x="68.8063%" y="1823.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (56,653,406 samples, 0.04%)</title><rect x="68.5322%" y="1829" width="0.0416%" height="15" fill="rgb(205,131,53)" fg:x="93237708864" fg:w="56653406"/><text x="68.7822%" y="1839.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (3,554,116,467 samples, 2.61%)</title><rect x="66.0014%" y="1877" width="2.6124%" height="15" fill="rgb(209,50,29)" fg:x="89794552304" fg:w="3554116467"/><text x="66.2514%" y="1887.50">st..</text></g><g><title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (3,199,256,087 samples, 2.35%)</title><rect x="66.2623%" y="1861" width="2.3515%" height="15" fill="rgb(245,86,46)" fg:x="90149412684" fg:w="3199256087"/><text x="66.5123%" y="1871.50">v..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (217,676,763 samples, 0.16%)</title><rect x="68.4538%" y="1845" width="0.1600%" height="15" fill="rgb(235,66,46)" fg:x="93130992008" fg:w="217676763"/><text x="68.7038%" y="1855.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (54,306,501 samples, 0.04%)</title><rect x="68.5739%" y="1829" width="0.0399%" height="15" fill="rgb(232,148,31)" fg:x="93294362270" fg:w="54306501"/><text x="68.8239%" y="1839.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::new_allocator (20,181,913 samples, 0.01%)</title><rect x="68.6577%" y="1829" width="0.0148%" height="15" fill="rgb(217,149,8)" fg:x="93408445172" fg:w="20181913"/><text x="68.9077%" y="1839.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (58,872,609 samples, 0.04%)</title><rect x="68.6726%" y="1829" width="0.0433%" height="15" fill="rgb(209,183,11)" fg:x="93428627085" fg:w="58872609"/><text x="68.9226%" y="1839.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (112,189,650 samples, 0.08%)</title><rect x="68.6412%" y="1845" width="0.0825%" height="15" fill="rgb(208,55,20)" fg:x="93385962822" fg:w="112189650"/><text x="68.8912%" y="1855.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (164,534,945 samples, 0.12%)</title><rect x="68.6252%" y="1861" width="0.1209%" height="15" fill="rgb(218,39,14)" fg:x="93364172865" fg:w="164534945"/><text x="68.8752%" y="1871.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocator (18,001,088 samples, 0.01%)</title><rect x="68.7329%" y="1845" width="0.0132%" height="15" fill="rgb(216,169,33)" fg:x="93510706722" fg:w="18001088"/><text x="68.9829%" y="1855.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (197,796,042 samples, 0.15%)</title><rect x="68.6138%" y="1877" width="0.1454%" height="15" fill="rgb(233,80,24)" fg:x="93348668771" fg:w="197796042"/><text x="68.8638%" y="1887.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (17,757,003 samples, 0.01%)</title><rect x="68.7461%" y="1861" width="0.0131%" height="15" fill="rgb(213,179,31)" fg:x="93528707810" fg:w="17757003"/><text x="68.9961%" y="1871.50"></text></g><g><title>split (4,056,308,486 samples, 2.98%)</title><rect x="65.7798%" y="1893" width="2.9815%" height="15" fill="rgb(209,19,5)" fg:x="89493020269" fg:w="4056308486"/><text x="66.0298%" y="1903.50">spl..</text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (14,886,297 samples, 0.01%)</title><rect x="68.7613%" y="1893" width="0.0109%" height="15" fill="rgb(219,18,35)" fg:x="93549328755" fg:w="14886297"/><text x="69.0113%" y="1903.50"></text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (87,147,278 samples, 0.06%)</title><rect x="68.7807%" y="1893" width="0.0641%" height="15" fill="rgb(209,169,16)" fg:x="93575681817" fg:w="87147278"/><text x="69.0307%" y="1903.50"></text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (127,466,440 samples, 0.09%)</title><rect x="68.8447%" y="1893" width="0.0937%" height="15" fill="rgb(245,90,51)" fg:x="93662829095" fg:w="127466440"/><text x="69.0947%" y="1903.50"></text></g><g><title>operator delete (16,845,530 samples, 0.01%)</title><rect x="68.9260%" y="1877" width="0.0124%" height="15" fill="rgb(220,99,45)" fg:x="93773450005" fg:w="16845530"/><text x="69.1760%" y="1887.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (35,390,919 samples, 0.03%)</title><rect x="68.9384%" y="1893" width="0.0260%" height="15" fill="rgb(249,89,25)" fg:x="93790295535" fg:w="35390919"/><text x="69.1884%" y="1903.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (53,394,727 samples, 0.04%)</title><rect x="68.9644%" y="1893" width="0.0392%" height="15" fill="rgb(239,193,0)" fg:x="93825686454" fg:w="53394727"/><text x="69.2144%" y="1903.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (20,056,726 samples, 0.01%)</title><rect x="69.0037%" y="1893" width="0.0147%" height="15" fill="rgb(231,126,1)" fg:x="93879081181" fg:w="20056726"/><text x="69.2537%" y="1903.50"></text></g><g><title>__interceptor_memcpy (50,963,275 samples, 0.04%)</title><rect x="69.1486%" y="1877" width="0.0375%" height="15" fill="rgb(243,166,3)" fg:x="94076258674" fg:w="50963275"/><text x="69.3986%" y="1887.50"></text></g><g><title>__interceptor_strlen (37,230,454 samples, 0.03%)</title><rect x="69.1861%" y="1877" width="0.0274%" height="15" fill="rgb(223,22,34)" fg:x="94127221949" fg:w="37230454"/><text x="69.4361%" y="1887.50"></text></g><g><title>__interceptor_strlen.part.0 (25,858,136 samples, 0.02%)</title><rect x="69.2134%" y="1877" width="0.0190%" height="15" fill="rgb(251,52,51)" fg:x="94164452403" fg:w="25858136"/><text x="69.4634%" y="1887.50"></text></g><g><title>__memmove_sse2_unaligned_erms (16,143,537 samples, 0.01%)</title><rect x="69.2324%" y="1877" width="0.0119%" height="15" fill="rgb(221,165,28)" fg:x="94190310539" fg:w="16143537"/><text x="69.4824%" y="1887.50"></text></g><g><title>bool __gnu_cxx::__is_null_pointer&lt;char const&gt; (26,510,182 samples, 0.02%)</title><rect x="69.2443%" y="1877" width="0.0195%" height="15" fill="rgb(218,121,47)" fg:x="94206454076" fg:w="26510182"/><text x="69.4943%" y="1887.50"></text></g><g><title>memcpy@GLIBC_2.2.5 (18,530,279 samples, 0.01%)</title><rect x="69.2638%" y="1877" width="0.0136%" height="15" fill="rgb(209,120,9)" fg:x="94232964258" fg:w="18530279"/><text x="69.5138%" y="1887.50"></text></g><g><title>memcpy@plt (30,687,868 samples, 0.02%)</title><rect x="69.2774%" y="1877" width="0.0226%" height="15" fill="rgb(236,68,12)" fg:x="94251494537" fg:w="30687868"/><text x="69.5274%" y="1887.50"></text></g><g><title>operator new (48,399,455 samples, 0.04%)</title><rect x="69.3000%" y="1877" width="0.0356%" height="15" fill="rgb(225,194,26)" fg:x="94282182405" fg:w="48399455"/><text x="69.5500%" y="1887.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (36,732,378 samples, 0.03%)</title><rect x="69.3355%" y="1877" width="0.0270%" height="15" fill="rgb(231,84,39)" fg:x="94330581860" fg:w="36732378"/><text x="69.5855%" y="1887.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (21,869,746 samples, 0.02%)</title><rect x="69.3625%" y="1877" width="0.0161%" height="15" fill="rgb(210,11,45)" fg:x="94367314238" fg:w="21869746"/><text x="69.6125%" y="1887.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (50,527,285 samples, 0.04%)</title><rect x="69.3786%" y="1877" width="0.0371%" height="15" fill="rgb(224,54,52)" fg:x="94389183984" fg:w="50527285"/><text x="69.6286%" y="1887.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (21,068,311 samples, 0.02%)</title><rect x="69.4157%" y="1877" width="0.0155%" height="15" fill="rgb(238,102,14)" fg:x="94439711269" fg:w="21068311"/><text x="69.6657%" y="1887.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (27,066,915 samples, 0.02%)</title><rect x="69.4312%" y="1877" width="0.0199%" height="15" fill="rgb(243,160,52)" fg:x="94460779580" fg:w="27066915"/><text x="69.6812%" y="1887.50"></text></g><g><title>__asan_region_is_poisoned (56,660,203 samples, 0.04%)</title><rect x="69.4728%" y="1861" width="0.0416%" height="15" fill="rgb(216,114,19)" fg:x="94517305179" fg:w="56660203"/><text x="69.7228%" y="1871.50"></text></g><g><title>__interceptor_strlen.part.0 (38,809,478 samples, 0.03%)</title><rect x="69.5200%" y="1861" width="0.0285%" height="15" fill="rgb(244,166,37)" fg:x="94581515069" fg:w="38809478"/><text x="69.7700%" y="1871.50"></text></g><g><title>__sanitizer::mem_is_zero (30,066,721 samples, 0.02%)</title><rect x="69.5485%" y="1861" width="0.0221%" height="15" fill="rgb(246,29,44)" fg:x="94620324547" fg:w="30066721"/><text x="69.7985%" y="1871.50"></text></g><g><title>std::char_traits&lt;char&gt;::length (241,462,318 samples, 0.18%)</title><rect x="69.4511%" y="1877" width="0.1775%" height="15" fill="rgb(215,56,53)" fg:x="94487846495" fg:w="241462318"/><text x="69.7011%" y="1887.50"></text></g><g><title>__strlen_avx2 (78,917,545 samples, 0.06%)</title><rect x="69.5706%" y="1861" width="0.0580%" height="15" fill="rgb(217,60,2)" fg:x="94650391268" fg:w="78917545"/><text x="69.8206%" y="1871.50"></text></g><g><title>std::iterator_traits&lt;char const*&gt;::difference_type std::distance&lt;char const*&gt; (14,814,959 samples, 0.01%)</title><rect x="69.6286%" y="1877" width="0.0109%" height="15" fill="rgb(207,26,24)" fg:x="94729308813" fg:w="14814959"/><text x="69.8786%" y="1887.50"></text></g><g><title>strlen@plt (17,507,076 samples, 0.01%)</title><rect x="69.6395%" y="1877" width="0.0129%" height="15" fill="rgb(252,210,15)" fg:x="94744123772" fg:w="17507076"/><text x="69.8895%" y="1887.50"></text></g><g><title>__asan::GetMallocContextSize (39,544,444 samples, 0.03%)</title><rect x="69.7912%" y="1861" width="0.0291%" height="15" fill="rgb(253,209,26)" fg:x="94950471891" fg:w="39544444"/><text x="70.0412%" y="1871.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (31,979,154 samples, 0.02%)</title><rect x="69.8202%" y="1861" width="0.0235%" height="15" fill="rgb(238,170,14)" fg:x="94990016335" fg:w="31979154"/><text x="70.0702%" y="1871.50"></text></g><g><title>__asan::asan_memalign (32,906,961 samples, 0.02%)</title><rect x="69.8437%" y="1861" width="0.0242%" height="15" fill="rgb(216,178,15)" fg:x="95021995489" fg:w="32906961"/><text x="70.0937%" y="1871.50"></text></g><g><title>__asan_region_is_poisoned (95,624,980 samples, 0.07%)</title><rect x="69.8679%" y="1861" width="0.0703%" height="15" fill="rgb(250,197,2)" fg:x="95054902450" fg:w="95624980"/><text x="70.1179%" y="1871.50"></text></g><g><title>__asan_region_is_poisoned@plt (14,876,815 samples, 0.01%)</title><rect x="69.9382%" y="1861" width="0.0109%" height="15" fill="rgb(212,70,42)" fg:x="95150527430" fg:w="14876815"/><text x="70.1882%" y="1871.50"></text></g><g><title>__interceptor_memcpy (44,864,996 samples, 0.03%)</title><rect x="69.9491%" y="1861" width="0.0330%" height="15" fill="rgb(227,213,9)" fg:x="95165404245" fg:w="44864996"/><text x="70.1991%" y="1871.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindImpl (18,105,993 samples, 0.01%)</title><rect x="69.9821%" y="1861" width="0.0133%" height="15" fill="rgb(245,99,25)" fg:x="95210269241" fg:w="18105993"/><text x="70.2321%" y="1871.50"></text></g><g><title>__sanitizer::StackTrace::GetCurrentPc (20,170,116 samples, 0.01%)</title><rect x="69.9954%" y="1861" width="0.0148%" height="15" fill="rgb(250,82,29)" fg:x="95228375234" fg:w="20170116"/><text x="70.2454%" y="1871.50"></text></g><g><title>__sanitizer::mem_is_zero (81,821,082 samples, 0.06%)</title><rect x="70.0103%" y="1861" width="0.0601%" height="15" fill="rgb(241,226,54)" fg:x="95248545350" fg:w="81821082"/><text x="70.2603%" y="1871.50"></text></g><g><title>operator new (27,284,708 samples, 0.02%)</title><rect x="70.0753%" y="1861" width="0.0201%" height="15" fill="rgb(221,99,41)" fg:x="95337093535" fg:w="27284708"/><text x="70.3253%" y="1871.50"></text></g><g><title>std::iterator_traits&lt;char const*&gt;::difference_type std::distance&lt;char const*&gt; (78,605,065 samples, 0.06%)</title><rect x="70.1003%" y="1861" width="0.0578%" height="15" fill="rgb(213,90,21)" fg:x="95370995138" fg:w="78605065"/><text x="70.3503%" y="1871.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1,565,375,168 samples, 1.15%)</title><rect x="69.0184%" y="1893" width="1.1506%" height="15" fill="rgb(205,208,24)" fg:x="93899137907" fg:w="1565375168"/><text x="69.2684%" y="1903.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (702,882,227 samples, 0.52%)</title><rect x="69.6524%" y="1877" width="0.5166%" height="15" fill="rgb(246,31,12)" fg:x="94761630848" fg:w="702882227"/><text x="69.9024%" y="1887.50"></text></g><g><title>std::iterator_traits&lt;char const*&gt;::iterator_category std::__iterator_category&lt;char const*&gt; (14,912,872 samples, 0.01%)</title><rect x="70.1580%" y="1861" width="0.0110%" height="15" fill="rgb(213,154,6)" fg:x="95449600203" fg:w="14912872"/><text x="70.4080%" y="1871.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (35,649,092 samples, 0.03%)</title><rect x="70.1690%" y="1893" width="0.0262%" height="15" fill="rgb(222,163,29)" fg:x="95464513075" fg:w="35649092"/><text x="70.4190%" y="1903.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (24,065,748 samples, 0.02%)</title><rect x="70.1952%" y="1893" width="0.0177%" height="15" fill="rgb(227,201,8)" fg:x="95500162167" fg:w="24065748"/><text x="70.4452%" y="1903.50"></text></g><g><title>__errno_location (14,161,345 samples, 0.01%)</title><rect x="70.2372%" y="1877" width="0.0104%" height="15" fill="rgb(233,9,32)" fg:x="95557340045" fg:w="14161345"/><text x="70.4872%" y="1887.50"></text></g><g><title>__gnu_cxx::__stoa&lt;long, int, char, int&gt; (46,778,263 samples, 0.03%)</title><rect x="70.2524%" y="1877" width="0.0344%" height="15" fill="rgb(217,54,24)" fg:x="95578015484" fg:w="46778263"/><text x="70.5024%" y="1887.50"></text></g><g><title>__interceptor_strtol (31,292,563 samples, 0.02%)</title><rect x="70.2868%" y="1877" width="0.0230%" height="15" fill="rgb(235,192,0)" fg:x="95624793747" fg:w="31292563"/><text x="70.5368%" y="1887.50"></text></g><g><title>__errno_location (91,860,419 samples, 0.07%)</title><rect x="70.5057%" y="1861" width="0.0675%" height="15" fill="rgb(235,45,9)" fg:x="95922612014" fg:w="91860419"/><text x="70.7557%" y="1871.50"></text></g><g><title>__errno_location@plt (28,783,706 samples, 0.02%)</title><rect x="70.5732%" y="1861" width="0.0212%" height="15" fill="rgb(246,42,40)" fg:x="96014472433" fg:w="28783706"/><text x="70.8232%" y="1871.50"></text></g><g><title>std::__cxx11::stoi (708,800,848 samples, 0.52%)</title><rect x="70.2129%" y="1893" width="0.5210%" height="15" fill="rgb(248,111,24)" fg:x="95524227915" fg:w="708800848"/><text x="70.4629%" y="1903.50"></text></g><g><title>int __gnu_cxx::__stoa&lt;long, int, char, int&gt; (576,238,592 samples, 0.42%)</title><rect x="70.3103%" y="1877" width="0.4236%" height="15" fill="rgb(249,65,22)" fg:x="95656790171" fg:w="576238592"/><text x="70.5603%" y="1887.50"></text></g><g><title>__gnu_cxx::__stoa&lt;long, int, char, int&gt; (189,772,624 samples, 0.14%)</title><rect x="70.5944%" y="1861" width="0.1395%" height="15" fill="rgb(238,111,51)" fg:x="96043256139" fg:w="189772624"/><text x="70.8444%" y="1871.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (69,446,751 samples, 0.05%)</title><rect x="70.7339%" y="1893" width="0.0510%" height="15" fill="rgb(250,118,22)" fg:x="96233028763" fg:w="69446751"/><text x="70.9839%" y="1903.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::operator bool (55,445,880 samples, 0.04%)</title><rect x="70.7849%" y="1893" width="0.0408%" height="15" fill="rgb(234,84,26)" fg:x="96302475514" fg:w="55445880"/><text x="71.0349%" y="1903.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (68,113,309 samples, 0.05%)</title><rect x="70.8257%" y="1893" width="0.0501%" height="15" fill="rgb(243,172,12)" fg:x="96357921394" fg:w="68113309"/><text x="71.0757%" y="1903.50"></text></g><g><title>std::char_traits&lt;char&gt;::length (19,339,446 samples, 0.01%)</title><rect x="70.8757%" y="1893" width="0.0142%" height="15" fill="rgb(236,150,49)" fg:x="96426034703" fg:w="19339446"/><text x="71.1257%" y="1903.50"></text></g><g><title>std::ios_base::_M_call_callbacks (94,682,644 samples, 0.07%)</title><rect x="70.8900%" y="1893" width="0.0696%" height="15" fill="rgb(225,197,26)" fg:x="96445374149" fg:w="94682644"/><text x="71.1400%" y="1903.50"></text></g><g><title>std::ios_base::_M_dispose_callbacks (47,709,701 samples, 0.04%)</title><rect x="70.9596%" y="1893" width="0.0351%" height="15" fill="rgb(214,17,42)" fg:x="96540056793" fg:w="47709701"/><text x="71.2096%" y="1903.50"></text></g><g><title>std::ios_base::ios_base (146,346,872 samples, 0.11%)</title><rect x="70.9946%" y="1893" width="0.1076%" height="15" fill="rgb(224,165,40)" fg:x="96587766494" fg:w="146346872"/><text x="71.2446%" y="1903.50"></text></g><g><title>std::ios_base::~ios_base (133,267,615 samples, 0.10%)</title><rect x="71.1022%" y="1893" width="0.0980%" height="15" fill="rgb(246,100,4)" fg:x="96734113366" fg:w="133267615"/><text x="71.3522%" y="1903.50"></text></g><g><title>std::locale::locale (58,670,627 samples, 0.04%)</title><rect x="71.2001%" y="1893" width="0.0431%" height="15" fill="rgb(222,103,0)" fg:x="96867380981" fg:w="58670627"/><text x="71.4501%" y="1903.50"></text></g><g><title>std::locale::~locale (48,364,930 samples, 0.04%)</title><rect x="71.2433%" y="1893" width="0.0355%" height="15" fill="rgb(227,189,26)" fg:x="96926051608" fg:w="48364930"/><text x="71.4933%" y="1903.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (35,135,954 samples, 0.03%)</title><rect x="71.2788%" y="1893" width="0.0258%" height="15" fill="rgb(214,202,17)" fg:x="96974416538" fg:w="35135954"/><text x="71.5288%" y="1903.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (31,069,471 samples, 0.02%)</title><rect x="71.3046%" y="1893" width="0.0228%" height="15" fill="rgb(229,111,3)" fg:x="97009552492" fg:w="31069471"/><text x="71.5546%" y="1903.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (16,509,225 samples, 0.01%)</title><rect x="71.3275%" y="1893" width="0.0121%" height="15" fill="rgb(229,172,15)" fg:x="97040621963" fg:w="16509225"/><text x="71.5775%" y="1903.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (28,808,800 samples, 0.02%)</title><rect x="71.3396%" y="1893" width="0.0212%" height="15" fill="rgb(230,224,35)" fg:x="97057131188" fg:w="28808800"/><text x="71.5896%" y="1903.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (13,741,352 samples, 0.01%)</title><rect x="71.3965%" y="1877" width="0.0101%" height="15" fill="rgb(251,141,6)" fg:x="97134458996" fg:w="13741352"/><text x="71.6465%" y="1887.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::~_Vector_impl (17,660,689 samples, 0.01%)</title><rect x="71.4071%" y="1877" width="0.0130%" height="15" fill="rgb(225,208,6)" fg:x="97148886896" fg:w="17660689"/><text x="71.6571%" y="1887.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (45,194,230 samples, 0.03%)</title><rect x="71.4604%" y="1829" width="0.0332%" height="15" fill="rgb(246,181,16)" fg:x="97221516169" fg:w="45194230"/><text x="71.7104%" y="1839.50"></text></g><g><title>operator delete (22,106,869 samples, 0.02%)</title><rect x="71.4774%" y="1813" width="0.0162%" height="15" fill="rgb(227,129,36)" fg:x="97244603530" fg:w="22106869"/><text x="71.7274%" y="1823.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (56,126,341 samples, 0.04%)</title><rect x="71.4529%" y="1861" width="0.0413%" height="15" fill="rgb(248,117,24)" fg:x="97211313124" fg:w="56126341"/><text x="71.7029%" y="1871.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (48,171,585 samples, 0.04%)</title><rect x="71.4588%" y="1845" width="0.0354%" height="15" fill="rgb(214,185,35)" fg:x="97219267880" fg:w="48171585"/><text x="71.7088%" y="1855.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::~_Vector_impl (34,100,345 samples, 0.03%)</title><rect x="71.4942%" y="1861" width="0.0251%" height="15" fill="rgb(236,150,34)" fg:x="97267439465" fg:w="34100345"/><text x="71.7442%" y="1871.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (151,056,087 samples, 0.11%)</title><rect x="71.4200%" y="1877" width="0.1110%" height="15" fill="rgb(243,228,27)" fg:x="97166547585" fg:w="151056087"/><text x="71.6700%" y="1887.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (15,964,066 samples, 0.01%)</title><rect x="71.5490%" y="1845" width="0.0117%" height="15" fill="rgb(245,77,44)" fg:x="97341958666" fg:w="15964066"/><text x="71.7990%" y="1855.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (152,442,591 samples, 0.11%)</title><rect x="71.5393%" y="1861" width="0.1120%" height="15" fill="rgb(235,214,42)" fg:x="97328852162" fg:w="152442591"/><text x="71.7893%" y="1871.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (116,700,464 samples, 0.09%)</title><rect x="71.5656%" y="1845" width="0.0858%" height="15" fill="rgb(221,74,3)" fg:x="97364594289" fg:w="116700464"/><text x="71.8156%" y="1855.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (55,578,598 samples, 0.04%)</title><rect x="71.6105%" y="1829" width="0.0409%" height="15" fill="rgb(206,121,29)" fg:x="97425716155" fg:w="55578598"/><text x="71.8605%" y="1839.50"></text></g><g><title>operator delete (14,872,020 samples, 0.01%)</title><rect x="71.6405%" y="1813" width="0.0109%" height="15" fill="rgb(249,131,53)" fg:x="97466422733" fg:w="14872020"/><text x="71.8905%" y="1823.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (180,672,254 samples, 0.13%)</title><rect x="71.5311%" y="1877" width="0.1328%" height="15" fill="rgb(236,170,29)" fg:x="97317603672" fg:w="180672254"/><text x="71.7811%" y="1887.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (16,981,173 samples, 0.01%)</title><rect x="71.6514%" y="1861" width="0.0125%" height="15" fill="rgb(247,96,15)" fg:x="97481294753" fg:w="16981173"/><text x="71.9014%" y="1871.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (426,403,441 samples, 0.31%)</title><rect x="71.3608%" y="1893" width="0.3134%" height="15" fill="rgb(211,210,7)" fg:x="97085939988" fg:w="426403441"/><text x="71.6108%" y="1903.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (14,067,503 samples, 0.01%)</title><rect x="71.6639%" y="1877" width="0.0103%" height="15" fill="rgb(240,88,50)" fg:x="97498275926" fg:w="14067503"/><text x="71.9139%" y="1887.50"></text></g><g><title>get_file_and_offset_and_size_from_key (8,646,404,793 samples, 6.36%)</title><rect x="65.3350%" y="1909" width="6.3553%" height="15" fill="rgb(209,229,26)" fg:x="88887860481" fg:w="8646404793"/><text x="65.5850%" y="1919.50">get_file..</text></g><g><title>int const&amp; std::max&lt;int&gt; (22,718,185 samples, 0.02%)</title><rect x="71.6903%" y="1909" width="0.0167%" height="15" fill="rgb(210,68,23)" fg:x="97534265274" fg:w="22718185"/><text x="71.9403%" y="1919.50"></text></g><g><title>operator delete (72,820,757 samples, 0.05%)</title><rect x="71.7198%" y="1909" width="0.0535%" height="15" fill="rgb(229,180,13)" fg:x="97574343226" fg:w="72820757"/><text x="71.9698%" y="1919.50"></text></g><g><title>split (52,988,859 samples, 0.04%)</title><rect x="71.7733%" y="1909" width="0.0389%" height="15" fill="rgb(236,53,44)" fg:x="97647163983" fg:w="52988859"/><text x="72.0233%" y="1919.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (23,711,965 samples, 0.02%)</title><rect x="71.8123%" y="1909" width="0.0174%" height="15" fill="rgb(244,214,29)" fg:x="97700152842" fg:w="23711965"/><text x="72.0623%" y="1919.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (40,952,505 samples, 0.03%)</title><rect x="71.8297%" y="1909" width="0.0301%" height="15" fill="rgb(220,75,29)" fg:x="97723864807" fg:w="40952505"/><text x="72.0797%" y="1919.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (52,108,484 samples, 0.04%)</title><rect x="71.8598%" y="1909" width="0.0383%" height="15" fill="rgb(214,183,37)" fg:x="97764817312" fg:w="52108484"/><text x="72.1098%" y="1919.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (92,112,042 samples, 0.07%)</title><rect x="71.8981%" y="1909" width="0.0677%" height="15" fill="rgb(239,117,29)" fg:x="97816925796" fg:w="92112042"/><text x="72.1481%" y="1919.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (27,405,778 samples, 0.02%)</title><rect x="71.9658%" y="1909" width="0.0201%" height="15" fill="rgb(237,171,35)" fg:x="97909037838" fg:w="27405778"/><text x="72.2158%" y="1919.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (34,676,525 samples, 0.03%)</title><rect x="71.9859%" y="1909" width="0.0255%" height="15" fill="rgb(229,178,53)" fg:x="97936443616" fg:w="34676525"/><text x="72.2359%" y="1919.50"></text></g><g><title>std::__cxx11::stoi (36,817,827 samples, 0.03%)</title><rect x="72.0114%" y="1909" width="0.0271%" height="15" fill="rgb(210,102,19)" fg:x="97971120141" fg:w="36817827"/><text x="72.2614%" y="1919.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, false, true&gt;::operator (15,554,077 samples, 0.01%)</title><rect x="72.0385%" y="1909" width="0.0114%" height="15" fill="rgb(235,127,22)" fg:x="98007937968" fg:w="15554077"/><text x="72.2885%" y="1919.50"></text></g><g><title> (15,554,077 samples, 0.01%)</title><rect x="72.0385%" y="1893" width="0.0114%" height="15" fill="rgb(244,31,31)" fg:x="98007937968" fg:w="15554077"/><text x="72.2885%" y="1903.50"></text></g><g><title>std::allocator&lt;char&gt;::allocator (30,167,101 samples, 0.02%)</title><rect x="72.0549%" y="1909" width="0.0222%" height="15" fill="rgb(231,43,21)" fg:x="98030305246" fg:w="30167101"/><text x="72.3049%" y="1919.50"></text></g><g><title>std::allocator&lt;char&gt;::~allocator (27,438,070 samples, 0.02%)</title><rect x="72.0771%" y="1909" width="0.0202%" height="15" fill="rgb(217,131,35)" fg:x="98060472347" fg:w="27438070"/><text x="72.3271%" y="1919.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (16,758,647 samples, 0.01%)</title><rect x="72.1025%" y="1909" width="0.0123%" height="15" fill="rgb(221,149,4)" fg:x="98095022608" fg:w="16758647"/><text x="72.3525%" y="1919.50"></text></g><g><title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::end (17,788,807 samples, 0.01%)</title><rect x="72.1231%" y="1909" width="0.0131%" height="15" fill="rgb(232,170,28)" fg:x="98123014240" fg:w="17788807"/><text x="72.3731%" y="1919.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (46,374,725 samples, 0.03%)</title><rect x="72.1406%" y="1909" width="0.0341%" height="15" fill="rgb(238,56,10)" fg:x="98146848091" fg:w="46374725"/><text x="72.3906%" y="1919.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (18,614,974 samples, 0.01%)</title><rect x="72.1747%" y="1909" width="0.0137%" height="15" fill="rgb(235,196,14)" fg:x="98193222816" fg:w="18614974"/><text x="72.4247%" y="1919.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (15,367,324 samples, 0.01%)</title><rect x="72.1884%" y="1909" width="0.0113%" height="15" fill="rgb(216,45,48)" fg:x="98211837790" fg:w="15367324"/><text x="72.4384%" y="1919.50"></text></g><g><title>IOTraceClient::do_insert (80,661,191,352 samples, 59.29%)</title><rect x="12.9236%" y="1925" width="59.2882%" height="15" fill="rgb(238,213,17)" fg:x="17582498549" fg:w="80661191352"/><text x="13.1736%" y="1935.50">IOTraceClient::do_insert</text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (16,484,787 samples, 0.01%)</title><rect x="72.1997%" y="1909" width="0.0121%" height="15" fill="rgb(212,13,2)" fg:x="98227205114" fg:w="16484787"/><text x="72.4497%" y="1919.50"></text></g><g><title>__x64_sys_futex (14,770,060 samples, 0.01%)</title><rect x="72.2332%" y="1813" width="0.0109%" height="15" fill="rgb(240,114,20)" fg:x="98272811465" fg:w="14770060"/><text x="72.4832%" y="1823.50"></text></g><g><title>__se_sys_futex (14,770,060 samples, 0.01%)</title><rect x="72.2332%" y="1797" width="0.0109%" height="15" fill="rgb(228,41,40)" fg:x="98272811465" fg:w="14770060"/><text x="72.4832%" y="1807.50"></text></g><g><title>do_futex (14,770,060 samples, 0.01%)</title><rect x="72.2332%" y="1781" width="0.0109%" height="15" fill="rgb(244,132,35)" fg:x="98272811465" fg:w="14770060"/><text x="72.4832%" y="1791.50"></text></g><g><title>entry_SYSCALL_64 (20,296,316 samples, 0.01%)</title><rect x="72.2326%" y="1845" width="0.0149%" height="15" fill="rgb(253,189,4)" fg:x="98272017262" fg:w="20296316"/><text x="72.4826%" y="1855.50"></text></g><g><title>do_syscall_64 (20,296,316 samples, 0.01%)</title><rect x="72.2326%" y="1829" width="0.0149%" height="15" fill="rgb(224,37,19)" fg:x="98272017262" fg:w="20296316"/><text x="72.4826%" y="1839.50"></text></g><g><title>__GI___lll_lock_wait (30,579,513 samples, 0.02%)</title><rect x="72.2303%" y="1861" width="0.0225%" height="15" fill="rgb(235,223,18)" fg:x="98268846307" fg:w="30579513"/><text x="72.4803%" y="1871.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (38,471,229 samples, 0.03%)</title><rect x="72.2303%" y="1893" width="0.0283%" height="15" fill="rgb(235,163,25)" fg:x="98268846307" fg:w="38471229"/><text x="72.4803%" y="1903.50"></text></g><g><title>std::mutex::lock (38,471,229 samples, 0.03%)</title><rect x="72.2303%" y="1877" width="0.0283%" height="15" fill="rgb(217,145,28)" fg:x="98268846307" fg:w="38471229"/><text x="72.4803%" y="1887.50"></text></g><g><title>__x64_sys_futex (14,110,810 samples, 0.01%)</title><rect x="72.2608%" y="1813" width="0.0104%" height="15" fill="rgb(223,223,32)" fg:x="98310430610" fg:w="14110810"/><text x="72.5108%" y="1823.50"></text></g><g><title>__se_sys_futex (14,110,810 samples, 0.01%)</title><rect x="72.2608%" y="1797" width="0.0104%" height="15" fill="rgb(227,189,39)" fg:x="98310430610" fg:w="14110810"/><text x="72.5108%" y="1807.50"></text></g><g><title>entry_SYSCALL_64 (21,111,892 samples, 0.02%)</title><rect x="72.2603%" y="1845" width="0.0155%" height="15" fill="rgb(248,10,22)" fg:x="98309679899" fg:w="21111892"/><text x="72.5103%" y="1855.50"></text></g><g><title>do_syscall_64 (20,361,181 samples, 0.01%)</title><rect x="72.2608%" y="1829" width="0.0150%" height="15" fill="rgb(248,46,39)" fg:x="98310430610" fg:w="20361181"/><text x="72.5108%" y="1839.50"></text></g><g><title>entry_ibpb (14,155,429 samples, 0.01%)</title><rect x="72.2758%" y="1845" width="0.0104%" height="15" fill="rgb(248,113,48)" fg:x="98330791791" fg:w="14155429"/><text x="72.5258%" y="1855.50"></text></g><g><title>__GI___lll_lock_wake (36,839,579 samples, 0.03%)</title><rect x="72.2597%" y="1861" width="0.0271%" height="15" fill="rgb(245,16,25)" fg:x="98308904577" fg:w="36839579"/><text x="72.5097%" y="1871.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (43,821,236 samples, 0.03%)</title><rect x="72.2585%" y="1893" width="0.0322%" height="15" fill="rgb(249,152,16)" fg:x="98307317536" fg:w="43821236"/><text x="72.5085%" y="1903.50"></text></g><g><title>std::mutex::unlock (43,031,296 samples, 0.03%)</title><rect x="72.2591%" y="1877" width="0.0316%" height="15" fill="rgb(250,16,1)" fg:x="98308107476" fg:w="43031296"/><text x="72.5091%" y="1887.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (14,109,752 samples, 0.01%)</title><rect x="72.3253%" y="1797" width="0.0104%" height="15" fill="rgb(249,138,3)" fg:x="98398115375" fg:w="14109752"/><text x="72.5753%" y="1807.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (27,434,522 samples, 0.02%)</title><rect x="72.3166%" y="1829" width="0.0202%" height="15" fill="rgb(227,71,41)" fg:x="98386309296" fg:w="27434522"/><text x="72.5666%" y="1839.50"></text></g><g><title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (15,628,443 samples, 0.01%)</title><rect x="72.3253%" y="1813" width="0.0115%" height="15" fill="rgb(209,184,23)" fg:x="98398115375" fg:w="15628443"/><text x="72.5753%" y="1823.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (44,643,573 samples, 0.03%)</title><rect x="72.3045%" y="1861" width="0.0328%" height="15" fill="rgb(223,215,31)" fg:x="98369892663" fg:w="44643573"/><text x="72.5545%" y="1871.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (41,541,435 samples, 0.03%)</title><rect x="72.3068%" y="1845" width="0.0305%" height="15" fill="rgb(210,146,28)" fg:x="98372994801" fg:w="41541435"/><text x="72.5568%" y="1855.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (19,744,524 samples, 0.01%)</title><rect x="72.3373%" y="1861" width="0.0145%" height="15" fill="rgb(209,183,41)" fg:x="98414536236" fg:w="19744524"/><text x="72.5873%" y="1871.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (82,223,197 samples, 0.06%)</title><rect x="72.2943%" y="1877" width="0.0604%" height="15" fill="rgb(209,224,45)" fg:x="98355907300" fg:w="82223197"/><text x="72.5443%" y="1887.50"></text></g><g><title>FileDescriptorCache::get_file_descriptor (182,601,604 samples, 0.13%)</title><rect x="72.2210%" y="1909" width="0.1342%" height="15" fill="rgb(224,209,51)" fg:x="98256278901" fg:w="182601604"/><text x="72.4710%" y="1919.50"></text></g><g><title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::find (84,565,413 samples, 0.06%)</title><rect x="72.2931%" y="1893" width="0.0622%" height="15" fill="rgb(223,17,39)" fg:x="98354315092" fg:w="84565413"/><text x="72.5431%" y="1903.50"></text></g><g><title>__rcu_read_lock (25,820,505 samples, 0.02%)</title><rect x="72.3833%" y="1877" width="0.0190%" height="15" fill="rgb(234,204,37)" fg:x="98477071937" fg:w="25820505"/><text x="72.6333%" y="1887.50"></text></g><g><title>__bpf_prog_enter (122,949,983 samples, 0.09%)</title><rect x="72.3706%" y="1893" width="0.0904%" height="15" fill="rgb(236,120,5)" fg:x="98459837291" fg:w="122949983"/><text x="72.6206%" y="1903.50"></text></g><g><title>migrate_disable (79,894,832 samples, 0.06%)</title><rect x="72.4023%" y="1877" width="0.0587%" height="15" fill="rgb(248,97,27)" fg:x="98502892442" fg:w="79894832"/><text x="72.6523%" y="1887.50"></text></g><g><title>__rcu_read_unlock (27,418,729 samples, 0.02%)</title><rect x="72.4920%" y="1877" width="0.0202%" height="15" fill="rgb(240,66,17)" fg:x="98624913820" fg:w="27418729"/><text x="72.7420%" y="1887.50"></text></g><g><title>__bpf_prog_exit (234,529,855 samples, 0.17%)</title><rect x="72.4610%" y="1893" width="0.1724%" height="15" fill="rgb(210,79,3)" fg:x="98582787274" fg:w="234529855"/><text x="72.7110%" y="1903.50"></text></g><g><title>migrate_enable (164,984,580 samples, 0.12%)</title><rect x="72.5121%" y="1877" width="0.1213%" height="15" fill="rgb(214,176,27)" fg:x="98652332549" fg:w="164984580"/><text x="72.7621%" y="1887.50"></text></g><g><title>__rcu_read_lock (22,649,008 samples, 0.02%)</title><rect x="72.6420%" y="1893" width="0.0166%" height="15" fill="rgb(235,185,3)" fg:x="98829075969" fg:w="22649008"/><text x="72.8920%" y="1903.50"></text></g><g><title>__rcu_read_unlock (17,949,862 samples, 0.01%)</title><rect x="72.6587%" y="1893" width="0.0132%" height="15" fill="rgb(227,24,12)" fg:x="98851724977" fg:w="17949862"/><text x="72.9087%" y="1903.50"></text></g><g><title>bcmp (41,350,507 samples, 0.03%)</title><rect x="73.4143%" y="1861" width="0.0304%" height="15" fill="rgb(252,169,48)" fg:x="99879762723" fg:w="41350507"/><text x="73.6643%" y="1871.50"></text></g><g><title>__htab_map_lookup_elem (1,143,944,862 samples, 0.84%)</title><rect x="72.7600%" y="1877" width="0.8408%" height="15" fill="rgb(212,65,1)" fg:x="98989597783" fg:w="1143944862"/><text x="73.0100%" y="1887.50"></text></g><g><title>htab_map_hash (212,429,415 samples, 0.16%)</title><rect x="73.4447%" y="1861" width="0.1561%" height="15" fill="rgb(242,39,24)" fg:x="99921113230" fg:w="212429415"/><text x="73.6947%" y="1871.50"></text></g><g><title>ktime_get_mono_fast_ns (637,237,145 samples, 0.47%)</title><rect x="73.6135%" y="1861" width="0.4684%" height="15" fill="rgb(249,32,23)" fg:x="100150770610" fg:w="637237145"/><text x="73.8635%" y="1871.50"></text></g><g><title>read_tsc (527,018,895 samples, 0.39%)</title><rect x="73.6945%" y="1845" width="0.3874%" height="15" fill="rgb(251,195,23)" fg:x="100260988860" fg:w="527018895"/><text x="73.9445%" y="1855.50"></text></g><g><title>bpf_ktime_get_ns (669,465,887 samples, 0.49%)</title><rect x="73.6026%" y="1877" width="0.4921%" height="15" fill="rgb(236,174,8)" fg:x="100135878190" fg:w="669465887"/><text x="73.8526%" y="1887.50"></text></g><g><title>read_tsc (17,336,322 samples, 0.01%)</title><rect x="74.0819%" y="1861" width="0.0127%" height="15" fill="rgb(220,197,8)" fg:x="100788007755" fg:w="17336322"/><text x="74.3319%" y="1871.50"></text></g><g><title>bpf_prog_3a0c6dd366a72854_sampling_folio_accessed (1,948,955,908 samples, 1.43%)</title><rect x="72.6770%" y="1893" width="1.4325%" height="15" fill="rgb(240,108,37)" fg:x="98876688372" fg:w="1948955908"/><text x="72.9270%" y="1903.50"></text></g><g><title>__fdget (14,805,187 samples, 0.01%)</title><rect x="74.1187%" y="1845" width="0.0109%" height="15" fill="rgb(232,176,24)" fg:x="100838111934" fg:w="14805187"/><text x="74.3687%" y="1855.50"></text></g><g><title>[unknown] (15,685,447 samples, 0.01%)</title><rect x="74.4129%" y="1781" width="0.0115%" height="15" fill="rgb(243,35,29)" fg:x="101238342907" fg:w="15685447"/><text x="74.6629%" y="1791.50"></text></g><g><title>_copy_to_iter (556,665,332 samples, 0.41%)</title><rect x="74.5335%" y="1765" width="0.4092%" height="15" fill="rgb(210,37,18)" fg:x="101402359652" fg:w="556665332"/><text x="74.7835%" y="1775.50"></text></g><g><title>copy_page_to_iter (9,373,677,667 samples, 6.89%)</title><rect x="74.4348%" y="1781" width="6.8899%" height="15" fill="rgb(224,184,40)" fg:x="101268165286" fg:w="9373677667"/><text x="74.6848%" y="1791.50">copy_page..</text></g><g><title>rep_movs_alternative (8,680,458,408 samples, 6.38%)</title><rect x="74.9444%" y="1765" width="6.3804%" height="15" fill="rgb(236,39,29)" fg:x="101961384545" fg:w="8680458408"/><text x="75.1944%" y="1775.50">rep_movs..</text></g><g><title>xas_load (56,226,754 samples, 0.04%)</title><rect x="81.6521%" y="1749" width="0.0413%" height="15" fill="rgb(232,48,39)" fg:x="111087211951" fg:w="56226754"/><text x="81.9021%" y="1759.50"></text></g><g><title>xas_start (17,928,157 samples, 0.01%)</title><rect x="81.6803%" y="1733" width="0.0132%" height="15" fill="rgb(236,34,42)" fg:x="111125510548" fg:w="17928157"/><text x="81.9303%" y="1743.50"></text></g><g><title>filemap_get_read_batch (492,989,347 samples, 0.36%)</title><rect x="81.3322%" y="1765" width="0.3624%" height="15" fill="rgb(243,106,37)" fg:x="110652033852" fg:w="492989347"/><text x="81.5822%" y="1775.50"></text></g><g><title>filemap_get_pages (503,975,845 samples, 0.37%)</title><rect x="81.3247%" y="1781" width="0.3704%" height="15" fill="rgb(218,96,6)" fg:x="110641842953" fg:w="503975845"/><text x="81.5747%" y="1791.50"></text></g><g><title>[unknown] (48,428,118 samples, 0.04%)</title><rect x="81.7445%" y="1765" width="0.0356%" height="15" fill="rgb(235,130,12)" fg:x="111212954899" fg:w="48428118"/><text x="81.9945%" y="1775.50"></text></g><g><title>_raw_read_lock (104,008,723 samples, 0.08%)</title><rect x="81.8220%" y="1749" width="0.0764%" height="15" fill="rgb(231,95,0)" fg:x="111318364688" fg:w="104008723"/><text x="82.0720%" y="1759.50"></text></g><g><title>folio_mark_accessed (439,739,570 samples, 0.32%)</title><rect x="81.6992%" y="1781" width="0.3232%" height="15" fill="rgb(228,12,23)" fg:x="111151242701" fg:w="439739570"/><text x="81.9492%" y="1791.50"></text></g><g><title>get_page_cache_ext_ops (293,598,020 samples, 0.22%)</title><rect x="81.8066%" y="1765" width="0.2158%" height="15" fill="rgb(216,12,1)" fg:x="111297384251" fg:w="293598020"/><text x="82.0566%" y="1775.50"></text></g><g><title>_raw_read_unlock (168,608,860 samples, 0.12%)</title><rect x="81.8985%" y="1749" width="0.1239%" height="15" fill="rgb(219,59,3)" fg:x="111422373411" fg:w="168608860"/><text x="82.1485%" y="1759.50"></text></g><g><title>filemap_read (10,722,328,393 samples, 7.88%)</title><rect x="74.1606%" y="1797" width="7.8812%" height="15" fill="rgb(215,208,46)" fg:x="100895063523" fg:w="10722328393"/><text x="74.4106%" y="1807.50">filemap_read</text></g><g><title>touch_atime (15,552,444 samples, 0.01%)</title><rect x="82.0304%" y="1781" width="0.0114%" height="15" fill="rgb(254,224,29)" fg:x="111601839472" fg:w="15552444"/><text x="82.2804%" y="1791.50"></text></g><g><title>ext4_file_read_iter (10,748,866,126 samples, 7.90%)</title><rect x="74.1468%" y="1829" width="7.9007%" height="15" fill="rgb(232,14,29)" fg:x="100876318269" fg:w="10748866126"/><text x="74.3968%" y="1839.50">ext4_file_r..</text></g><g><title>generic_file_read_iter (10,738,664,316 samples, 7.89%)</title><rect x="74.1543%" y="1813" width="7.8932%" height="15" fill="rgb(208,45,52)" fg:x="100886520079" fg:w="10738664316"/><text x="74.4043%" y="1823.50">generic_fil..</text></g><g><title>__fsnotify_parent (25,748,926 samples, 0.02%)</title><rect x="82.0647%" y="1797" width="0.0189%" height="15" fill="rgb(234,191,28)" fg:x="111648578131" fg:w="25748926"/><text x="82.3147%" y="1807.50"></text></g><g><title>__x64_sys_pread64 (10,837,002,286 samples, 7.97%)</title><rect x="74.1187%" y="1861" width="7.9655%" height="15" fill="rgb(244,67,43)" fg:x="100838111934" fg:w="10837002286"/><text x="74.3687%" y="1871.50">__x64_sys_p..</text></g><g><title>vfs_read (10,816,785,818 samples, 7.95%)</title><rect x="74.1336%" y="1845" width="7.9506%" height="15" fill="rgb(236,189,24)" fg:x="100858328402" fg:w="10816785818"/><text x="74.3836%" y="1855.50">vfs_read</text></g><g><title>security_file_permission (46,823,844 samples, 0.03%)</title><rect x="82.0498%" y="1829" width="0.0344%" height="15" fill="rgb(239,214,33)" fg:x="111628290376" fg:w="46823844"/><text x="82.2998%" y="1839.50"></text></g><g><title>fsnotify_perm (30,500,498 samples, 0.02%)</title><rect x="82.0618%" y="1813" width="0.0224%" height="15" fill="rgb(226,176,41)" fg:x="111644613722" fg:w="30500498"/><text x="82.3118%" y="1823.50"></text></g><g><title>syscall_exit_to_user_mode (26,594,523 samples, 0.02%)</title><rect x="82.0899%" y="1861" width="0.0195%" height="15" fill="rgb(248,47,8)" fg:x="111682835515" fg:w="26594523"/><text x="82.3399%" y="1871.50"></text></g><g><title>do_syscall_64 (10,879,046,118 samples, 8.00%)</title><rect x="74.1154%" y="1877" width="7.9964%" height="15" fill="rgb(218,81,44)" fg:x="100833505363" fg:w="10879046118"/><text x="74.3654%" y="1887.50">do_syscall_..</text></g><g><title>entry_SYSCALL_64 (10,889,258,688 samples, 8.00%)</title><rect x="74.1102%" y="1893" width="8.0039%" height="15" fill="rgb(213,98,6)" fg:x="100826435820" fg:w="10889258688"/><text x="74.3602%" y="1903.50">entry_SYSCA..</text></g><g><title>entry_ibpb (22,446,811 samples, 0.02%)</title><rect x="82.1141%" y="1893" width="0.0165%" height="15" fill="rgb(222,85,22)" fg:x="111715694508" fg:w="22446811"/><text x="82.3641%" y="1903.50"></text></g><g><title>migrate_enable (22,662,510 samples, 0.02%)</title><rect x="82.1341%" y="1893" width="0.0167%" height="15" fill="rgb(239,46,39)" fg:x="111742901775" fg:w="22662510"/><text x="82.3841%" y="1903.50"></text></g><g><title>__libc_pread (13,308,883,565 samples, 9.78%)</title><rect x="72.3695%" y="1909" width="9.7824%" height="15" fill="rgb(237,12,29)" fg:x="98458270403" fg:w="13308883565"/><text x="72.6195%" y="1919.50">__libc_pread</text></g><g><title>__sanitizer::mem_is_zero (535,236,912 samples, 0.39%)</title><rect x="82.1524%" y="1909" width="0.3934%" height="15" fill="rgb(214,77,8)" fg:x="111767900591" fg:w="535236912"/><text x="82.4024%" y="1919.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (15,615,029 samples, 0.01%)</title><rect x="82.6228%" y="1813" width="0.0115%" height="15" fill="rgb(217,168,37)" fg:x="112407871549" fg:w="15615029"/><text x="82.8728%" y="1823.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (21,082,106 samples, 0.02%)</title><rect x="82.6194%" y="1829" width="0.0155%" height="15" fill="rgb(221,217,23)" fg:x="112403200329" fg:w="21082106"/><text x="82.8694%" y="1839.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (32,667,624 samples, 0.02%)</title><rect x="82.6155%" y="1845" width="0.0240%" height="15" fill="rgb(243,229,36)" fg:x="112397884285" fg:w="32667624"/><text x="82.8655%" y="1855.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (18,007,278 samples, 0.01%)</title><rect x="82.6452%" y="1797" width="0.0132%" height="15" fill="rgb(251,163,40)" fg:x="112438250997" fg:w="18007278"/><text x="82.8952%" y="1807.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (23,329,422 samples, 0.02%)</title><rect x="82.6418%" y="1813" width="0.0171%" height="15" fill="rgb(237,222,12)" fg:x="112433715683" fg:w="23329422"/><text x="82.8918%" y="1823.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (27,285,509 samples, 0.02%)</title><rect x="82.6401%" y="1845" width="0.0201%" height="15" fill="rgb(248,132,6)" fg:x="112431348101" fg:w="27285509"/><text x="82.8901%" y="1855.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (27,285,509 samples, 0.02%)</title><rect x="82.6401%" y="1829" width="0.0201%" height="15" fill="rgb(227,167,50)" fg:x="112431348101" fg:w="27285509"/><text x="82.8901%" y="1839.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (132,815,118 samples, 0.10%)</title><rect x="82.5775%" y="1877" width="0.0976%" height="15" fill="rgb(242,84,37)" fg:x="112346159452" fg:w="132815118"/><text x="82.8275%" y="1887.50"></text></g><g><title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (122,619,370 samples, 0.09%)</title><rect x="82.5850%" y="1861" width="0.0901%" height="15" fill="rgb(212,4,50)" fg:x="112356355200" fg:w="122619370"/><text x="82.8350%" y="1871.50"></text></g><g><title>split (147,618,004 samples, 0.11%)</title><rect x="82.5700%" y="1893" width="0.1085%" height="15" fill="rgb(230,228,32)" fg:x="112336042539" fg:w="147618004"/><text x="82.8200%" y="1903.50"></text></g><g><title>std::char_traits&lt;char&gt;::length (15,600,985 samples, 0.01%)</title><rect x="82.7083%" y="1877" width="0.0115%" height="15" fill="rgb(248,217,23)" fg:x="112524153040" fg:w="15600985"/><text x="82.9583%" y="1887.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (69,276,701 samples, 0.05%)</title><rect x="82.6883%" y="1893" width="0.0509%" height="15" fill="rgb(238,197,32)" fg:x="112496897785" fg:w="69276701"/><text x="82.9383%" y="1903.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (26,420,461 samples, 0.02%)</title><rect x="82.7198%" y="1877" width="0.0194%" height="15" fill="rgb(236,106,1)" fg:x="112539754025" fg:w="26420461"/><text x="82.9698%" y="1887.50"></text></g><g><title>std::__cxx11::stoi (19,408,243 samples, 0.01%)</title><rect x="82.7427%" y="1893" width="0.0143%" height="15" fill="rgb(219,228,13)" fg:x="112570892326" fg:w="19408243"/><text x="82.9927%" y="1903.50"></text></g><g><title>int __gnu_cxx::__stoa&lt;long, int, char, int&gt; (15,500,597 samples, 0.01%)</title><rect x="82.7455%" y="1877" width="0.0114%" height="15" fill="rgb(238,30,35)" fg:x="112574799972" fg:w="15500597"/><text x="82.9955%" y="1887.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (14,015,547 samples, 0.01%)</title><rect x="82.7914%" y="1893" width="0.0103%" height="15" fill="rgb(236,70,23)" fg:x="112637195808" fg:w="14015547"/><text x="83.0414%" y="1903.50"></text></g><g><title>get_file_and_offset_and_size_from_key (348,851,811 samples, 0.26%)</title><rect x="82.5464%" y="1909" width="0.2564%" height="15" fill="rgb(249,104,48)" fg:x="112303932727" fg:w="348851811"/><text x="82.7964%" y="1919.50"></text></g><g><title>IOTraceClient::do_read (14,439,750,290 samples, 10.61%)</title><rect x="72.2118%" y="1925" width="10.6136%" height="15" fill="rgb(254,117,50)" fg:x="98243689901" fg:w="14439750290"/><text x="72.4618%" y="1935.50">IOTraceClient::..</text></g><g><title>__interceptor_pwrite (38,559,666 samples, 0.03%)</title><rect x="82.8254%" y="1925" width="0.0283%" height="15" fill="rgb(223,152,4)" fg:x="112683440191" fg:w="38559666"/><text x="83.0754%" y="1935.50"></text></g><g><title>__interceptor_pwrite.part.0 (24,037,794 samples, 0.02%)</title><rect x="82.8537%" y="1925" width="0.0177%" height="15" fill="rgb(245,6,2)" fg:x="112721999857" fg:w="24037794"/><text x="83.1037%" y="1935.50"></text></g><g><title>file_and_offset_and_size::~file_and_offset_and_size (24,260,749 samples, 0.02%)</title><rect x="82.8714%" y="1925" width="0.0178%" height="15" fill="rgb(249,150,24)" fg:x="112746037651" fg:w="24260749"/><text x="83.1214%" y="1935.50"></text></g><g><title>get_file_and_offset_and_size_from_key (31,759,725 samples, 0.02%)</title><rect x="82.8958%" y="1925" width="0.0233%" height="15" fill="rgb(228,185,42)" fg:x="112779218208" fg:w="31759725"/><text x="83.1458%" y="1935.50"></text></g><g><title>operator delete (42,768,202 samples, 0.03%)</title><rect x="82.9191%" y="1925" width="0.0314%" height="15" fill="rgb(226,39,33)" fg:x="112810977933" fg:w="42768202"/><text x="83.1691%" y="1935.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (36,626,680 samples, 0.03%)</title><rect x="82.9538%" y="1925" width="0.0269%" height="15" fill="rgb(221,166,19)" fg:x="112858141710" fg:w="36626680"/><text x="83.2038%" y="1935.50"></text></g><g><title>IOTraceClient::do_operation (95,609,657,603 samples, 70.28%)</title><rect x="12.7626%" y="1941" width="70.2757%" height="15" fill="rgb(209,109,2)" fg:x="17363504372" fg:w="95609657603"/><text x="13.0126%" y="1951.50">IOTraceClient::do_operation</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (78,393,585 samples, 0.06%)</title><rect x="82.9807%" y="1925" width="0.0576%" height="15" fill="rgb(252,216,26)" fg:x="112894768390" fg:w="78393585"/><text x="83.2307%" y="1935.50"></text></g><g><title>std::__atomic_base&lt;long&gt;::operator++ (240,793,685 samples, 0.18%)</title><rect x="83.1686%" y="1925" width="0.1770%" height="15" fill="rgb(227,173,36)" fg:x="113150412981" fg:w="240793685"/><text x="83.4186%" y="1935.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (22,171,992 samples, 0.02%)</title><rect x="83.3732%" y="1909" width="0.0163%" height="15" fill="rgb(209,90,7)" fg:x="113428758765" fg:w="22171992"/><text x="83.6232%" y="1919.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (75,922,403 samples, 0.06%)</title><rect x="83.3604%" y="1925" width="0.0558%" height="15" fill="rgb(250,194,11)" fg:x="113411381101" fg:w="75922403"/><text x="83.6104%" y="1935.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (36,372,747 samples, 0.03%)</title><rect x="83.3895%" y="1909" width="0.0267%" height="15" fill="rgb(220,72,50)" fg:x="113450930757" fg:w="36372747"/><text x="83.6395%" y="1919.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::ratio&lt;1l, 1l&gt;, long, true, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (24,810,661 samples, 0.02%)</title><rect x="83.4211%" y="1909" width="0.0182%" height="15" fill="rgb(222,106,48)" fg:x="113493954069" fg:w="24810661"/><text x="83.6711%" y="1919.50"></text></g><g><title>std::enable_if&lt;std::chrono::__is_duration&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::value, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (34,492,886 samples, 0.03%)</title><rect x="83.4162%" y="1925" width="0.0254%" height="15" fill="rgb(216,220,45)" fg:x="113487303504" fg:w="34492886"/><text x="83.6662%" y="1935.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (16,978,481 samples, 0.01%)</title><rect x="83.4533%" y="1909" width="0.0125%" height="15" fill="rgb(234,112,18)" fg:x="113537672337" fg:w="16978481"/><text x="83.7033%" y="1919.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_v (14,060,473 samples, 0.01%)</title><rect x="83.4714%" y="1909" width="0.0103%" height="15" fill="rgb(206,179,9)" fg:x="113562288670" fg:w="14060473"/><text x="83.7214%" y="1919.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (76,651,885 samples, 0.06%)</title><rect x="83.5672%" y="1877" width="0.0563%" height="15" fill="rgb(215,115,40)" fg:x="113692618147" fg:w="76651885"/><text x="83.8172%" y="1887.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (99,760,574 samples, 0.07%)</title><rect x="83.5566%" y="1893" width="0.0733%" height="15" fill="rgb(222,69,34)" fg:x="113678313418" fg:w="99760574"/><text x="83.8066%" y="1903.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (16,531,590 samples, 0.01%)</title><rect x="83.6300%" y="1893" width="0.0122%" height="15" fill="rgb(209,161,10)" fg:x="113778073992" fg:w="16531590"/><text x="83.8800%" y="1903.50"></text></g><g><title>decltype  (17,984,640 samples, 0.01%)</title><rect x="83.8538%" y="1845" width="0.0132%" height="15" fill="rgb(217,6,38)" fg:x="114082591851" fg:w="17984640"/><text x="84.1038%" y="1855.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_ptr (18,827,062 samples, 0.01%)</title><rect x="83.8731%" y="1829" width="0.0138%" height="15" fill="rgb(229,229,48)" fg:x="114108855988" fg:w="18827062"/><text x="84.1231%" y="1839.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_addr (30,517,850 samples, 0.02%)</title><rect x="83.8940%" y="1813" width="0.0224%" height="15" fill="rgb(225,21,28)" fg:x="114137323303" fg:w="30517850"/><text x="84.1440%" y="1823.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_v (80,683,871 samples, 0.06%)</title><rect x="83.8670%" y="1845" width="0.0593%" height="15" fill="rgb(206,33,13)" fg:x="114100576491" fg:w="80683871"/><text x="84.1170%" y="1855.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_valptr (53,577,312 samples, 0.04%)</title><rect x="83.8869%" y="1829" width="0.0394%" height="15" fill="rgb(242,178,17)" fg:x="114127683050" fg:w="53577312"/><text x="84.1369%" y="1839.50"></text></g><g><title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_M_cget (18,288,311 samples, 0.01%)</title><rect x="83.9395%" y="1845" width="0.0134%" height="15" fill="rgb(220,162,5)" fg:x="114199158510" fg:w="18288311"/><text x="84.1895%" y="1855.50"></text></g><g><title>std::equal_to&lt;int&gt;::operator (40,526,681 samples, 0.03%)</title><rect x="83.9529%" y="1845" width="0.0298%" height="15" fill="rgb(210,33,43)" fg:x="114217446821" fg:w="40526681"/><text x="84.2029%" y="1855.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (253,970,588 samples, 0.19%)</title><rect x="83.8048%" y="1861" width="0.1867%" height="15" fill="rgb(216,116,54)" fg:x="114015954051" fg:w="253970588"/><text x="84.0548%" y="1871.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (24,614,939 samples, 0.02%)</title><rect x="83.9915%" y="1861" width="0.0181%" height="15" fill="rgb(249,92,24)" fg:x="114269924639" fg:w="24614939"/><text x="84.2415%" y="1871.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (465,234,010 samples, 0.34%)</title><rect x="83.6746%" y="1877" width="0.3420%" height="15" fill="rgb(231,189,14)" fg:x="113838818521" fg:w="465234010"/><text x="83.9246%" y="1887.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (512,424,525 samples, 0.38%)</title><rect x="83.6421%" y="1893" width="0.3766%" height="15" fill="rgb(230,8,41)" fg:x="113794605582" fg:w="512424525"/><text x="83.8921%" y="1903.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (35,535,778 samples, 0.03%)</title><rect x="84.0269%" y="1893" width="0.0261%" height="15" fill="rgb(249,7,27)" fg:x="114318081462" fg:w="35535778"/><text x="84.2769%" y="1903.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_ptr (29,315,466 samples, 0.02%)</title><rect x="84.0668%" y="1877" width="0.0215%" height="15" fill="rgb(232,86,5)" fg:x="114372396801" fg:w="29315466"/><text x="84.3168%" y="1887.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_addr (27,888,465 samples, 0.02%)</title><rect x="84.1026%" y="1861" width="0.0205%" height="15" fill="rgb(224,175,18)" fg:x="114421133248" fg:w="27888465"/><text x="84.3526%" y="1871.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_v (113,964,377 samples, 0.08%)</title><rect x="84.0530%" y="1893" width="0.0838%" height="15" fill="rgb(220,129,12)" fg:x="114353617240" fg:w="113964377"/><text x="84.3030%" y="1903.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_valptr (65,869,350 samples, 0.05%)</title><rect x="84.0884%" y="1877" width="0.0484%" height="15" fill="rgb(210,19,36)" fg:x="114401712267" fg:w="65869350"/><text x="84.3384%" y="1887.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_ptr (18,559,904 samples, 0.01%)</title><rect x="84.1231%" y="1861" width="0.0136%" height="15" fill="rgb(219,96,14)" fg:x="114449021713" fg:w="18559904"/><text x="84.3731%" y="1871.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_valptr (43,202,639 samples, 0.03%)</title><rect x="84.1368%" y="1893" width="0.0318%" height="15" fill="rgb(249,106,1)" fg:x="114467581617" fg:w="43202639"/><text x="84.3868%" y="1903.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt; &gt;::operator[] (995,804,609 samples, 0.73%)</title><rect x="83.4416%" y="1925" width="0.7319%" height="15" fill="rgb(249,155,20)" fg:x="113521796390" fg:w="995804609"/><text x="83.6916%" y="1935.50"></text></g><g><title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (941,251,856 samples, 0.69%)</title><rect x="83.4817%" y="1909" width="0.6918%" height="15" fill="rgb(244,168,9)" fg:x="113576349143" fg:w="941251856"/><text x="83.7317%" y="1919.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt; &gt;::size (216,600,188 samples, 0.16%)</title><rect x="84.1735%" y="1925" width="0.1592%" height="15" fill="rgb(216,23,50)" fg:x="114517600999" fg:w="216600188"/><text x="84.4235%" y="1935.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::size (212,838,352 samples, 0.16%)</title><rect x="84.1763%" y="1909" width="0.1564%" height="15" fill="rgb(224,219,20)" fg:x="114521362835" fg:w="212838352"/><text x="84.4263%" y="1919.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (28,827,481 samples, 0.02%)</title><rect x="84.3539%" y="1909" width="0.0212%" height="15" fill="rgb(222,156,15)" fg:x="114762964662" fg:w="28827481"/><text x="84.6039%" y="1919.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (40,268,064 samples, 0.03%)</title><rect x="84.4949%" y="1877" width="0.0296%" height="15" fill="rgb(231,97,17)" fg:x="114954858087" fg:w="40268064"/><text x="84.7449%" y="1887.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (77,843,278 samples, 0.06%)</title><rect x="84.4716%" y="1893" width="0.0572%" height="15" fill="rgb(218,70,48)" fg:x="114923126597" fg:w="77843278"/><text x="84.7216%" y="1903.50"></text></g><g><title>decltype (16,961,119 samples, 0.01%)</title><rect x="84.7578%" y="1845" width="0.0125%" height="15" fill="rgb(212,196,52)" fg:x="115312481694" fg:w="16961119"/><text x="85.0078%" y="1855.50"></text></g><g><title>decltype  (25,197,501 samples, 0.02%)</title><rect x="84.7703%" y="1845" width="0.0185%" height="15" fill="rgb(243,203,18)" fg:x="115329442813" fg:w="25197501"/><text x="85.0203%" y="1855.50"></text></g><g><title>std::tuple_element&lt;0ul, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::type const&amp; std::get&lt;0ul, int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; (16,353,350 samples, 0.01%)</title><rect x="84.7768%" y="1829" width="0.0120%" height="15" fill="rgb(252,125,41)" fg:x="115338286964" fg:w="16353350"/><text x="85.0268%" y="1839.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_ptr (18,091,964 samples, 0.01%)</title><rect x="84.7977%" y="1829" width="0.0133%" height="15" fill="rgb(223,180,33)" fg:x="115366839836" fg:w="18091964"/><text x="85.0477%" y="1839.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_addr (15,223,929 samples, 0.01%)</title><rect x="84.8318%" y="1813" width="0.0112%" height="15" fill="rgb(254,159,46)" fg:x="115413174153" fg:w="15223929"/><text x="85.0818%" y="1823.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_v (85,396,105 samples, 0.06%)</title><rect x="84.7888%" y="1845" width="0.0628%" height="15" fill="rgb(254,38,10)" fg:x="115354640314" fg:w="85396105"/><text x="85.0388%" y="1855.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_valptr (55,104,619 samples, 0.04%)</title><rect x="84.8110%" y="1829" width="0.0405%" height="15" fill="rgb(208,217,32)" fg:x="115384931800" fg:w="55104619"/><text x="85.0610%" y="1839.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (291,893,324 samples, 0.21%)</title><rect x="84.6794%" y="1861" width="0.2145%" height="15" fill="rgb(221,120,13)" fg:x="115205859099" fg:w="291893324"/><text x="84.9294%" y="1871.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (35,998,344 samples, 0.03%)</title><rect x="84.8940%" y="1861" width="0.0265%" height="15" fill="rgb(246,54,52)" fg:x="115497752423" fg:w="35998344"/><text x="85.1440%" y="1871.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (497,891,094 samples, 0.37%)</title><rect x="84.5640%" y="1877" width="0.3660%" height="15" fill="rgb(242,34,25)" fg:x="115048882533" fg:w="497891094"/><text x="84.8140%" y="1887.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (563,152,473 samples, 0.41%)</title><rect x="84.5384%" y="1893" width="0.4139%" height="15" fill="rgb(247,209,9)" fg:x="115014048189" fg:w="563152473"/><text x="84.7884%" y="1903.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (30,427,035 samples, 0.02%)</title><rect x="84.9300%" y="1877" width="0.0224%" height="15" fill="rgb(228,71,26)" fg:x="115546773627" fg:w="30427035"/><text x="85.1800%" y="1887.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (28,224,979 samples, 0.02%)</title><rect x="84.9567%" y="1893" width="0.0207%" height="15" fill="rgb(222,145,49)" fg:x="115583026930" fg:w="28224979"/><text x="85.2067%" y="1903.50"></text></g><g><title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_M_cget (21,562,220 samples, 0.02%)</title><rect x="85.0210%" y="1877" width="0.0158%" height="15" fill="rgb(218,121,17)" fg:x="115670522557" fg:w="21562220"/><text x="85.2710%" y="1887.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (85,533,146 samples, 0.06%)</title><rect x="84.9774%" y="1893" width="0.0629%" height="15" fill="rgb(244,50,7)" fg:x="115611251909" fg:w="85533146"/><text x="85.2274%" y="1903.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_v (52,032,650 samples, 0.04%)</title><rect x="85.0403%" y="1893" width="0.0382%" height="15" fill="rgb(246,229,37)" fg:x="115696785055" fg:w="52032650"/><text x="85.2903%" y="1903.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_valptr (28,240,523 samples, 0.02%)</title><rect x="85.0578%" y="1877" width="0.0208%" height="15" fill="rgb(225,18,5)" fg:x="115720577182" fg:w="28240523"/><text x="85.3078%" y="1887.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt; &gt;::operator[] (1,034,380,715 samples, 0.76%)</title><rect x="84.3327%" y="1925" width="0.7603%" height="15" fill="rgb(213,204,8)" fg:x="114734201187" fg:w="1034380715"/><text x="84.5827%" y="1935.50"></text></g><g><title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (968,522,607 samples, 0.71%)</title><rect x="84.3812%" y="1909" width="0.7119%" height="15" fill="rgb(238,103,6)" fg:x="114800059295" fg:w="968522607"/><text x="84.6312%" y="1919.50"></text></g><g><title>double const&amp; std::forward&lt;double const&amp;&gt; (26,195,707 samples, 0.02%)</title><rect x="85.1400%" y="1909" width="0.0193%" height="15" fill="rgb(222,25,35)" fg:x="115832415504" fg:w="26195707"/><text x="85.3900%" y="1919.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;double&gt;::construct&lt;double, double const&amp;&gt; (15,347,885 samples, 0.01%)</title><rect x="85.1592%" y="1909" width="0.0113%" height="15" fill="rgb(213,203,35)" fg:x="115858611211" fg:w="15347885"/><text x="85.4092%" y="1919.50"></text></g><g><title>double const&amp; std::forward&lt;double const&amp;&gt; (23,026,384 samples, 0.02%)</title><rect x="85.1819%" y="1893" width="0.0169%" height="15" fill="rgb(221,79,53)" fg:x="115889409084" fg:w="23026384"/><text x="85.4319%" y="1903.50"></text></g><g><title>operator new (17,172,625 samples, 0.01%)</title><rect x="85.1988%" y="1893" width="0.0126%" height="15" fill="rgb(243,200,35)" fg:x="115912435468" fg:w="17172625"/><text x="85.4488%" y="1903.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::construct&lt;double, double const&amp;&gt; (140,629,588 samples, 0.10%)</title><rect x="85.1705%" y="1909" width="0.1034%" height="15" fill="rgb(248,60,25)" fg:x="115873959096" fg:w="140629588"/><text x="85.4205%" y="1919.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;double&gt;::construct&lt;double, double const&amp;&gt; (84,980,591 samples, 0.06%)</title><rect x="85.2114%" y="1893" width="0.0625%" height="15" fill="rgb(227,53,46)" fg:x="115929608093" fg:w="84980591"/><text x="85.4614%" y="1903.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back (252,294,547 samples, 0.19%)</title><rect x="85.0930%" y="1925" width="0.1854%" height="15" fill="rgb(216,120,32)" fg:x="115768581902" fg:w="252294547"/><text x="85.3430%" y="1935.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;long&gt;::construct&lt;long, long const&amp;&gt; (15,876,618 samples, 0.01%)</title><rect x="85.3460%" y="1909" width="0.0117%" height="15" fill="rgb(220,134,1)" fg:x="116112751155" fg:w="15876618"/><text x="85.5960%" y="1919.50"></text></g><g><title>long const&amp; std::forward&lt;long const&amp;&gt; (14,037,632 samples, 0.01%)</title><rect x="85.3661%" y="1893" width="0.0103%" height="15" fill="rgb(237,168,5)" fg:x="116140030264" fg:w="14037632"/><text x="85.6161%" y="1903.50"></text></g><g><title>operator new (13,838,421 samples, 0.01%)</title><rect x="85.3764%" y="1893" width="0.0102%" height="15" fill="rgb(231,100,33)" fg:x="116154067896" fg:w="13838421"/><text x="85.6264%" y="1903.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;long&gt; &gt;::construct&lt;long, long const&amp;&gt; (110,975,039 samples, 0.08%)</title><rect x="85.3577%" y="1909" width="0.0816%" height="15" fill="rgb(236,177,47)" fg:x="116128627773" fg:w="110975039"/><text x="85.6077%" y="1919.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;long&gt;::construct&lt;long, long const&amp;&gt; (70,203,362 samples, 0.05%)</title><rect x="85.3877%" y="1893" width="0.0516%" height="15" fill="rgb(235,7,49)" fg:x="116169399450" fg:w="70203362"/><text x="85.6377%" y="1903.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::push_back (224,868,508 samples, 0.17%)</title><rect x="85.2785%" y="1925" width="0.1653%" height="15" fill="rgb(232,119,22)" fg:x="116020876449" fg:w="224868508"/><text x="85.5285%" y="1935.50"></text></g><g><title>OpMeasurement::record_op (3,299,465,508 samples, 2.43%)</title><rect x="83.0389%" y="1941" width="2.4252%" height="15" fill="rgb(254,73,53)" fg:x="112973945737" fg:w="3299465508"/><text x="83.2889%" y="1951.50">Op..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;long&gt; &gt;::construct&lt;long, long const&amp;&gt; (14,355,586 samples, 0.01%)</title><rect x="85.4536%" y="1925" width="0.0106%" height="15" fill="rgb(251,35,20)" fg:x="116259055659" fg:w="14355586"/><text x="85.7036%" y="1935.50"></text></g><g><title>OpMeasurement::record_progress (82,156,061 samples, 0.06%)</title><rect x="85.4641%" y="1941" width="0.0604%" height="15" fill="rgb(241,119,20)" fg:x="116273411245" fg:w="82156061"/><text x="85.7141%" y="1951.50"></text></g><g><title>std::__atomic_base&lt;long&gt;::operator+= (71,174,559 samples, 0.05%)</title><rect x="85.4722%" y="1925" width="0.0523%" height="15" fill="rgb(207,102,14)" fg:x="116284392747" fg:w="71174559"/><text x="85.7222%" y="1935.50"></text></g><g><title>TraceIterator::next_op (41,326,639 samples, 0.03%)</title><rect x="85.5245%" y="1941" width="0.0304%" height="15" fill="rgb(248,201,50)" fg:x="116355567306" fg:w="41326639"/><text x="85.7745%" y="1951.50"></text></g><g><title>TraceWorkload::has_next_op (34,102,699 samples, 0.03%)</title><rect x="85.5549%" y="1941" width="0.0251%" height="15" fill="rgb(222,185,44)" fg:x="116396893945" fg:w="34102699"/><text x="85.8049%" y="1951.50"></text></g><g><title>PoisonAlignedStackMemory (20,494,171 samples, 0.02%)</title><rect x="85.6813%" y="1925" width="0.0151%" height="15" fill="rgb(218,107,18)" fg:x="116568913489" fg:w="20494171"/><text x="85.9313%" y="1935.50"></text></g><g><title>bool __gnu_cxx::operator==&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (44,441,076 samples, 0.03%)</title><rect x="85.8572%" y="1909" width="0.0327%" height="15" fill="rgb(237,177,39)" fg:x="116808163798" fg:w="44441076"/><text x="86.1072%" y="1919.50"></text></g><g><title>__gthread_mutex_lock (14,839,801 samples, 0.01%)</title><rect x="85.9133%" y="1893" width="0.0109%" height="15" fill="rgb(246,69,6)" fg:x="116884475330" fg:w="14839801"/><text x="86.1633%" y="1903.50"></text></g><g><title>futex_wait_setup (14,140,070 samples, 0.01%)</title><rect x="85.9317%" y="1765" width="0.0104%" height="15" fill="rgb(234,208,37)" fg:x="116909519311" fg:w="14140070"/><text x="86.1817%" y="1775.50"></text></g><g><title>futex_wait (19,312,042 samples, 0.01%)</title><rect x="85.9294%" y="1781" width="0.0142%" height="15" fill="rgb(225,4,6)" fg:x="116906481490" fg:w="19312042"/><text x="86.1794%" y="1791.50"></text></g><g><title>__x64_sys_futex (20,110,555 samples, 0.01%)</title><rect x="85.9294%" y="1829" width="0.0148%" height="15" fill="rgb(233,45,0)" fg:x="116906481490" fg:w="20110555"/><text x="86.1794%" y="1839.50"></text></g><g><title>__se_sys_futex (20,110,555 samples, 0.01%)</title><rect x="85.9294%" y="1813" width="0.0148%" height="15" fill="rgb(226,136,5)" fg:x="116906481490" fg:w="20110555"/><text x="86.1794%" y="1823.50"></text></g><g><title>do_futex (20,110,555 samples, 0.01%)</title><rect x="85.9294%" y="1797" width="0.0148%" height="15" fill="rgb(211,91,47)" fg:x="116906481490" fg:w="20110555"/><text x="86.1794%" y="1807.50"></text></g><g><title>entry_SYSCALL_64 (25,198,839 samples, 0.02%)</title><rect x="85.9284%" y="1861" width="0.0185%" height="15" fill="rgb(242,88,51)" fg:x="116905055662" fg:w="25198839"/><text x="86.1784%" y="1871.50"></text></g><g><title>do_syscall_64 (23,773,011 samples, 0.02%)</title><rect x="85.9294%" y="1845" width="0.0175%" height="15" fill="rgb(230,91,28)" fg:x="116906481490" fg:w="23773011"/><text x="86.1794%" y="1855.50"></text></g><g><title>__GI___lll_lock_wait (33,576,136 samples, 0.02%)</title><rect x="85.9278%" y="1877" width="0.0247%" height="15" fill="rgb(254,186,29)" fg:x="116904287173" fg:w="33576136"/><text x="86.1778%" y="1887.50"></text></g><g><title>__gthread_active_p (32,279,712 samples, 0.02%)</title><rect x="85.9525%" y="1877" width="0.0237%" height="15" fill="rgb(238,6,4)" fg:x="116937863309" fg:w="32279712"/><text x="86.2025%" y="1887.50"></text></g><g><title>__interceptor_pthread_mutex_lock (34,194,533 samples, 0.03%)</title><rect x="85.9822%" y="1877" width="0.0251%" height="15" fill="rgb(221,151,16)" fg:x="116978220058" fg:w="34194533"/><text x="86.2322%" y="1887.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (271,434,946 samples, 0.20%)</title><rect x="86.0073%" y="1877" width="0.1995%" height="15" fill="rgb(251,143,52)" fg:x="117012414591" fg:w="271434946"/><text x="86.2573%" y="1887.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (441,438,651 samples, 0.32%)</title><rect x="85.8898%" y="1909" width="0.3245%" height="15" fill="rgb(206,90,15)" fg:x="116852604874" fg:w="441438651"/><text x="86.1398%" y="1919.50"></text></g><g><title>std::mutex::lock (394,728,394 samples, 0.29%)</title><rect x="85.9242%" y="1893" width="0.2901%" height="15" fill="rgb(218,35,8)" fg:x="116899315131" fg:w="394728394"/><text x="86.1742%" y="1903.50"></text></g><g><title>__gthread_mutex_unlock (15,678,131 samples, 0.01%)</title><rect x="86.2365%" y="1893" width="0.0115%" height="15" fill="rgb(239,215,6)" fg:x="117324262672" fg:w="15678131"/><text x="86.4865%" y="1903.50"></text></g><g><title>__se_sys_futex (13,750,401 samples, 0.01%)</title><rect x="86.2588%" y="1813" width="0.0101%" height="15" fill="rgb(245,116,39)" fg:x="117354603020" fg:w="13750401"/><text x="86.5088%" y="1823.50"></text></g><g><title>__x64_sys_futex (15,230,187 samples, 0.01%)</title><rect x="86.2588%" y="1829" width="0.0112%" height="15" fill="rgb(242,65,28)" fg:x="117354603020" fg:w="15230187"/><text x="86.5088%" y="1839.50"></text></g><g><title>entry_SYSCALL_64 (25,848,655 samples, 0.02%)</title><rect x="86.2561%" y="1861" width="0.0190%" height="15" fill="rgb(252,132,53)" fg:x="117350899867" fg:w="25848655"/><text x="86.5061%" y="1871.50"></text></g><g><title>do_syscall_64 (23,546,455 samples, 0.02%)</title><rect x="86.2578%" y="1845" width="0.0173%" height="15" fill="rgb(224,159,50)" fg:x="117353202067" fg:w="23546455"/><text x="86.5078%" y="1855.50"></text></g><g><title>__GI___lll_lock_wake (41,542,693 samples, 0.03%)</title><rect x="86.2561%" y="1877" width="0.0305%" height="15" fill="rgb(224,93,4)" fg:x="117350899867" fg:w="41542693"/><text x="86.5061%" y="1887.50"></text></g><g><title>entry_ibpb (15,694,038 samples, 0.01%)</title><rect x="86.2751%" y="1861" width="0.0115%" height="15" fill="rgb(208,81,34)" fg:x="117376748522" fg:w="15694038"/><text x="86.5251%" y="1871.50"></text></g><g><title>__gthread_active_p (18,263,413 samples, 0.01%)</title><rect x="86.2866%" y="1877" width="0.0134%" height="15" fill="rgb(233,92,54)" fg:x="117392442560" fg:w="18263413"/><text x="86.5366%" y="1887.50"></text></g><g><title>__interceptor_pthread_mutex_unlock (20,940,780 samples, 0.02%)</title><rect x="86.3057%" y="1877" width="0.0154%" height="15" fill="rgb(237,21,14)" fg:x="117418362356" fg:w="20940780"/><text x="86.5557%" y="1887.50"></text></g><g><title>pthread_mutex_unlock@@GLIBC_2.2.5 (75,239,922 samples, 0.06%)</title><rect x="86.3211%" y="1877" width="0.0553%" height="15" fill="rgb(249,128,51)" fg:x="117439303136" fg:w="75239922"/><text x="86.5711%" y="1887.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (227,693,331 samples, 0.17%)</title><rect x="86.2143%" y="1909" width="0.1674%" height="15" fill="rgb(223,129,24)" fg:x="117294043525" fg:w="227693331"/><text x="86.4643%" y="1919.50"></text></g><g><title>std::mutex::unlock (181,796,053 samples, 0.13%)</title><rect x="86.2480%" y="1893" width="0.1336%" height="15" fill="rgb(231,168,25)" fg:x="117339940803" fg:w="181796053"/><text x="86.4980%" y="1903.50"></text></g><g><title>TraceIterator::next_op (988,795,548 samples, 0.73%)</title><rect x="85.6964%" y="1925" width="0.7268%" height="15" fill="rgb(224,39,20)" fg:x="116589407660" fg:w="988795548"/><text x="85.9464%" y="1935.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (39,226,747 samples, 0.03%)</title><rect x="86.3943%" y="1909" width="0.0288%" height="15" fill="rgb(225,152,53)" fg:x="117538976461" fg:w="39226747"/><text x="86.6443%" y="1919.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (16,608,875 samples, 0.01%)</title><rect x="86.4110%" y="1893" width="0.0122%" height="15" fill="rgb(252,17,24)" fg:x="117561594333" fg:w="16608875"/><text x="86.6610%" y="1903.50"></text></g><g><title>__asan_poison_stack_memory (35,972,291 samples, 0.03%)</title><rect x="86.4232%" y="1925" width="0.0264%" height="15" fill="rgb(250,114,30)" fg:x="117578203208" fg:w="35972291"/><text x="86.6732%" y="1935.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (43,622,403 samples, 0.03%)</title><rect x="86.4556%" y="1925" width="0.0321%" height="15" fill="rgb(229,5,4)" fg:x="117622375463" fg:w="43622403"/><text x="86.7056%" y="1935.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (15,747,978 samples, 0.01%)</title><rect x="86.4877%" y="1925" width="0.0116%" height="15" fill="rgb(225,176,49)" fg:x="117665997866" fg:w="15747978"/><text x="86.7377%" y="1935.50"></text></g><g><title>std::__shared_ptr&lt;TraceIterator, (__gnu_cxx::_Lock_policy)2&gt;::get (21,110,661 samples, 0.02%)</title><rect x="86.4993%" y="1925" width="0.0155%" height="15" fill="rgb(224,221,49)" fg:x="117681745844" fg:w="21110661"/><text x="86.7493%" y="1935.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (21,610,435 samples, 0.02%)</title><rect x="86.5148%" y="1925" width="0.0159%" height="15" fill="rgb(253,169,27)" fg:x="117702856505" fg:w="21610435"/><text x="86.7648%" y="1935.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (14,072,648 samples, 0.01%)</title><rect x="86.5307%" y="1925" width="0.0103%" height="15" fill="rgb(211,206,16)" fg:x="117724466940" fg:w="14072648"/><text x="86.7807%" y="1935.50"></text></g><g><title>TraceWorkload::next_op (1,312,764,462 samples, 0.96%)</title><rect x="85.5799%" y="1941" width="0.9649%" height="15" fill="rgb(244,87,35)" fg:x="116430996644" fg:w="1312764462"/><text x="85.8299%" y="1951.50"></text></g><g><title>bool std::chrono::operator&lt; &lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt;(std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; const&amp;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; const&amp;) (14,233,299 samples, 0.01%)</title><rect x="86.5460%" y="1941" width="0.0105%" height="15" fill="rgb(246,28,10)" fg:x="117745321800" fg:w="14233299"/><text x="86.7960%" y="1951.50"></text></g><g><title>bool std::chrono::operator&lt; &lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt;(std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; const&amp;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; const&amp;) (94,813,668 samples, 0.07%)</title><rect x="86.6131%" y="1925" width="0.0697%" height="15" fill="rgb(229,12,44)" fg:x="117836605949" fg:w="94813668"/><text x="86.8631%" y="1935.50"></text></g><g><title>bool std::chrono::operator&lt; &lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;(std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&amp;, std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&amp;) (190,257,458 samples, 0.14%)</title><rect x="86.5565%" y="1941" width="0.1398%" height="15" fill="rgb(210,145,37)" fg:x="117759555099" fg:w="190257458"/><text x="86.8065%" y="1951.50"></text></g><g><title>std::__shared_ptr&lt;TraceIterator, (__gnu_cxx::_Lock_policy)2&gt;::get (18,732,492 samples, 0.01%)</title><rect x="86.7094%" y="1941" width="0.0138%" height="15" fill="rgb(227,112,52)" fg:x="117967573452" fg:w="18732492"/><text x="86.9594%" y="1951.50"></text></g><g><title>std::atomic&lt;bool&gt;::operator bool (32,950,416 samples, 0.02%)</title><rect x="86.7231%" y="1941" width="0.0242%" height="15" fill="rgb(238,155,34)" fg:x="117986305944" fg:w="32950416"/><text x="86.9731%" y="1951.50"></text></g><g><title>__vdso_clock_gettime (52,165,997 samples, 0.04%)</title><rect x="86.7545%" y="1909" width="0.0383%" height="15" fill="rgb(239,226,36)" fg:x="118028987981" fg:w="52165997"/><text x="87.0045%" y="1919.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (62,583,553 samples, 0.05%)</title><rect x="86.7473%" y="1941" width="0.0460%" height="15" fill="rgb(230,16,23)" fg:x="118019256360" fg:w="62583553"/><text x="86.9973%" y="1951.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (54,255,290 samples, 0.04%)</title><rect x="86.7535%" y="1925" width="0.0399%" height="15" fill="rgb(236,171,36)" fg:x="118027584623" fg:w="54255290"/><text x="87.0035%" y="1935.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (19,062,618 samples, 0.01%)</title><rect x="86.7994%" y="1941" width="0.0140%" height="15" fill="rgb(221,22,14)" fg:x="118090042497" fg:w="19062618"/><text x="87.0494%" y="1951.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::operator+= (15,302,806 samples, 0.01%)</title><rect x="86.8189%" y="1941" width="0.0112%" height="15" fill="rgb(242,43,11)" fg:x="118116583687" fg:w="15302806"/><text x="87.0689%" y="1951.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::operator+= (54,847,004 samples, 0.04%)</title><rect x="86.8301%" y="1941" width="0.0403%" height="15" fill="rgb(232,69,23)" fg:x="118131886493" fg:w="54847004"/><text x="87.0801%" y="1951.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::operator+= (32,537,663 samples, 0.02%)</title><rect x="86.8465%" y="1925" width="0.0239%" height="15" fill="rgb(216,180,54)" fg:x="118154195834" fg:w="32537663"/><text x="87.0965%" y="1935.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (46,534,542 samples, 0.03%)</title><rect x="86.8704%" y="1941" width="0.0342%" height="15" fill="rgb(216,5,24)" fg:x="118186733497" fg:w="46534542"/><text x="87.1204%" y="1951.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (33,020,918 samples, 0.02%)</title><rect x="86.9936%" y="1925" width="0.0243%" height="15" fill="rgb(225,89,9)" fg:x="118354327583" fg:w="33020918"/><text x="87.2436%" y="1935.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (14,198,844 samples, 0.01%)</title><rect x="87.0272%" y="1925" width="0.0104%" height="15" fill="rgb(243,75,33)" fg:x="118399970786" fg:w="14198844"/><text x="87.2772%" y="1935.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (23,653,770 samples, 0.02%)</title><rect x="87.1598%" y="1909" width="0.0174%" height="15" fill="rgb(247,141,45)" fg:x="118580452224" fg:w="23653770"/><text x="87.4098%" y="1919.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (412,876,553 samples, 0.30%)</title><rect x="86.9095%" y="1941" width="0.3035%" height="15" fill="rgb(232,177,36)" fg:x="118239834174" fg:w="412876553"/><text x="87.1595%" y="1951.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (238,541,097 samples, 0.18%)</title><rect x="87.0376%" y="1925" width="0.1753%" height="15" fill="rgb(219,125,36)" fg:x="118414169630" fg:w="238541097"/><text x="87.2876%" y="1935.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (48,604,733 samples, 0.04%)</title><rect x="87.1772%" y="1909" width="0.0357%" height="15" fill="rgb(227,94,9)" fg:x="118604105994" fg:w="48604733"/><text x="87.4272%" y="1919.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::ratio&lt;1l, 1l&gt;, long, true, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (89,349,252 samples, 0.07%)</title><rect x="87.2289%" y="1925" width="0.0657%" height="15" fill="rgb(240,34,52)" fg:x="118674456413" fg:w="89349252"/><text x="87.4789%" y="1935.50"></text></g><g><title>std::enable_if&lt;std::chrono::__is_duration&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::value, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (127,304,013 samples, 0.09%)</title><rect x="87.2130%" y="1941" width="0.0936%" height="15" fill="rgb(216,45,12)" fg:x="118652710727" fg:w="127304013"/><text x="87.4630%" y="1951.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt; &gt;::size (26,511,870 samples, 0.02%)</title><rect x="87.3205%" y="1941" width="0.0195%" height="15" fill="rgb(246,21,19)" fg:x="118799016899" fg:w="26511870"/><text x="87.5705%" y="1951.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt; &gt;::operator[] (15,118,558 samples, 0.01%)</title><rect x="87.3400%" y="1941" width="0.0111%" height="15" fill="rgb(213,98,42)" fg:x="118825528769" fg:w="15118558"/><text x="87.5900%" y="1951.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back (28,627,351 samples, 0.02%)</title><rect x="87.3511%" y="1941" width="0.0210%" height="15" fill="rgb(250,136,47)" fg:x="118840647327" fg:w="28627351"/><text x="87.6011%" y="1951.50"></text></g><g><title>[libstdc++.so.6.0.30] (102,613,316,800 samples, 75.42%)</title><rect x="11.9601%" y="2053" width="75.4236%" height="15" fill="rgb(251,124,27)" fg:x="16271610240" fg:w="102613316800"/><text x="12.2101%" y="2063.50">[libstdc++.so.6.0.30]</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; &gt; &gt;::_M_run (102,613,316,800 samples, 75.42%)</title><rect x="11.9601%" y="2037" width="75.4236%" height="15" fill="rgb(229,180,14)" fg:x="16271610240" fg:w="102613316800"/><text x="12.2101%" y="2047.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Worklo..</text></g><g><title>std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; &gt;::operator (102,613,316,800 samples, 75.42%)</title><rect x="11.9601%" y="2021" width="75.4236%" height="15" fill="rgb(245,216,25)" fg:x="16271610240" fg:w="102613316800"/><text x="12.2101%" y="2031.50">std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long..</text></g><g><title>void std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul, 3ul, 4ul&gt; (102,613,316,800 samples, 75.42%)</title><rect x="11.9601%" y="2005" width="75.4236%" height="15" fill="rgb(251,43,5)" fg:x="16271610240" fg:w="102613316800"/><text x="12.2101%" y="2015.50">void std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*,..</text></g><g><title>std::__invoke_result&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt;::type std::__invoke&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; (102,613,316,800 samples, 75.42%)</title><rect x="11.9601%" y="1989" width="75.4236%" height="15" fill="rgb(250,128,24)" fg:x="16271610240" fg:w="102613316800"/><text x="12.2101%" y="1999.50">std::__invoke_result&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt;::type std:..</text></g><g><title>void std::__invoke_impl&lt;void, void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; (102,613,316,800 samples, 75.42%)</title><rect x="11.9601%" y="1973" width="75.4236%" height="15" fill="rgb(217,117,27)" fg:x="16271610240" fg:w="102613316800"/><text x="12.2101%" y="1983.50">void std::__invoke_impl&lt;void, void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt;</text></g><g><title>worker_thread_fn (101,940,615,924 samples, 74.93%)</title><rect x="12.4545%" y="1957" width="74.9291%" height="15" fill="rgb(245,147,4)" fg:x="16944311116" fg:w="101940615924"/><text x="12.7045%" y="1967.50">worker_thread_fn</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::push_back (15,652,362 samples, 0.01%)</title><rect x="87.3721%" y="1941" width="0.0115%" height="15" fill="rgb(242,201,35)" fg:x="118869274678" fg:w="15652362"/><text x="87.6221%" y="1951.50"></text></g><g><title>PoisonAlignedStackMemory (31,089,836 samples, 0.02%)</title><rect x="87.3945%" y="2005" width="0.0229%" height="15" fill="rgb(218,181,1)" fg:x="118899644332" fg:w="31089836"/><text x="87.6445%" y="2015.50"></text></g><g><title>__asan::PoisonShadow (44,359,613 samples, 0.03%)</title><rect x="87.4208%" y="2005" width="0.0326%" height="15" fill="rgb(222,6,29)" fg:x="118935426009" fg:w="44359613"/><text x="87.6708%" y="2015.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (16,219,235 samples, 0.01%)</title><rect x="87.4674%" y="2005" width="0.0119%" height="15" fill="rgb(208,186,3)" fg:x="118998874261" fg:w="16219235"/><text x="87.7174%" y="2015.50"></text></g><g><title>[unknown] (180,574,724 samples, 0.13%)</title><rect x="87.3945%" y="2021" width="0.1327%" height="15" fill="rgb(216,36,26)" fg:x="118899644332" fg:w="180574724"/><text x="87.6445%" y="2031.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (62,088,996 samples, 0.05%)</title><rect x="87.4815%" y="2005" width="0.0456%" height="15" fill="rgb(248,201,23)" fg:x="119018130060" fg:w="62088996"/><text x="87.7315%" y="2015.50"></text></g><g><title>operator new (41,510,022 samples, 0.03%)</title><rect x="87.4967%" y="1989" width="0.0305%" height="15" fill="rgb(251,170,31)" fg:x="119038709034" fg:w="41510022"/><text x="87.7467%" y="1999.50"></text></g><g><title>__asan::Allocator::Deallocate (19,807,515 samples, 0.01%)</title><rect x="87.5278%" y="2021" width="0.0146%" height="15" fill="rgb(207,110,25)" fg:x="119081001512" fg:w="19807515"/><text x="87.7778%" y="2031.50"></text></g><g><title>__memmove_sse2_unaligned_erms (46,357,317 samples, 0.03%)</title><rect x="87.5511%" y="2021" width="0.0341%" height="15" fill="rgb(250,54,15)" fg:x="119112821184" fg:w="46357317"/><text x="87.8011%" y="2031.50"></text></g><g><title>__sanitizer::RunFreeHooks (21,277,783 samples, 0.02%)</title><rect x="87.5852%" y="2021" width="0.0156%" height="15" fill="rgb(227,68,33)" fg:x="119159178501" fg:w="21277783"/><text x="87.8352%" y="2031.50"></text></g><g><title>bool std::has_facet&lt;std::ctype&lt;char&gt; &gt; (39,322,004 samples, 0.03%)</title><rect x="87.6014%" y="2021" width="0.0289%" height="15" fill="rgb(238,34,41)" fg:x="119181232857" fg:w="39322004"/><text x="87.8514%" y="2031.50"></text></g><g><title>bool std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (29,229,144 samples, 0.02%)</title><rect x="87.6303%" y="2021" width="0.0215%" height="15" fill="rgb(220,11,15)" fg:x="119220554861" fg:w="29229144"/><text x="87.8803%" y="2031.50"></text></g><g><title>bool std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (50,495,879 samples, 0.04%)</title><rect x="87.6518%" y="2021" width="0.0371%" height="15" fill="rgb(246,111,35)" fg:x="119249784005" fg:w="50495879"/><text x="87.9018%" y="2031.50"></text></g><g><title>memcpy@GLIBC_2.2.5 (35,346,520 samples, 0.03%)</title><rect x="87.6889%" y="2021" width="0.0260%" height="15" fill="rgb(209,88,53)" fg:x="119300279884" fg:w="35346520"/><text x="87.9389%" y="2031.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (38,232,682 samples, 0.03%)</title><rect x="87.7274%" y="2021" width="0.0281%" height="15" fill="rgb(231,185,47)" fg:x="119352667646" fg:w="38232682"/><text x="87.9774%" y="2031.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (37,913,798 samples, 0.03%)</title><rect x="87.7555%" y="2021" width="0.0279%" height="15" fill="rgb(233,154,1)" fg:x="119390900328" fg:w="37913798"/><text x="88.0055%" y="2031.50"></text></g><g><title>std::ctype&lt;char&gt; const&amp; std::use_facet&lt;std::ctype&lt;char&gt; &gt; (108,882,333 samples, 0.08%)</title><rect x="87.7834%" y="2021" width="0.0800%" height="15" fill="rgb(225,15,46)" fg:x="119428814126" fg:w="108882333"/><text x="88.0334%" y="2031.50"></text></g><g><title>std::ios_base::_M_init (24,755,857 samples, 0.02%)</title><rect x="87.8634%" y="2021" width="0.0182%" height="15" fill="rgb(211,135,41)" fg:x="119537696459" fg:w="24755857"/><text x="88.1134%" y="2031.50"></text></g><g><title>std::locale::id::_M_id (50,799,714 samples, 0.04%)</title><rect x="87.8816%" y="2021" width="0.0373%" height="15" fill="rgb(208,54,0)" fg:x="119562452316" fg:w="50799714"/><text x="88.1316%" y="2031.50"></text></g><g><title>std::locale::locale (23,453,706 samples, 0.02%)</title><rect x="87.9190%" y="2021" width="0.0172%" height="15" fill="rgb(244,136,14)" fg:x="119613252030" fg:w="23453706"/><text x="88.1690%" y="2031.50"></text></g><g><title>std::locale::operator= (73,331,172 samples, 0.05%)</title><rect x="87.9362%" y="2021" width="0.0539%" height="15" fill="rgb(241,56,14)" fg:x="119636705736" fg:w="73331172"/><text x="88.1862%" y="2031.50"></text></g><g><title>std::locale::~locale (56,268,989 samples, 0.04%)</title><rect x="87.9901%" y="2021" width="0.0414%" height="15" fill="rgb(205,80,24)" fg:x="119710036908" fg:w="56268989"/><text x="88.2401%" y="2031.50"></text></g><g><title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (63,084,093 samples, 0.05%)</title><rect x="88.0315%" y="2021" width="0.0464%" height="15" fill="rgb(220,57,4)" fg:x="119766305897" fg:w="63084093"/><text x="88.2815%" y="2031.50"></text></g><g><title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (56,386,077 samples, 0.04%)</title><rect x="88.0778%" y="2021" width="0.0414%" height="15" fill="rgb(226,193,50)" fg:x="119829389990" fg:w="56386077"/><text x="88.3278%" y="2031.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (121,566,179 samples, 0.09%)</title><rect x="88.1943%" y="2005" width="0.0894%" height="15" fill="rgb(231,168,22)" fg:x="119987786510" fg:w="121566179"/><text x="88.4443%" y="2015.50"></text></g><g><title>__asan_region_is_poisoned (95,697,343 samples, 0.07%)</title><rect x="88.2886%" y="2005" width="0.0703%" height="15" fill="rgb(254,215,14)" fg:x="120116110104" fg:w="95697343"/><text x="88.5386%" y="2015.50"></text></g><g><title>__asan_region_is_poisoned@plt (19,552,352 samples, 0.01%)</title><rect x="88.3589%" y="2005" width="0.0144%" height="15" fill="rgb(211,115,16)" fg:x="120211807447" fg:w="19552352"/><text x="88.6089%" y="2015.50"></text></g><g><title>__interceptor_memcpy (92,932,463 samples, 0.07%)</title><rect x="88.3733%" y="2005" width="0.0683%" height="15" fill="rgb(236,210,16)" fg:x="120231359799" fg:w="92932463"/><text x="88.6233%" y="2015.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindImpl (13,759,130 samples, 0.01%)</title><rect x="88.4416%" y="2005" width="0.0101%" height="15" fill="rgb(221,94,12)" fg:x="120324292262" fg:w="13759130"/><text x="88.6916%" y="2015.50"></text></g><g><title>__sanitizer::mem_is_zero (50,720,272 samples, 0.04%)</title><rect x="88.4550%" y="2005" width="0.0373%" height="15" fill="rgb(235,218,49)" fg:x="120342475776" fg:w="50720272"/><text x="88.7050%" y="2015.50"></text></g><g><title>[unknown] (1,526,209,340 samples, 1.12%)</title><rect x="87.3945%" y="2037" width="1.1218%" height="15" fill="rgb(217,114,14)" fg:x="118899644332" fg:w="1526209340"/><text x="87.6445%" y="2047.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (540,077,605 samples, 0.40%)</title><rect x="88.1193%" y="2021" width="0.3970%" height="15" fill="rgb(216,145,22)" fg:x="119885776067" fg:w="540077605"/><text x="88.3693%" y="2031.50"></text></g><g><title>operator new (32,657,624 samples, 0.02%)</title><rect x="88.4923%" y="2005" width="0.0240%" height="15" fill="rgb(217,112,39)" fg:x="120393196048" fg:w="32657624"/><text x="88.7423%" y="2015.50"></text></g><g><title>__GI_____strtoll_l_internal (67,518,720 samples, 0.05%)</title><rect x="88.5163%" y="2037" width="0.0496%" height="15" fill="rgb(225,85,32)" fg:x="120425853672" fg:w="67518720"/><text x="88.7663%" y="2047.50"></text></g><g><title>__GI_strtoll (53,963,525 samples, 0.04%)</title><rect x="88.5659%" y="2037" width="0.0397%" height="15" fill="rgb(245,209,47)" fg:x="120493372392" fg:w="53963525"/><text x="88.8159%" y="2047.50"></text></g><g><title>__asan::Allocator::Allocate (1,739,569,203 samples, 1.28%)</title><rect x="88.6056%" y="2037" width="1.2786%" height="15" fill="rgb(218,220,15)" fg:x="120547335917" fg:w="1739569203"/><text x="88.8556%" y="2047.50"></text></g><g><title>__asan::Allocator::Deallocate (247,191,216 samples, 0.18%)</title><rect x="89.8842%" y="2037" width="0.1817%" height="15" fill="rgb(222,202,31)" fg:x="122286905120" fg:w="247191216"/><text x="90.1342%" y="2047.50"></text></g><g><title>__asan::Allocator::QuarantineChunk (283,254,567 samples, 0.21%)</title><rect x="90.0659%" y="2037" width="0.2082%" height="15" fill="rgb(243,203,4)" fg:x="122534096336" fg:w="283254567"/><text x="90.3159%" y="2047.50"></text></g><g><title>__asan::AsanTSDGet (83,430,771 samples, 0.06%)</title><rect x="90.2741%" y="2037" width="0.0613%" height="15" fill="rgb(237,92,17)" fg:x="122817350903" fg:w="83430771"/><text x="90.5241%" y="2047.50"></text></g><g><title>__asan::CanPoisonMemory (30,833,814 samples, 0.02%)</title><rect x="90.3354%" y="2037" width="0.0227%" height="15" fill="rgb(231,119,7)" fg:x="122900781674" fg:w="30833814"/><text x="90.5854%" y="2047.50"></text></g><g><title>__asan::GetCurrentThread (139,232,016 samples, 0.10%)</title><rect x="90.3581%" y="2037" width="0.1023%" height="15" fill="rgb(237,82,41)" fg:x="122931615488" fg:w="139232016"/><text x="90.6081%" y="2047.50"></text></g><g><title>__asan::GetCurrentThreadStats (80,196,703 samples, 0.06%)</title><rect x="90.4604%" y="2037" width="0.0589%" height="15" fill="rgb(226,81,48)" fg:x="123070847504" fg:w="80196703"/><text x="90.7104%" y="2047.50"></text></g><g><title>__asan::PoisonShadow (269,817,512 samples, 0.20%)</title><rect x="90.5194%" y="2037" width="0.1983%" height="15" fill="rgb(234,70,51)" fg:x="123151044207" fg:w="269817512"/><text x="90.7694%" y="2047.50"></text></g><g><title>__interceptor_strlen (34,978,664 samples, 0.03%)</title><rect x="90.7177%" y="2037" width="0.0257%" height="15" fill="rgb(251,86,4)" fg:x="123420861719" fg:w="34978664"/><text x="90.9677%" y="2047.50"></text></g><g><title>StrtolFixAndCheck (95,823,265 samples, 0.07%)</title><rect x="90.7805%" y="2021" width="0.0704%" height="15" fill="rgb(244,144,28)" fg:x="123506402964" fg:w="95823265"/><text x="91.0305%" y="2031.50"></text></g><g><title>__interceptor_strtol (168,480,937 samples, 0.12%)</title><rect x="90.7472%" y="2037" width="0.1238%" height="15" fill="rgb(232,161,39)" fg:x="123461043365" fg:w="168480937"/><text x="90.9972%" y="2047.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (27,298,073 samples, 0.02%)</title><rect x="90.8510%" y="2021" width="0.0201%" height="15" fill="rgb(247,34,51)" fg:x="123602226229" fg:w="27298073"/><text x="91.1010%" y="2031.50"></text></g><g><title>__lsan::DisabledInThisThread (91,827,001 samples, 0.07%)</title><rect x="90.8754%" y="2037" width="0.0675%" height="15" fill="rgb(225,132,2)" fg:x="123635480320" fg:w="91827001"/><text x="91.1254%" y="2047.50"></text></g><g><title>__memset_avx2_unaligned (138,276,357 samples, 0.10%)</title><rect x="90.9429%" y="2037" width="0.1016%" height="15" fill="rgb(209,159,44)" fg:x="123727307321" fg:w="138276357"/><text x="91.1929%" y="2047.50"></text></g><g><title>__memset_avx2_unaligned_erms (231,497,042 samples, 0.17%)</title><rect x="91.0446%" y="2037" width="0.1702%" height="15" fill="rgb(251,214,1)" fg:x="123865583678" fg:w="231497042"/><text x="91.2946%" y="2047.50"></text></g><g><title>__sanitizer::BlockingMutex::Lock (19,731,374 samples, 0.01%)</title><rect x="91.2147%" y="2037" width="0.0145%" height="15" fill="rgb(247,84,47)" fg:x="124097080720" fg:w="19731374"/><text x="91.4647%" y="2047.50"></text></g><g><title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (262,973,894 samples, 0.19%)</title><rect x="91.2376%" y="2037" width="0.1933%" height="15" fill="rgb(240,111,43)" fg:x="124128246698" fg:w="262973894"/><text x="91.4876%" y="2047.50"></text></g><g><title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Deallocate (41,354,210 samples, 0.03%)</title><rect x="91.4309%" y="2037" width="0.0304%" height="15" fill="rgb(215,214,35)" fg:x="124391220592" fg:w="41354210"/><text x="91.6809%" y="2047.50"></text></g><g><title>__sanitizer::RunFreeHooks (83,060,889 samples, 0.06%)</title><rect x="91.4630%" y="2037" width="0.0611%" height="15" fill="rgb(248,207,23)" fg:x="124434937277" fg:w="83060889"/><text x="91.7130%" y="2047.50"></text></g><g><title>__sanitizer::RunMallocHooks (114,070,145 samples, 0.08%)</title><rect x="91.5241%" y="2037" width="0.0838%" height="15" fill="rgb(214,186,4)" fg:x="124517998166" fg:w="114070145"/><text x="91.7741%" y="2047.50"></text></g><g><title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::GetFromAllocator (59,185,033 samples, 0.04%)</title><rect x="91.6079%" y="2037" width="0.0435%" height="15" fill="rgb(220,133,22)" fg:x="124632068311" fg:w="59185033"/><text x="91.8579%" y="2047.50"></text></g><g><title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::ReturnToAllocator (52,330,593 samples, 0.04%)</title><rect x="91.6543%" y="2037" width="0.0385%" height="15" fill="rgb(239,134,19)" fg:x="124695087070" fg:w="52330593"/><text x="91.9043%" y="2047.50"></text></g><g><title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (67,260,785 samples, 0.05%)</title><rect x="91.6961%" y="2037" width="0.0494%" height="15" fill="rgb(250,140,9)" fg:x="124752042410" fg:w="67260785"/><text x="91.9461%" y="2047.50"></text></g><g><title>__sanitizer::StackDepotPut (67,717,431 samples, 0.05%)</title><rect x="91.7456%" y="2037" width="0.0498%" height="15" fill="rgb(225,59,14)" fg:x="124819303195" fg:w="67717431"/><text x="91.9956%" y="2047.50"></text></g><g><title>__strpbrk_sse42 (120,095,517 samples, 0.09%)</title><rect x="91.7953%" y="2037" width="0.0883%" height="15" fill="rgb(214,152,51)" fg:x="124887020626" fg:w="120095517"/><text x="92.0453%" y="2047.50"></text></g><g><title>__asan::PoisonShadow (120,095,517 samples, 0.09%)</title><rect x="91.7953%" y="2021" width="0.0883%" height="15" fill="rgb(251,227,43)" fg:x="124887020626" fg:w="120095517"/><text x="92.0453%" y="2031.50"></text></g><g><title>pthread_getspecific@@GLIBC_2.34 (165,923,316 samples, 0.12%)</title><rect x="91.8900%" y="2037" width="0.1220%" height="15" fill="rgb(241,96,17)" fg:x="125015770322" fg:w="165923316"/><text x="92.1400%" y="2047.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (37,073,363 samples, 0.03%)</title><rect x="92.0253%" y="2021" width="0.0272%" height="15" fill="rgb(234,198,43)" fg:x="125199926491" fg:w="37073363"/><text x="92.2753%" y="2031.50"></text></g><g><title>__interceptor_strlen.part.0 (24,298,103 samples, 0.02%)</title><rect x="92.0526%" y="2021" width="0.0179%" height="15" fill="rgb(220,108,29)" fg:x="125236999854" fg:w="24298103"/><text x="92.3026%" y="2031.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (104,941,851 samples, 0.08%)</title><rect x="92.0168%" y="2037" width="0.0771%" height="15" fill="rgb(226,163,33)" fg:x="125188310290" fg:w="104941851"/><text x="92.2668%" y="2047.50"></text></g><g><title>__strlen_avx2 (31,954,184 samples, 0.02%)</title><rect x="92.0704%" y="2021" width="0.0235%" height="15" fill="rgb(205,194,45)" fg:x="125261297957" fg:w="31954184"/><text x="92.3204%" y="2031.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (45,252,159 samples, 0.03%)</title><rect x="92.0939%" y="2037" width="0.0333%" height="15" fill="rgb(206,143,44)" fg:x="125293252141" fg:w="45252159"/><text x="92.3439%" y="2047.50"></text></g><g><title>__interceptor_memchr (28,234,926 samples, 0.02%)</title><rect x="92.1272%" y="2005" width="0.0208%" height="15" fill="rgb(236,136,36)" fg:x="125338504300" fg:w="28234926"/><text x="92.3772%" y="2015.50"></text></g><g><title>__interceptor_memchr.part.0 (24,488,411 samples, 0.02%)</title><rect x="92.1479%" y="2005" width="0.0180%" height="15" fill="rgb(249,172,42)" fg:x="125366739226" fg:w="24488411"/><text x="92.3979%" y="2015.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (70,939,404 samples, 0.05%)</title><rect x="92.1756%" y="2005" width="0.0521%" height="15" fill="rgb(216,139,23)" fg:x="125404345436" fg:w="70939404"/><text x="92.4256%" y="2015.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::underflow (92,635,588 samples, 0.07%)</title><rect x="92.2277%" y="2005" width="0.0681%" height="15" fill="rgb(207,166,20)" fg:x="125475284840" fg:w="92635588"/><text x="92.4777%" y="2015.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear (79,967,334 samples, 0.06%)</title><rect x="92.2969%" y="2005" width="0.0588%" height="15" fill="rgb(210,209,22)" fg:x="125569446778" fg:w="79967334"/><text x="92.5469%" y="2015.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (113,260,390 samples, 0.08%)</title><rect x="92.5242%" y="1989" width="0.0832%" height="15" fill="rgb(232,118,20)" fg:x="125878671224" fg:w="113260390"/><text x="92.7742%" y="1999.50"></text></g><g><title>__asan_region_is_poisoned (40,183,743 samples, 0.03%)</title><rect x="92.6075%" y="1989" width="0.0295%" height="15" fill="rgb(238,113,42)" fg:x="125991931614" fg:w="40183743"/><text x="92.8575%" y="1999.50"></text></g><g><title>__interceptor_memchr.part.0 (112,921,255 samples, 0.08%)</title><rect x="92.6456%" y="1989" width="0.0830%" height="15" fill="rgb(231,42,5)" fg:x="126043809267" fg:w="112921255"/><text x="92.8956%" y="1999.50"></text></g><g><title>__memchr_avx2 (123,918,062 samples, 0.09%)</title><rect x="92.7286%" y="1989" width="0.0911%" height="15" fill="rgb(243,166,24)" fg:x="126156730522" fg:w="123918062"/><text x="92.9786%" y="1999.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (655,337,102 samples, 0.48%)</title><rect x="92.3573%" y="2005" width="0.4817%" height="15" fill="rgb(237,226,12)" fg:x="125651624665" fg:w="655337102"/><text x="92.6073%" y="2015.50"></text></g><g><title>__sanitizer::mem_is_zero (26,313,183 samples, 0.02%)</title><rect x="92.8197%" y="1989" width="0.0193%" height="15" fill="rgb(229,133,24)" fg:x="126280648584" fg:w="26313183"/><text x="93.0697%" y="1999.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (972,914,936 samples, 0.72%)</title><rect x="92.1272%" y="2037" width="0.7151%" height="15" fill="rgb(238,33,43)" fg:x="125338504300" fg:w="972914936"/><text x="92.3772%" y="2047.50"></text></g><g><title>[unknown] (972,914,936 samples, 0.72%)</title><rect x="92.1272%" y="2021" width="0.7151%" height="15" fill="rgb(227,59,38)" fg:x="125338504300" fg:w="972914936"/><text x="92.3772%" y="2031.50"></text></g><g><title>std::istream::sentry::sentry (96,932,170 samples, 0.07%)</title><rect x="92.8428%" y="2037" width="0.0712%" height="15" fill="rgb(230,97,0)" fg:x="126312016158" fg:w="96932170"/><text x="93.0928%" y="2047.50"></text></g><g><title>std::locale::operator= (30,770,599 samples, 0.02%)</title><rect x="92.9172%" y="2037" width="0.0226%" height="15" fill="rgb(250,173,50)" fg:x="126413312111" fg:w="30770599"/><text x="93.1672%" y="2047.50"></text></g><g><title>virtual thunk to std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (36,610,966 samples, 0.03%)</title><rect x="92.9462%" y="2037" width="0.0269%" height="15" fill="rgb(240,15,50)" fg:x="126452802579" fg:w="36610966"/><text x="93.1962%" y="2047.50"></text></g><g><title>[unknown] (36,610,966 samples, 0.03%)</title><rect x="92.9462%" y="2021" width="0.0269%" height="15" fill="rgb(221,93,22)" fg:x="126452802579" fg:w="36610966"/><text x="93.1962%" y="2031.50"></text></g><g><title>[unknown] (7,607,332,946 samples, 5.59%)</title><rect x="87.3836%" y="2053" width="5.5916%" height="15" fill="rgb(245,180,53)" fg:x="118884927040" fg:w="7607332946"/><text x="87.6336%" y="2063.50">[unknow..</text></g><g><title>__GI_____strtoll_l_internal (153,344,310 samples, 0.11%)</title><rect x="92.9752%" y="2053" width="0.1127%" height="15" fill="rgb(231,88,51)" fg:x="126492259986" fg:w="153344310"/><text x="93.2252%" y="2063.50"></text></g><g><title>__asan::Allocator::Allocate (1,103,795,064 samples, 0.81%)</title><rect x="93.0879%" y="2053" width="0.8113%" height="15" fill="rgb(240,58,21)" fg:x="126645604296" fg:w="1103795064"/><text x="93.3379%" y="2063.50"></text></g><g><title>__asan::AsanTSDGet (191,779,691 samples, 0.14%)</title><rect x="93.8993%" y="2053" width="0.1410%" height="15" fill="rgb(237,21,10)" fg:x="127749399360" fg:w="191779691"/><text x="94.1493%" y="2063.50"></text></g><g><title>__asan::AsanThread::stack_bottom (136,353,241 samples, 0.10%)</title><rect x="94.0402%" y="2053" width="0.1002%" height="15" fill="rgb(218,43,11)" fg:x="127941179051" fg:w="136353241"/><text x="94.2902%" y="2063.50"></text></g><g><title>__asan::AsanThread::stack_top (138,485,334 samples, 0.10%)</title><rect x="94.1405%" y="2053" width="0.1018%" height="15" fill="rgb(218,221,29)" fg:x="128077532292" fg:w="138485334"/><text x="94.3905%" y="2063.50"></text></g><g><title>__asan::GetCurrentThread (145,769,651 samples, 0.11%)</title><rect x="94.2422%" y="2053" width="0.1071%" height="15" fill="rgb(214,118,42)" fg:x="128216017626" fg:w="145769651"/><text x="94.4922%" y="2063.50"></text></g><g><title>__asan::PoisonShadow (46,066,942 samples, 0.03%)</title><rect x="94.3561%" y="2053" width="0.0339%" height="15" fill="rgb(251,200,26)" fg:x="128370934551" fg:w="46066942"/><text x="94.6061%" y="2063.50"></text></g><g><title>__asan::RZSize2Log (139,315,138 samples, 0.10%)</title><rect x="94.3900%" y="2053" width="0.1024%" height="15" fill="rgb(237,101,39)" fg:x="128417001493" fg:w="139315138"/><text x="94.6400%" y="2063.50"></text></g><g><title>__asan::asan_memalign (33,367,528 samples, 0.02%)</title><rect x="94.4924%" y="2053" width="0.0245%" height="15" fill="rgb(251,117,11)" fg:x="128556316631" fg:w="33367528"/><text x="94.7424%" y="2063.50"></text></g><g><title>__interceptor_memcpy (41,874,997 samples, 0.03%)</title><rect x="94.5197%" y="2053" width="0.0308%" height="15" fill="rgb(216,223,23)" fg:x="128593447427" fg:w="41874997"/><text x="94.7697%" y="2063.50"></text></g><g><title>__memmove_sse2_unaligned_erms (76,356,552 samples, 0.06%)</title><rect x="94.5504%" y="2053" width="0.0561%" height="15" fill="rgb(251,54,12)" fg:x="128635322424" fg:w="76356552"/><text x="94.8004%" y="2063.50"></text></g><g><title>__memset_avx2_unaligned (35,754,848 samples, 0.03%)</title><rect x="94.6066%" y="2053" width="0.0263%" height="15" fill="rgb(254,176,54)" fg:x="128711678976" fg:w="35754848"/><text x="94.8566%" y="2063.50"></text></g><g><title>__memset_avx2_unaligned_erms (21,017,367 samples, 0.02%)</title><rect x="94.6328%" y="2053" width="0.0154%" height="15" fill="rgb(210,32,8)" fg:x="128747433824" fg:w="21017367"/><text x="94.8828%" y="2063.50"></text></g><g><title>__sanitizer::BufferedStackTrace::Unwind (97,423,605 samples, 0.07%)</title><rect x="94.6506%" y="2053" width="0.0716%" height="15" fill="rgb(235,52,38)" fg:x="128771535832" fg:w="97423605"/><text x="94.9006%" y="2063.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindFast (1,123,371,099 samples, 0.83%)</title><rect x="94.7222%" y="2053" width="0.8257%" height="15" fill="rgb(231,4,44)" fg:x="128868959437" fg:w="1123371099"/><text x="94.9722%" y="2063.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindImpl (178,690,976 samples, 0.13%)</title><rect x="95.5479%" y="2053" width="0.1313%" height="15" fill="rgb(249,2,32)" fg:x="129992330536" fg:w="178690976"/><text x="95.7979%" y="2063.50"></text></g><g><title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (71,328,703 samples, 0.05%)</title><rect x="95.6792%" y="2053" width="0.0524%" height="15" fill="rgb(224,65,26)" fg:x="130171021512" fg:w="71328703"/><text x="95.9292%" y="2063.50"></text></g><g><title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Deallocate (18,729,910 samples, 0.01%)</title><rect x="95.7317%" y="2053" width="0.0138%" height="15" fill="rgb(250,73,40)" fg:x="130242350215" fg:w="18729910"/><text x="95.9817%" y="2063.50"></text></g><g><title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (1,227,136,643 samples, 0.90%)</title><rect x="95.7454%" y="2053" width="0.9020%" height="15" fill="rgb(253,177,16)" fg:x="130261080125" fg:w="1227136643"/><text x="95.9954%" y="2063.50"></text></g><g><title>__sanitizer::RunMallocHooks (46,232,087 samples, 0.03%)</title><rect x="96.6500%" y="2053" width="0.0340%" height="15" fill="rgb(217,32,34)" fg:x="131491822341" fg:w="46232087"/><text x="96.9000%" y="2063.50"></text></g><g><title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (1,224,981,317 samples, 0.90%)</title><rect x="96.6879%" y="2053" width="0.9004%" height="15" fill="rgb(212,7,10)" fg:x="131543304323" fg:w="1224981317"/><text x="96.9379%" y="2063.50"></text></g><g><title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::find (397,136,558 samples, 0.29%)</title><rect x="97.5883%" y="2053" width="0.2919%" height="15" fill="rgb(245,89,8)" fg:x="132768285640" fg:w="397136558"/><text x="97.8383%" y="2063.50"></text></g><g><title>memcpy@GLIBC_2.2.5 (21,204,035 samples, 0.02%)</title><rect x="97.8864%" y="2053" width="0.0156%" height="15" fill="rgb(237,16,53)" fg:x="133173929171" fg:w="21204035"/><text x="98.1364%" y="2063.50"></text></g><g><title>memcpy@plt (33,704,907 samples, 0.02%)</title><rect x="97.9020%" y="2053" width="0.0248%" height="15" fill="rgb(250,204,30)" fg:x="133195133206" fg:w="33704907"/><text x="98.1520%" y="2063.50"></text></g><g><title>operator delete (32,837,846 samples, 0.02%)</title><rect x="97.9268%" y="2053" width="0.0241%" height="15" fill="rgb(208,77,27)" fg:x="133228838113" fg:w="32837846"/><text x="98.1768%" y="2063.50"></text></g><g><title>operator new (28,220,229 samples, 0.02%)</title><rect x="97.9509%" y="2053" width="0.0207%" height="15" fill="rgb(250,204,28)" fg:x="133261675959" fg:w="28220229"/><text x="98.2009%" y="2063.50"></text></g><g><title>pthread_getspecific@@GLIBC_2.34 (347,556,478 samples, 0.26%)</title><rect x="97.9717%" y="2053" width="0.2555%" height="15" fill="rgb(244,63,21)" fg:x="133289896188" fg:w="347556478"/><text x="98.2217%" y="2063.50"></text></g><g><title>__asan_region_is_poisoned (57,147,951 samples, 0.04%)</title><rect x="98.2697%" y="2037" width="0.0420%" height="15" fill="rgb(236,85,44)" fg:x="133695363237" fg:w="57147951"/><text x="98.5197%" y="2047.50"></text></g><g><title>__interceptor_memcpy (25,802,106 samples, 0.02%)</title><rect x="98.3133%" y="2037" width="0.0190%" height="15" fill="rgb(215,98,4)" fg:x="133754718811" fg:w="25802106"/><text x="98.5633%" y="2047.50"></text></g><g><title>__sanitizer::mem_is_zero (53,357,008 samples, 0.04%)</title><rect x="98.3378%" y="2037" width="0.0392%" height="15" fill="rgb(235,38,11)" fg:x="133787960524" fg:w="53357008"/><text x="98.5878%" y="2047.50"></text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (220,991,494 samples, 0.16%)</title><rect x="98.2277%" y="2053" width="0.1624%" height="15" fill="rgb(254,186,25)" fg:x="133638239520" fg:w="220991494"/><text x="98.4777%" y="2063.50"></text></g><g><title>operator new (17,913,482 samples, 0.01%)</title><rect x="98.3770%" y="2037" width="0.0132%" height="15" fill="rgb(225,55,31)" fg:x="133841317532" fg:w="17913482"/><text x="98.6270%" y="2047.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (136,010,411 samples, 0.10%)</title><rect x="98.4745%" y="2037" width="0.1000%" height="15" fill="rgb(211,15,21)" fg:x="133974020228" fg:w="136010411"/><text x="98.7245%" y="2047.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (290,462,616 samples, 0.21%)</title><rect x="98.3902%" y="2053" width="0.2135%" height="15" fill="rgb(215,187,41)" fg:x="133859231014" fg:w="290462616"/><text x="98.6402%" y="2063.50"></text></g><g><title>__interceptor_memcpy (39,662,991 samples, 0.03%)</title><rect x="98.5745%" y="2037" width="0.0292%" height="15" fill="rgb(248,69,32)" fg:x="134110030639" fg:w="39662991"/><text x="98.8245%" y="2047.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (90,037,897 samples, 0.07%)</title><rect x="98.6037%" y="2053" width="0.0662%" height="15" fill="rgb(252,102,52)" fg:x="134149693630" fg:w="90037897"/><text x="98.8537%" y="2063.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (69,845,654 samples, 0.05%)</title><rect x="98.8242%" y="2037" width="0.0513%" height="15" fill="rgb(253,140,32)" fg:x="134449679638" fg:w="69845654"/><text x="99.0742%" y="2047.50"></text></g><g><title>__asan_region_is_poisoned (70,289,150 samples, 0.05%)</title><rect x="98.8899%" y="2037" width="0.0517%" height="15" fill="rgb(216,56,42)" fg:x="134539063317" fg:w="70289150"/><text x="99.1399%" y="2047.50"></text></g><g><title>__interceptor_memcpy (91,653,130 samples, 0.07%)</title><rect x="98.9426%" y="2037" width="0.0674%" height="15" fill="rgb(216,184,14)" fg:x="134610875613" fg:w="91653130"/><text x="99.1926%" y="2047.50"></text></g><g><title>__sanitizer::mem_is_zero (49,823,624 samples, 0.04%)</title><rect x="99.0276%" y="2037" width="0.0366%" height="15" fill="rgb(237,187,27)" fg:x="134726413804" fg:w="49823624"/><text x="99.2776%" y="2047.50"></text></g><g><title>operator delete (26,460,518 samples, 0.02%)</title><rect x="99.0642%" y="2037" width="0.0194%" height="15" fill="rgb(219,65,3)" fg:x="134776237428" fg:w="26460518"/><text x="99.3142%" y="2047.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (604,166,404 samples, 0.44%)</title><rect x="98.6698%" y="2053" width="0.4441%" height="15" fill="rgb(245,83,25)" fg:x="134239731527" fg:w="604166404"/><text x="98.9198%" y="2063.50"></text></g><g><title>operator new (41,199,985 samples, 0.03%)</title><rect x="99.0836%" y="2037" width="0.0303%" height="15" fill="rgb(214,205,45)" fg:x="134802697946" fg:w="41199985"/><text x="99.3336%" y="2047.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (43,911,581 samples, 0.03%)</title><rect x="99.1139%" y="2053" width="0.0323%" height="15" fill="rgb(241,20,18)" fg:x="134843897931" fg:w="43911581"/><text x="99.3639%" y="2063.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (32,221,607 samples, 0.02%)</title><rect x="99.1462%" y="2053" width="0.0237%" height="15" fill="rgb(232,163,23)" fg:x="134887809512" fg:w="32221607"/><text x="99.3962%" y="2063.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear (16,470,024 samples, 0.01%)</title><rect x="99.1699%" y="2053" width="0.0121%" height="15" fill="rgb(214,5,46)" fg:x="134920031119" fg:w="16470024"/><text x="99.4199%" y="2063.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (35,448,808 samples, 0.03%)</title><rect x="99.1820%" y="2053" width="0.0261%" height="15" fill="rgb(229,78,17)" fg:x="134936501143" fg:w="35448808"/><text x="99.4320%" y="2063.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (62,210,578 samples, 0.05%)</title><rect x="99.2080%" y="2053" width="0.0457%" height="15" fill="rgb(248,89,10)" fg:x="134971949951" fg:w="62210578"/><text x="99.4580%" y="2063.50"></text></g><g><title>std::ios_base::_M_init (80,362,987 samples, 0.06%)</title><rect x="99.2538%" y="2053" width="0.0591%" height="15" fill="rgb(248,54,15)" fg:x="135034160529" fg:w="80362987"/><text x="99.5038%" y="2063.50"></text></g><g><title>std::istream::sentry::sentry (74,095,216 samples, 0.05%)</title><rect x="99.3128%" y="2053" width="0.0545%" height="15" fill="rgb(223,116,6)" fg:x="135114523516" fg:w="74095216"/><text x="99.5628%" y="2063.50"></text></g><g><title>run_io_trace (118,919,380,936 samples, 87.41%)</title><rect x="11.9601%" y="2069" width="87.4090%" height="15" fill="rgb(205,125,38)" fg:x="16271610240" fg:w="118919380936"/><text x="12.2101%" y="2079.50">run_io_trace</text></g><g><title>[unknown] (28,162,482 samples, 0.02%)</title><rect x="99.3746%" y="2053" width="0.0207%" height="15" fill="rgb(251,78,38)" fg:x="135198553921" fg:w="28162482"/><text x="99.6246%" y="2063.50"></text></g><g><title>sh (46,782,869 samples, 0.03%)</title><rect x="99.3739%" y="2069" width="0.0344%" height="15" fill="rgb(253,78,28)" fg:x="135197582048" fg:w="46782869"/><text x="99.6239%" y="2079.50"></text></g><g><title>[unknown] (19,491,003 samples, 0.01%)</title><rect x="99.4186%" y="2053" width="0.0143%" height="15" fill="rgb(209,120,3)" fg:x="135258400313" fg:w="19491003"/><text x="99.6686%" y="2063.50"></text></g><g><title>sudo (50,901,902 samples, 0.04%)</title><rect x="99.4164%" y="2069" width="0.0374%" height="15" fill="rgb(238,229,9)" fg:x="135255436354" fg:w="50901902"/><text x="99.6664%" y="2079.50"></text></g><g><title>acpi_idle_enter (94,738,509 samples, 0.07%)</title><rect x="99.4814%" y="1957" width="0.0696%" height="15" fill="rgb(253,159,18)" fg:x="135343837394" fg:w="94738509"/><text x="99.7314%" y="1967.50"></text></g><g><title>acpi_idle_do_entry (94,109,322 samples, 0.07%)</title><rect x="99.4818%" y="1941" width="0.0692%" height="15" fill="rgb(244,42,34)" fg:x="135344466581" fg:w="94109322"/><text x="99.7318%" y="1951.50"></text></g><g><title>io_idle (84,011,760 samples, 0.06%)</title><rect x="99.4893%" y="1925" width="0.0618%" height="15" fill="rgb(224,8,7)" fg:x="135354564143" fg:w="84011760"/><text x="99.7393%" y="1935.50"></text></g><g><title>irq_enter_rcu (17,808,752 samples, 0.01%)</title><rect x="99.5596%" y="1925" width="0.0131%" height="15" fill="rgb(210,201,45)" fg:x="135450259160" fg:w="17808752"/><text x="99.8096%" y="1935.50"></text></g><g><title>asm_common_interrupt (29,918,679 samples, 0.02%)</title><rect x="99.5510%" y="1957" width="0.0220%" height="15" fill="rgb(252,185,21)" fg:x="135438575903" fg:w="29918679"/><text x="99.8010%" y="1967.50"></text></g><g><title>common_interrupt (29,918,679 samples, 0.02%)</title><rect x="99.5510%" y="1941" width="0.0220%" height="15" fill="rgb(223,131,1)" fg:x="135438575903" fg:w="29918679"/><text x="99.8010%" y="1951.50"></text></g><g><title>hrtimer_interrupt (17,847,778 samples, 0.01%)</title><rect x="99.5757%" y="1909" width="0.0131%" height="15" fill="rgb(245,141,16)" fg:x="135472216512" fg:w="17847778"/><text x="99.8257%" y="1919.50"></text></g><g><title>__sysvec_apic_timer_interrupt (18,744,309 samples, 0.01%)</title><rect x="99.5751%" y="1925" width="0.0138%" height="15" fill="rgb(229,55,45)" fg:x="135471354218" fg:w="18744309"/><text x="99.8251%" y="1935.50"></text></g><g><title>irqtime_account_irq (14,352,639 samples, 0.01%)</title><rect x="99.5907%" y="1909" width="0.0105%" height="15" fill="rgb(208,92,15)" fg:x="135492601769" fg:w="14352639"/><text x="99.8407%" y="1919.50"></text></g><g><title>tick_check_oneshot_broadcast_this_cpu (13,628,479 samples, 0.01%)</title><rect x="99.6248%" y="1893" width="0.0100%" height="15" fill="rgb(234,185,47)" fg:x="135538945650" fg:w="13628479"/><text x="99.8748%" y="1903.50"></text></g><g><title>irq_enter_rcu (61,110,140 samples, 0.04%)</title><rect x="99.5900%" y="1925" width="0.0449%" height="15" fill="rgb(253,104,50)" fg:x="135491571466" fg:w="61110140"/><text x="99.8400%" y="1935.50"></text></g><g><title>tick_irq_enter (38,448,618 samples, 0.03%)</title><rect x="99.6066%" y="1909" width="0.0283%" height="15" fill="rgb(205,70,7)" fg:x="135514232988" fg:w="38448618"/><text x="99.8566%" y="1919.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (104,489,091 samples, 0.08%)</title><rect x="99.5730%" y="1957" width="0.0768%" height="15" fill="rgb(240,178,43)" fg:x="135468494582" fg:w="104489091"/><text x="99.8230%" y="1967.50"></text></g><g><title>sysvec_apic_timer_interrupt (102,988,418 samples, 0.08%)</title><rect x="99.5741%" y="1941" width="0.0757%" height="15" fill="rgb(214,112,2)" fg:x="135469995255" fg:w="102988418"/><text x="99.8241%" y="1951.50"></text></g><g><title>irqentry_enter (67,914,925 samples, 0.05%)</title><rect x="99.6687%" y="1925" width="0.0499%" height="15" fill="rgb(206,46,17)" fg:x="135598675366" fg:w="67914925"/><text x="99.9187%" y="1935.50"></text></g><g><title>asm_sysvec_call_function_single (93,639,658 samples, 0.07%)</title><rect x="99.6499%" y="1957" width="0.0688%" height="15" fill="rgb(225,220,16)" fg:x="135573036610" fg:w="93639658"/><text x="99.8999%" y="1967.50"></text></g><g><title>sysvec_call_function_single (93,371,687 samples, 0.07%)</title><rect x="99.6500%" y="1941" width="0.0686%" height="15" fill="rgb(238,65,40)" fg:x="135573304581" fg:w="93371687"/><text x="99.9000%" y="1951.50"></text></g><g><title>cpuidle_enter_state (333,050,420 samples, 0.24%)</title><rect x="99.4796%" y="1973" width="0.2448%" height="15" fill="rgb(230,151,21)" fg:x="135341350552" fg:w="333050420"/><text x="99.7296%" y="1983.50"></text></g><g><title>cpuidle_enter (355,746,222 samples, 0.26%)</title><rect x="99.4679%" y="1989" width="0.2615%" height="15" fill="rgb(218,58,49)" fg:x="135325529529" fg:w="355746222"/><text x="99.7179%" y="1999.50"></text></g><g><title>menu_select (22,267,553 samples, 0.02%)</title><rect x="99.7297%" y="1973" width="0.0164%" height="15" fill="rgb(219,179,14)" fg:x="135681661052" fg:w="22267553"/><text x="99.9797%" y="1983.50"></text></g><g><title>cpuidle_select (22,545,728 samples, 0.02%)</title><rect x="99.7295%" y="1989" width="0.0166%" height="15" fill="rgb(223,72,1)" fg:x="135681409193" fg:w="22545728"/><text x="99.9795%" y="1999.50"></text></g><g><title>ttwu_do_activate (23,278,003 samples, 0.02%)</title><rect x="99.7659%" y="1941" width="0.0171%" height="15" fill="rgb(238,126,10)" fg:x="135730961690" fg:w="23278003"/><text x="100.0159%" y="1951.50"></text></g><g><title>enqueue_task (19,074,860 samples, 0.01%)</title><rect x="99.7690%" y="1925" width="0.0140%" height="15" fill="rgb(224,206,38)" fg:x="135735164833" fg:w="19074860"/><text x="100.0190%" y="1935.50"></text></g><g><title>sched_clock_cpu (14,694,217 samples, 0.01%)</title><rect x="99.7845%" y="1925" width="0.0108%" height="15" fill="rgb(212,201,54)" fg:x="135756166347" fg:w="14694217"/><text x="100.0345%" y="1935.50"></text></g><g><title>update_rq_clock (82,951,813 samples, 0.06%)</title><rect x="99.7830%" y="1941" width="0.0610%" height="15" fill="rgb(218,154,48)" fg:x="135754239693" fg:w="82951813"/><text x="100.0330%" y="1951.50"></text></g><g><title>update_rq_clock_task (66,330,942 samples, 0.05%)</title><rect x="99.7953%" y="1925" width="0.0488%" height="15" fill="rgb(232,93,24)" fg:x="135770860564" fg:w="66330942"/><text x="100.0453%" y="1935.50"></text></g><g><title>sched_ttwu_pending (119,188,041 samples, 0.09%)</title><rect x="99.7567%" y="1957" width="0.0876%" height="15" fill="rgb(245,30,21)" fg:x="135718468847" fg:w="119188041"/><text x="100.0067%" y="1967.50"></text></g><g><title>__flush_smp_call_function_queue (128,099,633 samples, 0.09%)</title><rect x="99.7506%" y="1973" width="0.0942%" height="15" fill="rgb(242,148,29)" fg:x="135710070289" fg:w="128099633"/><text x="100.0006%" y="1983.50"></text></g><g><title>flush_smp_call_function_queue (138,059,984 samples, 0.10%)</title><rect x="99.7461%" y="1989" width="0.1015%" height="15" fill="rgb(244,153,54)" fg:x="135703954921" fg:w="138059984"/><text x="99.9961%" y="1999.50"></text></g><g><title>enqueue_task (18,493,303 samples, 0.01%)</title><rect x="99.8731%" y="1829" width="0.0136%" height="15" fill="rgb(252,87,22)" fg:x="135876704088" fg:w="18493303"/><text x="100.1231%" y="1839.50"></text></g><g><title>__sysvec_call_function_single (28,154,308 samples, 0.02%)</title><rect x="99.8676%" y="1909" width="0.0207%" height="15" fill="rgb(210,51,29)" fg:x="135869317215" fg:w="28154308"/><text x="100.1176%" y="1919.50"></text></g><g><title>generic_smp_call_function_single_interrupt (27,394,439 samples, 0.02%)</title><rect x="99.8682%" y="1893" width="0.0201%" height="15" fill="rgb(242,136,47)" fg:x="135870077084" fg:w="27394439"/><text x="100.1182%" y="1903.50"></text></g><g><title>__flush_smp_call_function_queue (27,394,439 samples, 0.02%)</title><rect x="99.8682%" y="1877" width="0.0201%" height="15" fill="rgb(238,68,4)" fg:x="135870077084" fg:w="27394439"/><text x="100.1182%" y="1887.50"></text></g><g><title>sched_ttwu_pending (24,507,334 samples, 0.02%)</title><rect x="99.8703%" y="1861" width="0.0180%" height="15" fill="rgb(242,161,30)" fg:x="135872964189" fg:w="24507334"/><text x="100.1203%" y="1871.50"></text></g><g><title>ttwu_do_activate (21,540,509 samples, 0.02%)</title><rect x="99.8725%" y="1845" width="0.0158%" height="15" fill="rgb(218,58,44)" fg:x="135875931014" fg:w="21540509"/><text x="100.1225%" y="1855.50"></text></g><g><title>finish_task_switch (40,118,545 samples, 0.03%)</title><rect x="99.8648%" y="1957" width="0.0295%" height="15" fill="rgb(252,125,32)" fg:x="135865440633" fg:w="40118545"/><text x="100.1148%" y="1967.50"></text></g><g><title>asm_sysvec_call_function_single (37,674,176 samples, 0.03%)</title><rect x="99.8666%" y="1941" width="0.0277%" height="15" fill="rgb(219,178,0)" fg:x="135867885002" fg:w="37674176"/><text x="100.1166%" y="1951.50"></text></g><g><title>sysvec_call_function_single (37,674,176 samples, 0.03%)</title><rect x="99.8666%" y="1925" width="0.0277%" height="15" fill="rgb(213,152,7)" fg:x="135867885002" fg:w="37674176"/><text x="100.1166%" y="1935.50"></text></g><g><title>pick_next_task_fair (20,541,854 samples, 0.02%)</title><rect x="99.8953%" y="1941" width="0.0151%" height="15" fill="rgb(249,109,34)" fg:x="135906940062" fg:w="20541854"/><text x="100.1453%" y="1951.50"></text></g><g><title>pick_next_task (22,116,215 samples, 0.02%)</title><rect x="99.8943%" y="1957" width="0.0163%" height="15" fill="rgb(232,96,21)" fg:x="135905559178" fg:w="22116215"/><text x="100.1443%" y="1967.50"></text></g><g><title>__sched_text_start (97,104,782 samples, 0.07%)</title><rect x="99.8496%" y="1973" width="0.0714%" height="15" fill="rgb(228,27,39)" fg:x="135844781634" fg:w="97104782"/><text x="100.0996%" y="1983.50"></text></g><g><title>schedule_idle (98,521,179 samples, 0.07%)</title><rect x="99.8490%" y="1989" width="0.0724%" height="15" fill="rgb(211,182,52)" fg:x="135843983973" fg:w="98521179"/><text x="100.0990%" y="1999.50"></text></g><g><title>tick_nohz_idle_exit (15,739,325 samples, 0.01%)</title><rect x="99.9234%" y="1989" width="0.0116%" height="15" fill="rgb(234,178,38)" fg:x="135945189955" fg:w="15739325"/><text x="100.1734%" y="1999.50"></text></g><g><title>do_idle (648,237,177 samples, 0.48%)</title><rect x="99.4621%" y="2005" width="0.4765%" height="15" fill="rgb(221,111,3)" fg:x="135317599502" fg:w="648237177"/><text x="99.7121%" y="2015.50"></text></g><g><title>cpu_startup_entry (653,744,986 samples, 0.48%)</title><rect x="99.4607%" y="2021" width="0.4805%" height="15" fill="rgb(228,175,21)" fg:x="135315674525" fg:w="653744986"/><text x="99.7107%" y="2031.50"></text></g><g><title>[vmlinux] (654,657,824 samples, 0.48%)</title><rect x="99.4607%" y="2037" width="0.4812%" height="15" fill="rgb(228,174,43)" fg:x="135315674525" fg:w="654657824"/><text x="99.7107%" y="2047.50"></text></g><g><title>finish_task_switch (17,248,636 samples, 0.01%)</title><rect x="99.9573%" y="1893" width="0.0127%" height="15" fill="rgb(211,191,0)" fg:x="135991343976" fg:w="17248636"/><text x="100.2073%" y="1903.50"></text></g><g><title>asm_sysvec_call_function_single (16,555,297 samples, 0.01%)</title><rect x="99.9578%" y="1877" width="0.0122%" height="15" fill="rgb(253,117,3)" fg:x="135992037315" fg:w="16555297"/><text x="100.2078%" y="1887.50"></text></g><g><title>sysvec_call_function_single (16,555,297 samples, 0.01%)</title><rect x="99.9578%" y="1861" width="0.0122%" height="15" fill="rgb(241,127,19)" fg:x="135992037315" fg:w="16555297"/><text x="100.2078%" y="1871.50"></text></g><g><title>__sched_text_start (29,695,997 samples, 0.02%)</title><rect x="99.9552%" y="1909" width="0.0218%" height="15" fill="rgb(218,103,12)" fg:x="135988502520" fg:w="29695997"/><text x="100.2052%" y="1919.50"></text></g><g><title>schedule_idle (30,473,282 samples, 0.02%)</title><rect x="99.9552%" y="1925" width="0.0224%" height="15" fill="rgb(236,214,43)" fg:x="135988502520" fg:w="30473282"/><text x="100.2052%" y="1935.50"></text></g><g><title>secondary_startup_64_no_verify (704,057,315 samples, 0.52%)</title><rect x="99.4607%" y="2053" width="0.5175%" height="15" fill="rgb(244,144,19)" fg:x="135315674525" fg:w="704057315"/><text x="99.7107%" y="2063.50"></text></g><g><title>x86_64_start_kernel (49,399,491 samples, 0.04%)</title><rect x="99.9419%" y="2037" width="0.0363%" height="15" fill="rgb(246,188,10)" fg:x="135970332349" fg:w="49399491"/><text x="100.1919%" y="2047.50"></text></g><g><title>[[kernel.vmlinux].init.text] (49,399,491 samples, 0.04%)</title><rect x="99.9419%" y="2021" width="0.0363%" height="15" fill="rgb(212,193,33)" fg:x="135970332349" fg:w="49399491"/><text x="100.1919%" y="2031.50"></text></g><g><title>start_kernel (49,399,491 samples, 0.04%)</title><rect x="99.9419%" y="2005" width="0.0363%" height="15" fill="rgb(241,51,29)" fg:x="135970332349" fg:w="49399491"/><text x="100.1919%" y="2015.50"></text></g><g><title>[[kernel.vmlinux].init.text] (49,399,491 samples, 0.04%)</title><rect x="99.9419%" y="1989" width="0.0363%" height="15" fill="rgb(211,58,19)" fg:x="135970332349" fg:w="49399491"/><text x="100.1919%" y="1999.50"></text></g><g><title>[vmlinux] (49,399,491 samples, 0.04%)</title><rect x="99.9419%" y="1973" width="0.0363%" height="15" fill="rgb(229,111,26)" fg:x="135970332349" fg:w="49399491"/><text x="100.1919%" y="1983.50"></text></g><g><title>cpu_startup_entry (49,399,491 samples, 0.04%)</title><rect x="99.9419%" y="1957" width="0.0363%" height="15" fill="rgb(213,115,40)" fg:x="135970332349" fg:w="49399491"/><text x="100.1919%" y="1967.50"></text></g><g><title>do_idle (49,399,491 samples, 0.04%)</title><rect x="99.9419%" y="1941" width="0.0363%" height="15" fill="rgb(209,56,44)" fg:x="135970332349" fg:w="49399491"/><text x="100.1919%" y="1951.50"></text></g><g><title>swapper (714,052,238 samples, 0.52%)</title><rect x="99.4538%" y="2069" width="0.5248%" height="15" fill="rgb(230,108,32)" fg:x="135306338256" fg:w="714052238"/><text x="99.7038%" y="2079.50"></text></g><g><title>all (136,049,411,681 samples, 100%)</title><rect x="0.0000%" y="2085" width="100.0000%" height="15" fill="rgb(216,165,31)" fg:x="0" fg:w="136049411681"/><text x="0.2500%" y="2095.50"></text></g></svg></svg>