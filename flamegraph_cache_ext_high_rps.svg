<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="110056997628"><g><title>cat (11,893,655 samples, 0.01%)</title><rect x="0.0000%" y="661" width="0.0108%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="11893655"/><text x="0.2500%" y="671.50"></text></g><g><title>cpuUsage.sh (29,085,584 samples, 0.03%)</title><rect x="0.0108%" y="661" width="0.0264%" height="15" fill="rgb(217,0,24)" fg:x="11893655" fg:w="29085584"/><text x="0.2608%" y="671.50"></text></g><g><title>[git] (12,682,729 samples, 0.01%)</title><rect x="0.0589%" y="613" width="0.0115%" height="15" fill="rgb(221,193,54)" fg:x="64777812" fg:w="12682729"/><text x="0.3089%" y="623.50"></text></g><g><title>do_anonymous_page (15,143,764 samples, 0.01%)</title><rect x="0.0738%" y="501" width="0.0138%" height="15" fill="rgb(248,212,6)" fg:x="81218286" fg:w="15143764"/><text x="0.3238%" y="511.50"></text></g><g><title>__handle_mm_fault (17,417,084 samples, 0.02%)</title><rect x="0.0724%" y="549" width="0.0158%" height="15" fill="rgb(208,68,35)" fg:x="79713303" fg:w="17417084"/><text x="0.3224%" y="559.50"></text></g><g><title>handle_pte_fault (17,417,084 samples, 0.02%)</title><rect x="0.0724%" y="533" width="0.0158%" height="15" fill="rgb(232,128,0)" fg:x="79713303" fg:w="17417084"/><text x="0.3224%" y="543.50"></text></g><g><title>do_pte_missing (15,912,101 samples, 0.01%)</title><rect x="0.0738%" y="517" width="0.0145%" height="15" fill="rgb(207,160,47)" fg:x="81218286" fg:w="15912101"/><text x="0.3238%" y="527.50"></text></g><g><title>handle_mm_fault (18,178,333 samples, 0.02%)</title><rect x="0.0724%" y="565" width="0.0165%" height="15" fill="rgb(228,23,34)" fg:x="79713303" fg:w="18178333"/><text x="0.3224%" y="575.50"></text></g><g><title>do_user_addr_fault (24,932,357 samples, 0.02%)</title><rect x="0.0718%" y="581" width="0.0227%" height="15" fill="rgb(218,30,26)" fg:x="78977938" fg:w="24932357"/><text x="0.3218%" y="591.50"></text></g><g><title>exc_page_fault (26,461,973 samples, 0.02%)</title><rect x="0.0711%" y="597" width="0.0240%" height="15" fill="rgb(220,122,19)" fg:x="78198549" fg:w="26461973"/><text x="0.3211%" y="607.50"></text></g><g><title>asm_exc_page_fault (27,966,483 samples, 0.03%)</title><rect x="0.0704%" y="613" width="0.0254%" height="15" fill="rgb(250,228,42)" fg:x="77460541" fg:w="27966483"/><text x="0.3204%" y="623.50"></text></g><g><title>[git] (61,450,695 samples, 0.06%)</title><rect x="0.0428%" y="629" width="0.0558%" height="15" fill="rgb(240,193,28)" fg:x="47083185" fg:w="61450695"/><text x="0.2928%" y="639.50"></text></g><g><title>[unknown] (90,978,488 samples, 0.08%)</title><rect x="0.0428%" y="645" width="0.0827%" height="15" fill="rgb(216,20,37)" fg:x="47083185" fg:w="90978488"/><text x="0.2928%" y="655.50"></text></g><g><title>git (108,513,296 samples, 0.10%)</title><rect x="0.0401%" y="661" width="0.0986%" height="15" fill="rgb(206,188,39)" fg:x="44078339" fg:w="108513296"/><text x="0.2901%" y="671.50"></text></g><g><title>grep (19,049,286 samples, 0.02%)</title><rect x="0.1386%" y="661" width="0.0173%" height="15" fill="rgb(217,207,13)" fg:x="152591635" fg:w="19049286"/><text x="0.3886%" y="671.50"></text></g><g><title>filename_lookup (16,782,452 samples, 0.02%)</title><rect x="0.1738%" y="533" width="0.0152%" height="15" fill="rgb(231,73,38)" fg:x="191262973" fg:w="16782452"/><text x="0.4238%" y="543.50"></text></g><g><title>path_lookupat (15,300,664 samples, 0.01%)</title><rect x="0.1751%" y="517" width="0.0139%" height="15" fill="rgb(225,20,46)" fg:x="192744761" fg:w="15300664"/><text x="0.4251%" y="527.50"></text></g><g><title>user_path_at_empty (19,845,360 samples, 0.02%)</title><rect x="0.1738%" y="549" width="0.0180%" height="15" fill="rgb(210,31,41)" fg:x="191262973" fg:w="19845360"/><text x="0.4238%" y="559.50"></text></g><g><title>do_readlinkat (47,149,531 samples, 0.04%)</title><rect x="0.1718%" y="565" width="0.0428%" height="15" fill="rgb(221,200,47)" fg:x="189074191" fg:w="47149531"/><text x="0.4218%" y="575.50"></text></g><g><title>vfs_readlink (25,115,389 samples, 0.02%)</title><rect x="0.1918%" y="549" width="0.0228%" height="15" fill="rgb(226,26,5)" fg:x="211108333" fg:w="25115389"/><text x="0.4418%" y="559.50"></text></g><g><title>proc_pid_readlink (24,344,695 samples, 0.02%)</title><rect x="0.1925%" y="533" width="0.0221%" height="15" fill="rgb(249,33,26)" fg:x="211879027" fg:w="24344695"/><text x="0.4425%" y="543.50"></text></g><g><title>__x64_sys_readlink (47,856,497 samples, 0.04%)</title><rect x="0.1718%" y="581" width="0.0435%" height="15" fill="rgb(235,183,28)" fg:x="189074191" fg:w="47856497"/><text x="0.4218%" y="591.50"></text></g><g><title>__GI___readlink (53,201,887 samples, 0.05%)</title><rect x="0.1711%" y="629" width="0.0483%" height="15" fill="rgb(221,5,38)" fg:x="188313699" fg:w="53201887"/><text x="0.4211%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (52,441,395 samples, 0.05%)</title><rect x="0.1718%" y="613" width="0.0476%" height="15" fill="rgb(247,18,42)" fg:x="189074191" fg:w="52441395"/><text x="0.4218%" y="623.50"></text></g><g><title>do_syscall_64 (52,441,395 samples, 0.05%)</title><rect x="0.1718%" y="597" width="0.0476%" height="15" fill="rgb(241,131,45)" fg:x="189074191" fg:w="52441395"/><text x="0.4218%" y="607.50"></text></g><g><title>[unknown] (69,113,016 samples, 0.06%)</title><rect x="0.1636%" y="645" width="0.0628%" height="15" fill="rgb(249,31,29)" fg:x="180028904" fg:w="69113016"/><text x="0.4136%" y="655.50"></text></g><g><title>__x64_sys_statx (15,982,489 samples, 0.01%)</title><rect x="0.2372%" y="597" width="0.0145%" height="15" fill="rgb(225,111,53)" fg:x="261031851" fg:w="15982489"/><text x="0.4872%" y="607.50"></text></g><g><title>vfs_statx (12,870,958 samples, 0.01%)</title><rect x="0.2400%" y="581" width="0.0117%" height="15" fill="rgb(238,160,17)" fg:x="264143382" fg:w="12870958"/><text x="0.4900%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (18,935,905 samples, 0.02%)</title><rect x="0.2365%" y="629" width="0.0172%" height="15" fill="rgb(214,148,48)" fg:x="260267796" fg:w="18935905"/><text x="0.4865%" y="639.50"></text></g><g><title>do_syscall_64 (18,171,850 samples, 0.02%)</title><rect x="0.2372%" y="613" width="0.0165%" height="15" fill="rgb(232,36,49)" fg:x="261031851" fg:w="18171850"/><text x="0.4872%" y="623.50"></text></g><g><title>ls (102,173,765 samples, 0.09%)</title><rect x="0.1622%" y="661" width="0.0928%" height="15" fill="rgb(209,103,24)" fg:x="178515844" fg:w="102173765"/><text x="0.4122%" y="671.50"></text></g><g><title>statx (20,421,813 samples, 0.02%)</title><rect x="0.2365%" y="645" width="0.0186%" height="15" fill="rgb(229,88,8)" fg:x="260267796" fg:w="20421813"/><text x="0.4865%" y="655.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,763,167 samples, 0.01%)</title><rect x="0.2683%" y="85" width="0.0134%" height="15" fill="rgb(213,181,19)" fg:x="295275973" fg:w="14763167"/><text x="0.5183%" y="95.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,763,167 samples, 0.01%)</title><rect x="0.2683%" y="69" width="0.0134%" height="15" fill="rgb(254,191,54)" fg:x="295275973" fg:w="14763167"/><text x="0.5183%" y="79.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,763,167 samples, 0.01%)</title><rect x="0.2683%" y="53" width="0.0134%" height="15" fill="rgb(241,83,37)" fg:x="295275973" fg:w="14763167"/><text x="0.5183%" y="63.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,763,167 samples, 0.01%)</title><rect x="0.2683%" y="37" width="0.0134%" height="15" fill="rgb(233,36,39)" fg:x="295275973" fg:w="14763167"/><text x="0.5183%" y="47.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,325,552 samples, 0.01%)</title><rect x="0.2677%" y="149" width="0.0148%" height="15" fill="rgb(226,3,54)" fg:x="294629672" fg:w="16325552"/><text x="0.5177%" y="159.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,163,128 samples, 0.01%)</title><rect x="0.2679%" y="133" width="0.0147%" height="15" fill="rgb(245,192,40)" fg:x="294792096" fg:w="16163128"/><text x="0.5179%" y="143.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (16,163,128 samples, 0.01%)</title><rect x="0.2679%" y="117" width="0.0147%" height="15" fill="rgb(238,167,29)" fg:x="294792096" fg:w="16163128"/><text x="0.5179%" y="127.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,163,128 samples, 0.01%)</title><rect x="0.2679%" y="101" width="0.0147%" height="15" fill="rgb(232,182,51)" fg:x="294792096" fg:w="16163128"/><text x="0.5179%" y="111.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21,819,300 samples, 0.02%)</title><rect x="0.2673%" y="213" width="0.0198%" height="15" fill="rgb(231,60,39)" fg:x="294192785" fg:w="21819300"/><text x="0.5173%" y="223.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21,382,413 samples, 0.02%)</title><rect x="0.2677%" y="197" width="0.0194%" height="15" fill="rgb(208,69,12)" fg:x="294629672" fg:w="21382413"/><text x="0.5177%" y="207.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (21,382,413 samples, 0.02%)</title><rect x="0.2677%" y="181" width="0.0194%" height="15" fill="rgb(235,93,37)" fg:x="294629672" fg:w="21382413"/><text x="0.5177%" y="191.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21,382,413 samples, 0.02%)</title><rect x="0.2677%" y="165" width="0.0194%" height="15" fill="rgb(213,116,39)" fg:x="294629672" fg:w="21382413"/><text x="0.5177%" y="175.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,083,583 samples, 0.02%)</title><rect x="0.2658%" y="277" width="0.0228%" height="15" fill="rgb(222,207,29)" fg:x="292582663" fg:w="25083583"/><text x="0.5158%" y="287.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24,658,359 samples, 0.02%)</title><rect x="0.2662%" y="261" width="0.0224%" height="15" fill="rgb(206,96,30)" fg:x="293007887" fg:w="24658359"/><text x="0.5162%" y="271.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24,275,408 samples, 0.02%)</title><rect x="0.2666%" y="245" width="0.0221%" height="15" fill="rgb(218,138,4)" fg:x="293390838" fg:w="24275408"/><text x="0.5166%" y="255.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24,275,408 samples, 0.02%)</title><rect x="0.2666%" y="229" width="0.0221%" height="15" fill="rgb(250,191,14)" fg:x="293390838" fg:w="24275408"/><text x="0.5166%" y="239.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (30,144,176 samples, 0.03%)</title><rect x="0.2646%" y="341" width="0.0274%" height="15" fill="rgb(239,60,40)" fg:x="291176665" fg:w="30144176"/><text x="0.5146%" y="351.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (30,144,176 samples, 0.03%)</title><rect x="0.2646%" y="325" width="0.0274%" height="15" fill="rgb(206,27,48)" fg:x="291176665" fg:w="30144176"/><text x="0.5146%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (29,682,427 samples, 0.03%)</title><rect x="0.2650%" y="309" width="0.0270%" height="15" fill="rgb(225,35,8)" fg:x="291638414" fg:w="29682427"/><text x="0.5150%" y="319.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (29,682,427 samples, 0.03%)</title><rect x="0.2650%" y="293" width="0.0270%" height="15" fill="rgb(250,213,24)" fg:x="291638414" fg:w="29682427"/><text x="0.5150%" y="303.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (33,115,108 samples, 0.03%)</title><rect x="0.2630%" y="405" width="0.0301%" height="15" fill="rgb(247,123,22)" fg:x="289430028" fg:w="33115108"/><text x="0.5130%" y="415.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (32,547,510 samples, 0.03%)</title><rect x="0.2635%" y="389" width="0.0296%" height="15" fill="rgb(231,138,38)" fg:x="289997626" fg:w="32547510"/><text x="0.5135%" y="399.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (32,405,318 samples, 0.03%)</title><rect x="0.2636%" y="373" width="0.0294%" height="15" fill="rgb(231,145,46)" fg:x="290139818" fg:w="32405318"/><text x="0.5136%" y="383.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (32,405,318 samples, 0.03%)</title><rect x="0.2636%" y="357" width="0.0294%" height="15" fill="rgb(251,118,11)" fg:x="290139818" fg:w="32405318"/><text x="0.5136%" y="367.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (37,831,064 samples, 0.03%)</title><rect x="0.2607%" y="501" width="0.0344%" height="15" fill="rgb(217,147,25)" fg:x="286953969" fg:w="37831064"/><text x="0.5107%" y="511.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,929,787 samples, 0.03%)</title><rect x="0.2616%" y="485" width="0.0336%" height="15" fill="rgb(247,81,37)" fg:x="287855246" fg:w="36929787"/><text x="0.5116%" y="495.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,929,787 samples, 0.03%)</title><rect x="0.2616%" y="469" width="0.0336%" height="15" fill="rgb(209,12,38)" fg:x="287855246" fg:w="36929787"/><text x="0.5116%" y="479.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,929,787 samples, 0.03%)</title><rect x="0.2616%" y="453" width="0.0336%" height="15" fill="rgb(227,1,9)" fg:x="287855246" fg:w="36929787"/><text x="0.5116%" y="463.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (35,703,510 samples, 0.03%)</title><rect x="0.2627%" y="437" width="0.0324%" height="15" fill="rgb(248,47,43)" fg:x="289081523" fg:w="35703510"/><text x="0.5127%" y="447.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (35,355,005 samples, 0.03%)</title><rect x="0.2630%" y="421" width="0.0321%" height="15" fill="rgb(221,10,30)" fg:x="289430028" fg:w="35355005"/><text x="0.5130%" y="431.50"></text></g><g><title>Glob::isIgnored (40,613,622 samples, 0.04%)</title><rect x="0.2585%" y="533" width="0.0369%" height="15" fill="rgb(210,229,1)" fg:x="284525319" fg:w="40613622"/><text x="0.5085%" y="543.50"></text></g><g><title>bool std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;, (std::__detail::_RegexExecutorPolicy)0, true&gt; (39,968,175 samples, 0.04%)</title><rect x="0.2591%" y="517" width="0.0363%" height="15" fill="rgb(222,148,37)" fg:x="285170766" fg:w="39968175"/><text x="0.5091%" y="527.50"></text></g><g><title>Watcher::isIgnored (41,760,695 samples, 0.04%)</title><rect x="0.2578%" y="549" width="0.0379%" height="15" fill="rgb(234,67,33)" fg:x="283737197" fg:w="41760695"/><text x="0.5078%" y="559.50"></text></g><g><title>InotifyBackend::handleSubscription (45,835,925 samples, 0.04%)</title><rect x="0.2561%" y="565" width="0.0416%" height="15" fill="rgb(247,98,35)" fg:x="281859501" fg:w="45835925"/><text x="0.5061%" y="575.50"></text></g><g><title>__se_sys_newstat (11,244,161 samples, 0.01%)</title><rect x="0.2987%" y="501" width="0.0102%" height="15" fill="rgb(247,138,52)" fg:x="328694253" fg:w="11244161"/><text x="0.5487%" y="511.50"></text></g><g><title>__x64_sys_newstat (11,562,755 samples, 0.01%)</title><rect x="0.2987%" y="517" width="0.0105%" height="15" fill="rgb(213,79,30)" fg:x="328694253" fg:w="11562755"/><text x="0.5487%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (12,965,450 samples, 0.01%)</title><rect x="0.2987%" y="549" width="0.0118%" height="15" fill="rgb(246,177,23)" fg:x="328694253" fg:w="12965450"/><text x="0.5487%" y="559.50"></text></g><g><title>do_syscall_64 (12,965,450 samples, 0.01%)</title><rect x="0.2987%" y="533" width="0.0118%" height="15" fill="rgb(230,62,27)" fg:x="328694253" fg:w="12965450"/><text x="0.5487%" y="543.50"></text></g><g><title>__xstat64 (14,867,083 samples, 0.01%)</title><rect x="0.2980%" y="565" width="0.0135%" height="15" fill="rgb(216,154,8)" fg:x="327968899" fg:w="14867083"/><text x="0.5480%" y="575.50"></text></g><g><title>InotifyBackend::handleEvent (64,194,025 samples, 0.06%)</title><rect x="0.2561%" y="581" width="0.0583%" height="15" fill="rgb(244,35,45)" fg:x="281859501" fg:w="64194025"/><text x="0.5061%" y="591.50"></text></g><g><title>InotifyBackend::handleEvents (65,720,526 samples, 0.06%)</title><rect x="0.2561%" y="597" width="0.0597%" height="15" fill="rgb(251,115,12)" fg:x="281859501" fg:w="65720526"/><text x="0.5061%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (15,855,064 samples, 0.01%)</title><rect x="0.3171%" y="581" width="0.0144%" height="15" fill="rgb(240,54,50)" fg:x="349022071" fg:w="15855064"/><text x="0.5671%" y="591.50"></text></g><g><title>do_syscall_64 (14,956,610 samples, 0.01%)</title><rect x="0.3179%" y="565" width="0.0136%" height="15" fill="rgb(233,84,52)" fg:x="349920525" fg:w="14956610"/><text x="0.5679%" y="575.50"></text></g><g><title>InotifyBackend::start (84,209,230 samples, 0.08%)</title><rect x="0.2561%" y="613" width="0.0765%" height="15" fill="rgb(207,117,47)" fg:x="281859501" fg:w="84209230"/><text x="0.5061%" y="623.50"></text></g><g><title>read (17,960,371 samples, 0.02%)</title><rect x="0.3163%" y="597" width="0.0163%" height="15" fill="rgb(249,43,39)" fg:x="348108360" fg:w="17960371"/><text x="0.5663%" y="607.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Backend::run()::{lambda()#1}&gt; &gt; &gt;::_M_run (92,911,105 samples, 0.08%)</title><rect x="0.2561%" y="629" width="0.0844%" height="15" fill="rgb(209,38,44)" fg:x="281859501" fg:w="92911105"/><text x="0.5061%" y="639.50"></text></g><g><title>[libstdc++.so.6.0.30] (93,173,774 samples, 0.08%)</title><rect x="0.2561%" y="645" width="0.0847%" height="15" fill="rgb(236,212,23)" fg:x="281859501" fg:w="93173774"/><text x="0.5061%" y="655.50"></text></g><g><title>[unknown] (19,096,860 samples, 0.02%)</title><rect x="0.3409%" y="629" width="0.0174%" height="15" fill="rgb(242,79,21)" fg:x="375235532" fg:w="19096860"/><text x="0.5909%" y="639.50"></text></g><g><title>__sched_text_start (28,050,600 samples, 0.03%)</title><rect x="0.3711%" y="501" width="0.0255%" height="15" fill="rgb(211,96,35)" fg:x="408450294" fg:w="28050600"/><text x="0.6211%" y="511.50"></text></g><g><title>do_futex (38,157,226 samples, 0.03%)</title><rect x="0.3647%" y="549" width="0.0347%" height="15" fill="rgb(253,215,40)" fg:x="401343412" fg:w="38157226"/><text x="0.6147%" y="559.50"></text></g><g><title>futex_wait (38,157,226 samples, 0.03%)</title><rect x="0.3647%" y="533" width="0.0347%" height="15" fill="rgb(211,81,21)" fg:x="401343412" fg:w="38157226"/><text x="0.6147%" y="543.50"></text></g><g><title>schedule (31,799,219 samples, 0.03%)</title><rect x="0.3704%" y="517" width="0.0289%" height="15" fill="rgb(208,190,38)" fg:x="407701419" fg:w="31799219"/><text x="0.6204%" y="527.50"></text></g><g><title>__x64_sys_futex (40,696,381 samples, 0.04%)</title><rect x="0.3630%" y="581" width="0.0370%" height="15" fill="rgb(235,213,38)" fg:x="399472286" fg:w="40696381"/><text x="0.6130%" y="591.50"></text></g><g><title>__se_sys_futex (40,696,381 samples, 0.04%)</title><rect x="0.3630%" y="565" width="0.0370%" height="15" fill="rgb(237,122,38)" fg:x="399472286" fg:w="40696381"/><text x="0.6130%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (48,273,501 samples, 0.04%)</title><rect x="0.3617%" y="613" width="0.0439%" height="15" fill="rgb(244,218,35)" fg:x="398066486" fg:w="48273501"/><text x="0.6117%" y="623.50"></text></g><g><title>do_syscall_64 (46,867,701 samples, 0.04%)</title><rect x="0.3630%" y="597" width="0.0426%" height="15" fill="rgb(240,68,47)" fg:x="399472286" fg:w="46867701"/><text x="0.6130%" y="607.50"></text></g><g><title>__GI___futex_abstimed_wait_cancelable64 (56,815,481 samples, 0.05%)</title><rect x="0.3585%" y="629" width="0.0516%" height="15" fill="rgb(210,16,53)" fg:x="394535626" fg:w="56815481"/><text x="0.6085%" y="639.50"></text></g><g><title>_int_free (12,624,446 samples, 0.01%)</title><rect x="0.4260%" y="629" width="0.0115%" height="15" fill="rgb(235,124,12)" fg:x="468886659" fg:w="12624446"/><text x="0.6760%" y="639.50"></text></g><g><title>[unknown] (117,255,260 samples, 0.11%)</title><rect x="0.3408%" y="645" width="0.1065%" height="15" fill="rgb(224,169,11)" fg:x="375033275" fg:w="117255260"/><text x="0.5908%" y="655.50"></text></g><g><title>get_page_from_freelist (11,223,574 samples, 0.01%)</title><rect x="0.4758%" y="405" width="0.0102%" height="15" fill="rgb(250,166,2)" fg:x="523655188" fg:w="11223574"/><text x="0.7258%" y="415.50"></text></g><g><title>alloc_pages (17,261,339 samples, 0.02%)</title><rect x="0.4710%" y="437" width="0.0157%" height="15" fill="rgb(242,216,29)" fg:x="518403113" fg:w="17261339"/><text x="0.7210%" y="447.50"></text></g><g><title>__alloc_pages (17,261,339 samples, 0.02%)</title><rect x="0.4710%" y="421" width="0.0157%" height="15" fill="rgb(230,116,27)" fg:x="518403113" fg:w="17261339"/><text x="0.7210%" y="431.50"></text></g><g><title>__pte_alloc (20,433,286 samples, 0.02%)</title><rect x="0.4703%" y="469" width="0.0186%" height="15" fill="rgb(228,99,48)" fg:x="517606777" fg:w="20433286"/><text x="0.7203%" y="479.50"></text></g><g><title>pte_alloc_one (20,433,286 samples, 0.02%)</title><rect x="0.4703%" y="453" width="0.0186%" height="15" fill="rgb(253,11,6)" fg:x="517606777" fg:w="20433286"/><text x="0.7203%" y="463.50"></text></g><g><title>copy_present_pte (181,870,693 samples, 0.17%)</title><rect x="0.4930%" y="469" width="0.1653%" height="15" fill="rgb(247,143,39)" fg:x="542604910" fg:w="181870693"/><text x="0.7430%" y="479.50"></text></g><g><title>copy_page_range (222,381,922 samples, 0.20%)</title><rect x="0.4596%" y="517" width="0.2021%" height="15" fill="rgb(236,97,10)" fg:x="505782598" fg:w="222381922"/><text x="0.7096%" y="527.50"></text></g><g><title>copy_p4d_range (221,588,669 samples, 0.20%)</title><rect x="0.4603%" y="501" width="0.2013%" height="15" fill="rgb(233,208,19)" fg:x="506575851" fg:w="221588669"/><text x="0.7103%" y="511.50"></text></g><g><title>copy_pte_range (221,588,669 samples, 0.20%)</title><rect x="0.4603%" y="485" width="0.2013%" height="15" fill="rgb(216,164,2)" fg:x="506575851" fg:w="221588669"/><text x="0.7103%" y="495.50"></text></g><g><title>copy_mm (255,269,311 samples, 0.23%)</title><rect x="0.4480%" y="549" width="0.2319%" height="15" fill="rgb(220,129,5)" fg:x="493085203" fg:w="255269311"/><text x="0.6980%" y="559.50"></text></g><g><title>dup_mmap (255,269,311 samples, 0.23%)</title><rect x="0.4480%" y="533" width="0.2319%" height="15" fill="rgb(242,17,10)" fg:x="493085203" fg:w="255269311"/><text x="0.6980%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (256,644,624 samples, 0.23%)</title><rect x="0.4473%" y="629" width="0.2332%" height="15" fill="rgb(242,107,0)" fg:x="492288535" fg:w="256644624"/><text x="0.6973%" y="639.50"></text></g><g><title>do_syscall_64 (256,644,624 samples, 0.23%)</title><rect x="0.4473%" y="613" width="0.2332%" height="15" fill="rgb(251,28,31)" fg:x="492288535" fg:w="256644624"/><text x="0.6973%" y="623.50"></text></g><g><title>__x64_sys_clone (256,644,624 samples, 0.23%)</title><rect x="0.4473%" y="597" width="0.2332%" height="15" fill="rgb(233,223,10)" fg:x="492288535" fg:w="256644624"/><text x="0.6973%" y="607.50"></text></g><g><title>kernel_clone (256,644,624 samples, 0.23%)</title><rect x="0.4473%" y="581" width="0.2332%" height="15" fill="rgb(215,21,27)" fg:x="492288535" fg:w="256644624"/><text x="0.6973%" y="591.50"></text></g><g><title>copy_process (256,644,624 samples, 0.23%)</title><rect x="0.4473%" y="565" width="0.2332%" height="15" fill="rgb(232,23,21)" fg:x="492288535" fg:w="256644624"/><text x="0.6973%" y="575.50"></text></g><g><title>_Fork (256,702,940 samples, 0.23%)</title><rect x="0.4473%" y="645" width="0.2332%" height="15" fill="rgb(244,5,23)" fg:x="492288535" fg:w="256702940"/><text x="0.6973%" y="655.50"></text></g><g><title>page_remove_rmap (36,347,365 samples, 0.03%)</title><rect x="0.8610%" y="373" width="0.0330%" height="15" fill="rgb(226,81,46)" fg:x="947547755" fg:w="36347365"/><text x="1.1110%" y="383.50"></text></g><g><title>free_swap_cache (14,731,458 samples, 0.01%)</title><rect x="0.8946%" y="341" width="0.0134%" height="15" fill="rgb(247,70,30)" fg:x="984603241" fg:w="14731458"/><text x="1.1446%" y="351.50"></text></g><g><title>tlb_flush_mmu (33,123,221 samples, 0.03%)</title><rect x="0.8940%" y="373" width="0.0301%" height="15" fill="rgb(212,68,19)" fg:x="983895120" fg:w="33123221"/><text x="1.1440%" y="383.50"></text></g><g><title>free_pages_and_swap_cache (32,415,100 samples, 0.03%)</title><rect x="0.8946%" y="357" width="0.0295%" height="15" fill="rgb(240,187,13)" fg:x="984603241" fg:w="32415100"/><text x="1.1446%" y="367.50"></text></g><g><title>release_pages (16,888,772 samples, 0.02%)</title><rect x="0.9087%" y="341" width="0.0153%" height="15" fill="rgb(223,113,26)" fg:x="1000129569" fg:w="16888772"/><text x="1.1587%" y="351.50"></text></g><g><title>exec_mmap (281,065,730 samples, 0.26%)</title><rect x="0.6813%" y="517" width="0.2554%" height="15" fill="rgb(206,192,2)" fg:x="749785834" fg:w="281065730"/><text x="0.9313%" y="527.50"></text></g><g><title>mmput (281,065,730 samples, 0.26%)</title><rect x="0.6813%" y="501" width="0.2554%" height="15" fill="rgb(241,108,4)" fg:x="749785834" fg:w="281065730"/><text x="0.9313%" y="511.50"></text></g><g><title>__mmput (281,065,730 samples, 0.26%)</title><rect x="0.6813%" y="485" width="0.2554%" height="15" fill="rgb(247,173,49)" fg:x="749785834" fg:w="281065730"/><text x="0.9313%" y="495.50"></text></g><g><title>exit_mmap (280,275,907 samples, 0.25%)</title><rect x="0.6820%" y="469" width="0.2547%" height="15" fill="rgb(224,114,35)" fg:x="750575657" fg:w="280275907"/><text x="0.9320%" y="479.50"></text></g><g><title>unmap_vmas (264,876,129 samples, 0.24%)</title><rect x="0.6960%" y="453" width="0.2407%" height="15" fill="rgb(245,159,27)" fg:x="765975435" fg:w="264876129"/><text x="0.9460%" y="463.50"></text></g><g><title>unmap_single_vma (264,303,837 samples, 0.24%)</title><rect x="0.6965%" y="437" width="0.2402%" height="15" fill="rgb(245,172,44)" fg:x="766547727" fg:w="264303837"/><text x="0.9465%" y="447.50"></text></g><g><title>unmap_page_range (264,303,837 samples, 0.24%)</title><rect x="0.6965%" y="421" width="0.2402%" height="15" fill="rgb(236,23,11)" fg:x="766547727" fg:w="264303837"/><text x="0.9465%" y="431.50"></text></g><g><title>zap_p4d_range (264,303,837 samples, 0.24%)</title><rect x="0.6965%" y="405" width="0.2402%" height="15" fill="rgb(205,117,38)" fg:x="766547727" fg:w="264303837"/><text x="0.9465%" y="415.50"></text></g><g><title>zap_pte_range (255,239,354 samples, 0.23%)</title><rect x="0.7047%" y="389" width="0.2319%" height="15" fill="rgb(237,72,25)" fg:x="775612210" fg:w="255239354"/><text x="0.9547%" y="399.50"></text></g><g><title>__GI___execve (282,607,304 samples, 0.26%)</title><rect x="0.6805%" y="645" width="0.2568%" height="15" fill="rgb(244,70,9)" fg:x="748991475" fg:w="282607304"/><text x="0.9305%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (282,607,304 samples, 0.26%)</title><rect x="0.6805%" y="629" width="0.2568%" height="15" fill="rgb(217,125,39)" fg:x="748991475" fg:w="282607304"/><text x="0.9305%" y="639.50"></text></g><g><title>do_syscall_64 (282,607,304 samples, 0.26%)</title><rect x="0.6805%" y="613" width="0.2568%" height="15" fill="rgb(235,36,10)" fg:x="748991475" fg:w="282607304"/><text x="0.9305%" y="623.50"></text></g><g><title>__x64_sys_execve (282,607,304 samples, 0.26%)</title><rect x="0.6805%" y="597" width="0.2568%" height="15" fill="rgb(251,123,47)" fg:x="748991475" fg:w="282607304"/><text x="0.9305%" y="607.50"></text></g><g><title>do_execveat_common (282,607,304 samples, 0.26%)</title><rect x="0.6805%" y="581" width="0.2568%" height="15" fill="rgb(221,13,13)" fg:x="748991475" fg:w="282607304"/><text x="0.9305%" y="591.50"></text></g><g><title>bprm_execve (282,607,304 samples, 0.26%)</title><rect x="0.6805%" y="565" width="0.2568%" height="15" fill="rgb(238,131,9)" fg:x="748991475" fg:w="282607304"/><text x="0.9305%" y="575.50"></text></g><g><title>load_elf_binary (282,607,304 samples, 0.26%)</title><rect x="0.6805%" y="549" width="0.2568%" height="15" fill="rgb(211,50,8)" fg:x="748991475" fg:w="282607304"/><text x="0.9305%" y="559.50"></text></g><g><title>begin_new_exec (282,607,304 samples, 0.26%)</title><rect x="0.6805%" y="533" width="0.2568%" height="15" fill="rgb(245,182,24)" fg:x="748991475" fg:w="282607304"/><text x="0.9305%" y="543.50"></text></g><g><title>__sched_text_start (37,016,636 samples, 0.03%)</title><rect x="0.9786%" y="405" width="0.0336%" height="15" fill="rgb(242,14,37)" fg:x="1076986631" fg:w="37016636"/><text x="1.2286%" y="415.50"></text></g><g><title>schedule (40,182,138 samples, 0.04%)</title><rect x="0.9786%" y="421" width="0.0365%" height="15" fill="rgb(246,228,12)" fg:x="1076986631" fg:w="40182138"/><text x="1.2286%" y="431.50"></text></g><g><title>schedule_hrtimeout_range (47,265,029 samples, 0.04%)</title><rect x="0.9725%" y="453" width="0.0429%" height="15" fill="rgb(213,55,15)" fg:x="1070303602" fg:w="47265029"/><text x="1.2225%" y="463.50"></text></g><g><title>schedule_hrtimeout_range_clock (46,623,003 samples, 0.04%)</title><rect x="0.9731%" y="437" width="0.0424%" height="15" fill="rgb(209,9,3)" fg:x="1070945628" fg:w="46623003"/><text x="1.2231%" y="447.50"></text></g><g><title>do_epoll_wait (65,312,223 samples, 0.06%)</title><rect x="0.9577%" y="469" width="0.0593%" height="15" fill="rgb(230,59,30)" fg:x="1054051258" fg:w="65312223"/><text x="1.2077%" y="479.50"></text></g><g><title>__se_sys_epoll_pwait (69,723,027 samples, 0.06%)</title><rect x="0.9563%" y="485" width="0.0634%" height="15" fill="rgb(209,121,21)" fg:x="1052466261" fg:w="69723027"/><text x="1.2063%" y="495.50"></text></g><g><title>__x64_sys_epoll_pwait (71,873,166 samples, 0.07%)</title><rect x="0.9553%" y="501" width="0.0653%" height="15" fill="rgb(220,109,13)" fg:x="1051325427" fg:w="71873166"/><text x="1.2053%" y="511.50"></text></g><g><title>do_syscall_64 (83,637,721 samples, 0.08%)</title><rect x="0.9553%" y="517" width="0.0760%" height="15" fill="rgb(232,18,1)" fg:x="1051325427" fg:w="83637721"/><text x="1.2053%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (85,686,693 samples, 0.08%)</title><rect x="0.9535%" y="533" width="0.0779%" height="15" fill="rgb(215,41,42)" fg:x="1049399138" fg:w="85686693"/><text x="1.2035%" y="543.50"></text></g><g><title>epoll_pwait (98,548,319 samples, 0.09%)</title><rect x="0.9508%" y="549" width="0.0895%" height="15" fill="rgb(224,123,36)" fg:x="1046376691" fg:w="98548319"/><text x="1.2008%" y="559.50"></text></g><g><title>inotify_read (11,771,353 samples, 0.01%)</title><rect x="1.0618%" y="437" width="0.0107%" height="15" fill="rgb(240,125,3)" fg:x="1168634092" fg:w="11771353"/><text x="1.3118%" y="447.50"></text></g><g><title>__x64_sys_read (26,117,472 samples, 0.02%)</title><rect x="1.0512%" y="485" width="0.0237%" height="15" fill="rgb(205,98,50)" fg:x="1156900434" fg:w="26117472"/><text x="1.3012%" y="495.50"></text></g><g><title>ksys_read (26,117,472 samples, 0.02%)</title><rect x="1.0512%" y="469" width="0.0237%" height="15" fill="rgb(205,185,37)" fg:x="1156900434" fg:w="26117472"/><text x="1.3012%" y="479.50"></text></g><g><title>vfs_read (22,363,300 samples, 0.02%)</title><rect x="1.0546%" y="453" width="0.0203%" height="15" fill="rgb(238,207,15)" fg:x="1160654606" fg:w="22363300"/><text x="1.3046%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (33,396,043 samples, 0.03%)</title><rect x="1.0495%" y="517" width="0.0303%" height="15" fill="rgb(213,199,42)" fg:x="1155036095" fg:w="33396043"/><text x="1.2995%" y="527.50"></text></g><g><title>do_syscall_64 (32,554,373 samples, 0.03%)</title><rect x="1.0503%" y="501" width="0.0296%" height="15" fill="rgb(235,201,11)" fg:x="1155877765" fg:w="32554373"/><text x="1.3003%" y="511.50"></text></g><g><title>read (45,852,008 samples, 0.04%)</title><rect x="1.0484%" y="533" width="0.0417%" height="15" fill="rgb(207,46,11)" fg:x="1153798110" fg:w="45852008"/><text x="1.2984%" y="543.50"></text></g><g><title>v8::internal::Heap::Scavenge (21,504,364 samples, 0.02%)</title><rect x="1.0947%" y="437" width="0.0195%" height="15" fill="rgb(241,35,35)" fg:x="1204750418" fg:w="21504364"/><text x="1.3447%" y="447.50"></text></g><g><title>v8::internal::ScavengerCollector::CollectGarbage (21,504,364 samples, 0.02%)</title><rect x="1.0947%" y="421" width="0.0195%" height="15" fill="rgb(243,32,47)" fg:x="1204750418" fg:w="21504364"/><text x="1.3447%" y="431.50"></text></g><g><title>v8::internal::Heap::PerformGarbageCollection (25,595,368 samples, 0.02%)</title><rect x="1.0923%" y="453" width="0.0233%" height="15" fill="rgb(247,202,23)" fg:x="1202171521" fg:w="25595368"/><text x="1.3423%" y="463.50"></text></g><g><title>node::PerIsolatePlatformData::RunForegroundTask (26,286,209 samples, 0.02%)</title><rect x="1.0923%" y="501" width="0.0239%" height="15" fill="rgb(219,102,11)" fg:x="1202171521" fg:w="26286209"/><text x="1.3423%" y="511.50"></text></g><g><title>v8::internal::MinorGCJob::Task::RunInternal (26,286,209 samples, 0.02%)</title><rect x="1.0923%" y="485" width="0.0239%" height="15" fill="rgb(243,110,44)" fg:x="1202171521" fg:w="26286209"/><text x="1.3423%" y="495.50"></text></g><g><title>v8::internal::Heap::CollectGarbage (26,286,209 samples, 0.02%)</title><rect x="1.0923%" y="469" width="0.0239%" height="15" fill="rgb(222,74,54)" fg:x="1202171521" fg:w="26286209"/><text x="1.3423%" y="479.50"></text></g><g><title>node::PerIsolatePlatformData::FlushForegroundTasksInternal (26,855,188 samples, 0.02%)</title><rect x="1.0923%" y="517" width="0.0244%" height="15" fill="rgb(216,99,12)" fg:x="1202171521" fg:w="26855188"/><text x="1.3423%" y="527.50"></text></g><g><title>node::fs::GetReqWrap (15,018,046 samples, 0.01%)</title><rect x="1.1528%" y="213" width="0.0136%" height="15" fill="rgb(226,22,26)" fg:x="1268786478" fg:w="15018046"/><text x="1.4028%" y="223.50"></text></g><g><title>node::fs::FSReqPromise&lt;node::AliasedBufferBase&lt;double, v8::Float64Array&gt; &gt;::New (14,375,102 samples, 0.01%)</title><rect x="1.1534%" y="197" width="0.0131%" height="15" fill="rgb(217,163,10)" fg:x="1269429422" fg:w="14375102"/><text x="1.4034%" y="207.50"></text></g><g><title>node::fs::ReadLink (19,309,101 samples, 0.02%)</title><rect x="1.1509%" y="229" width="0.0175%" height="15" fill="rgb(213,25,53)" fg:x="1266641113" fg:w="19309101"/><text x="1.4009%" y="239.50"></text></g><g><title>Builtins_CallApiCallback (21,991,063 samples, 0.02%)</title><rect x="1.1502%" y="245" width="0.0200%" height="15" fill="rgb(252,105,26)" fg:x="1265876925" fg:w="21991063"/><text x="1.4002%" y="255.50"></text></g><g><title>Builtins_AsyncFunctionAwaitResolveClosure (64,309,863 samples, 0.06%)</title><rect x="1.1322%" y="293" width="0.0584%" height="15" fill="rgb(220,39,43)" fg:x="1246085188" fg:w="64309863"/><text x="1.3822%" y="303.50"></text></g><g><title>[perf-96500.map] (63,617,705 samples, 0.06%)</title><rect x="1.1328%" y="277" width="0.0578%" height="15" fill="rgb(229,68,48)" fg:x="1246777346" fg:w="63617705"/><text x="1.3828%" y="287.50"></text></g><g><title>[perf-96500.map] (48,322,976 samples, 0.04%)</title><rect x="1.1467%" y="261" width="0.0439%" height="15" fill="rgb(252,8,32)" fg:x="1262072075" fg:w="48322976"/><text x="1.3967%" y="271.50"></text></g><g><title>v8::internal::(anonymous namespace)::Invoke (66,469,357 samples, 0.06%)</title><rect x="1.1309%" y="357" width="0.0604%" height="15" fill="rgb(223,20,43)" fg:x="1244644368" fg:w="66469357"/><text x="1.3809%" y="367.50"></text></g><g><title>Builtins_JSRunMicrotasksEntry (65,684,699 samples, 0.06%)</title><rect x="1.1316%" y="341" width="0.0597%" height="15" fill="rgb(229,81,49)" fg:x="1245429026" fg:w="65684699"/><text x="1.3816%" y="351.50"></text></g><g><title>Builtins_RunMicrotasks (65,684,699 samples, 0.06%)</title><rect x="1.1316%" y="325" width="0.0597%" height="15" fill="rgb(236,28,36)" fg:x="1245429026" fg:w="65684699"/><text x="1.3816%" y="335.50"></text></g><g><title>Builtins_PromiseFulfillReactionJob (65,684,699 samples, 0.06%)</title><rect x="1.1316%" y="309" width="0.0597%" height="15" fill="rgb(249,185,26)" fg:x="1245429026" fg:w="65684699"/><text x="1.3816%" y="319.50"></text></g><g><title>node::InternalCallbackScope::Close (68,212,590 samples, 0.06%)</title><rect x="1.1299%" y="437" width="0.0620%" height="15" fill="rgb(249,174,33)" fg:x="1243580770" fg:w="68212590"/><text x="1.3799%" y="447.50"></text></g><g><title>v8::internal::MicrotaskQueue::PerformCheckpoint (67,148,992 samples, 0.06%)</title><rect x="1.1309%" y="421" width="0.0610%" height="15" fill="rgb(233,201,37)" fg:x="1244644368" fg:w="67148992"/><text x="1.3809%" y="431.50"></text></g><g><title>v8::internal::MicrotaskQueue::RunMicrotasks (67,148,992 samples, 0.06%)</title><rect x="1.1309%" y="405" width="0.0610%" height="15" fill="rgb(221,78,26)" fg:x="1244644368" fg:w="67148992"/><text x="1.3809%" y="415.50"></text></g><g><title>v8::internal::Execution::TryRunMicrotasks (67,148,992 samples, 0.06%)</title><rect x="1.1309%" y="389" width="0.0610%" height="15" fill="rgb(250,127,30)" fg:x="1244644368" fg:w="67148992"/><text x="1.3809%" y="399.50"></text></g><g><title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (67,148,992 samples, 0.06%)</title><rect x="1.1309%" y="373" width="0.0610%" height="15" fill="rgb(230,49,44)" fg:x="1244644368" fg:w="67148992"/><text x="1.3809%" y="383.50"></text></g><g><title>node::InternalCallbackScope::~InternalCallbackScope (70,304,848 samples, 0.06%)</title><rect x="1.1299%" y="453" width="0.0639%" height="15" fill="rgb(229,67,23)" fg:x="1243580770" fg:w="70304848"/><text x="1.3799%" y="463.50"></text></g><g><title>node::fs::FSReqPromise&lt;node::AliasedBufferBase&lt;double, v8::Float64Array&gt; &gt;::ResolveStat (81,920,069 samples, 0.07%)</title><rect x="1.1281%" y="469" width="0.0744%" height="15" fill="rgb(249,83,47)" fg:x="1241577095" fg:w="81920069"/><text x="1.3781%" y="479.50"></text></g><g><title>node::fs::AfterStat (82,651,745 samples, 0.08%)</title><rect x="1.1281%" y="485" width="0.0751%" height="15" fill="rgb(215,43,3)" fg:x="1241577095" fg:w="82651745"/><text x="1.3781%" y="495.50"></text></g><g><title>node::UVException (20,398,818 samples, 0.02%)</title><rect x="1.2045%" y="453" width="0.0185%" height="15" fill="rgb(238,154,13)" fg:x="1325638615" fg:w="20398818"/><text x="1.4545%" y="463.50"></text></g><g><title>node::fs::GetReqWrap (12,830,312 samples, 0.01%)</title><rect x="1.2450%" y="197" width="0.0117%" height="15" fill="rgb(219,56,2)" fg:x="1370174326" fg:w="12830312"/><text x="1.4950%" y="207.50"></text></g><g><title>node::fs::FSReqPromise&lt;node::AliasedBufferBase&lt;double, v8::Float64Array&gt; &gt;::New (12,073,282 samples, 0.01%)</title><rect x="1.2457%" y="181" width="0.0110%" height="15" fill="rgb(233,0,4)" fg:x="1370931356" fg:w="12073282"/><text x="1.4957%" y="191.50"></text></g><g><title>Builtins_CallApiCallback (18,650,328 samples, 0.02%)</title><rect x="1.2410%" y="229" width="0.0169%" height="15" fill="rgb(235,30,7)" fg:x="1365821868" fg:w="18650328"/><text x="1.4910%" y="239.50"></text></g><g><title>node::fs::Stat (17,938,649 samples, 0.02%)</title><rect x="1.2417%" y="213" width="0.0163%" height="15" fill="rgb(250,79,13)" fg:x="1366533547" fg:w="17938649"/><text x="1.4917%" y="223.50"></text></g><g><title>v8::internal::(anonymous namespace)::Invoke (41,093,834 samples, 0.04%)</title><rect x="1.2244%" y="341" width="0.0373%" height="15" fill="rgb(211,146,34)" fg:x="1347506087" fg:w="41093834"/><text x="1.4744%" y="351.50"></text></g><g><title>Builtins_JSRunMicrotasksEntry (41,093,834 samples, 0.04%)</title><rect x="1.2244%" y="325" width="0.0373%" height="15" fill="rgb(228,22,38)" fg:x="1347506087" fg:w="41093834"/><text x="1.4744%" y="335.50"></text></g><g><title>Builtins_RunMicrotasks (41,093,834 samples, 0.04%)</title><rect x="1.2244%" y="309" width="0.0373%" height="15" fill="rgb(235,168,5)" fg:x="1347506087" fg:w="41093834"/><text x="1.4744%" y="319.50"></text></g><g><title>Builtins_PromiseRejectReactionJob (40,411,854 samples, 0.04%)</title><rect x="1.2250%" y="293" width="0.0367%" height="15" fill="rgb(221,155,16)" fg:x="1348188067" fg:w="40411854"/><text x="1.4750%" y="303.50"></text></g><g><title>Builtins_AsyncFunctionAwaitRejectClosure (40,411,854 samples, 0.04%)</title><rect x="1.2250%" y="277" width="0.0367%" height="15" fill="rgb(215,215,53)" fg:x="1348188067" fg:w="40411854"/><text x="1.4750%" y="287.50"></text></g><g><title>[perf-96500.map] (38,321,785 samples, 0.03%)</title><rect x="1.2269%" y="261" width="0.0348%" height="15" fill="rgb(223,4,10)" fg:x="1350278136" fg:w="38321785"/><text x="1.4769%" y="271.50"></text></g><g><title>[perf-96500.map] (25,462,060 samples, 0.02%)</title><rect x="1.2386%" y="245" width="0.0231%" height="15" fill="rgb(234,103,6)" fg:x="1363137861" fg:w="25462060"/><text x="1.4886%" y="255.50"></text></g><g><title>node::InternalCallbackScope::~InternalCallbackScope (41,861,904 samples, 0.04%)</title><rect x="1.2244%" y="437" width="0.0380%" height="15" fill="rgb(227,97,0)" fg:x="1347506087" fg:w="41861904"/><text x="1.4744%" y="447.50"></text></g><g><title>node::InternalCallbackScope::Close (41,861,904 samples, 0.04%)</title><rect x="1.2244%" y="421" width="0.0380%" height="15" fill="rgb(234,150,53)" fg:x="1347506087" fg:w="41861904"/><text x="1.4744%" y="431.50"></text></g><g><title>v8::internal::MicrotaskQueue::PerformCheckpoint (41,861,904 samples, 0.04%)</title><rect x="1.2244%" y="405" width="0.0380%" height="15" fill="rgb(228,201,54)" fg:x="1347506087" fg:w="41861904"/><text x="1.4744%" y="415.50"></text></g><g><title>v8::internal::MicrotaskQueue::RunMicrotasks (41,861,904 samples, 0.04%)</title><rect x="1.2244%" y="389" width="0.0380%" height="15" fill="rgb(222,22,37)" fg:x="1347506087" fg:w="41861904"/><text x="1.4744%" y="399.50"></text></g><g><title>v8::internal::Execution::TryRunMicrotasks (41,861,904 samples, 0.04%)</title><rect x="1.2244%" y="373" width="0.0380%" height="15" fill="rgb(237,53,32)" fg:x="1347506087" fg:w="41861904"/><text x="1.4744%" y="383.50"></text></g><g><title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (41,861,904 samples, 0.04%)</title><rect x="1.2244%" y="357" width="0.0380%" height="15" fill="rgb(233,25,53)" fg:x="1347506087" fg:w="41861904"/><text x="1.4744%" y="367.50"></text></g><g><title>node::fs::FSReqPromise&lt;node::AliasedBufferBase&lt;double, v8::Float64Array&gt; &gt;::Reject (46,198,138 samples, 0.04%)</title><rect x="1.2230%" y="453" width="0.0420%" height="15" fill="rgb(210,40,34)" fg:x="1346037433" fg:w="46198138"/><text x="1.4730%" y="463.50"></text></g><g><title>node::fs::FSReqAfterScope::Reject (68,077,526 samples, 0.06%)</title><rect x="1.2045%" y="469" width="0.0619%" height="15" fill="rgb(241,220,44)" fg:x="1325638615" fg:w="68077526"/><text x="1.4545%" y="479.50"></text></g><g><title>node::fs::AfterStringPtr (76,933,569 samples, 0.07%)</title><rect x="1.2032%" y="485" width="0.0699%" height="15" fill="rgb(235,28,35)" fg:x="1324228840" fg:w="76933569"/><text x="1.4532%" y="495.50"></text></g><g><title>uv__async_io.part.3 (211,522,478 samples, 0.19%)</title><rect x="1.0900%" y="533" width="0.1922%" height="15" fill="rgb(210,56,17)" fg:x="1199650118" fg:w="211522478"/><text x="1.3400%" y="543.50"></text></g><g><title>uv__work_done (180,618,026 samples, 0.16%)</title><rect x="1.1181%" y="517" width="0.1641%" height="15" fill="rgb(224,130,29)" fg:x="1230554570" fg:w="180618026"/><text x="1.3681%" y="527.50"></text></g><g><title>node::MakeLibuvRequestCallback&lt;uv_fs_s, void (*)(uv_fs_s*)&gt;::Wrapper (179,844,474 samples, 0.16%)</title><rect x="1.1188%" y="501" width="0.1634%" height="15" fill="rgb(235,212,8)" fg:x="1231328122" fg:w="179844474"/><text x="1.3688%" y="511.50"></text></g><g><title>[perf-79955.map] (23,936,518 samples, 0.02%)</title><rect x="1.2907%" y="373" width="0.0217%" height="15" fill="rgb(223,33,50)" fg:x="1420461423" fg:w="23936518"/><text x="1.5407%" y="383.50"></text></g><g><title>[perf-79955.map] (16,745,970 samples, 0.02%)</title><rect x="1.2972%" y="357" width="0.0152%" height="15" fill="rgb(219,149,13)" fg:x="1427651971" fg:w="16745970"/><text x="1.5472%" y="367.50"></text></g><g><title>v8::Function::Call (32,281,192 samples, 0.03%)</title><rect x="1.2838%" y="469" width="0.0293%" height="15" fill="rgb(250,156,29)" fg:x="1412874971" fg:w="32281192"/><text x="1.5338%" y="479.50"></text></g><g><title>v8::internal::Execution::Call (32,281,192 samples, 0.03%)</title><rect x="1.2838%" y="453" width="0.0293%" height="15" fill="rgb(216,193,19)" fg:x="1412874971" fg:w="32281192"/><text x="1.5338%" y="463.50"></text></g><g><title>v8::internal::(anonymous namespace)::Invoke (31,915,170 samples, 0.03%)</title><rect x="1.2841%" y="437" width="0.0290%" height="15" fill="rgb(216,135,14)" fg:x="1413240993" fg:w="31915170"/><text x="1.5341%" y="447.50"></text></g><g><title>Builtins_JSEntry (29,904,528 samples, 0.03%)</title><rect x="1.2859%" y="421" width="0.0272%" height="15" fill="rgb(241,47,5)" fg:x="1415251635" fg:w="29904528"/><text x="1.5359%" y="431.50"></text></g><g><title>Builtins_JSEntryTrampoline (29,904,528 samples, 0.03%)</title><rect x="1.2859%" y="405" width="0.0272%" height="15" fill="rgb(233,42,35)" fg:x="1415251635" fg:w="29904528"/><text x="1.5359%" y="415.50"></text></g><g><title>[perf-79955.map] (29,614,006 samples, 0.03%)</title><rect x="1.2862%" y="389" width="0.0269%" height="15" fill="rgb(231,13,6)" fg:x="1415542157" fg:w="29614006"/><text x="1.5362%" y="399.50"></text></g><g><title>node::InternalMakeCallback (33,347,657 samples, 0.03%)</title><rect x="1.2829%" y="485" width="0.0303%" height="15" fill="rgb(207,181,40)" fg:x="1411930557" fg:w="33347657"/><text x="1.5329%" y="495.50"></text></g><g><title>node::AsyncWrap::MakeCallback (33,857,280 samples, 0.03%)</title><rect x="1.2827%" y="501" width="0.0308%" height="15" fill="rgb(254,173,49)" fg:x="1411676843" fg:w="33857280"/><text x="1.5327%" y="511.50"></text></g><g><title>node::(anonymous namespace)::FSEventWrap::OnEvent (40,695,324 samples, 0.04%)</title><rect x="1.2822%" y="517" width="0.0370%" height="15" fill="rgb(221,1,38)" fg:x="1411172596" fg:w="40695324"/><text x="1.5322%" y="527.50"></text></g><g><title>uv__inotify_read (40,930,466 samples, 0.04%)</title><rect x="1.2822%" y="533" width="0.0372%" height="15" fill="rgb(206,124,46)" fg:x="1411172596" fg:w="40930466"/><text x="1.5322%" y="543.50"></text></g><g><title>[perf-96500.map] (22,446,067 samples, 0.02%)</title><rect x="1.3399%" y="325" width="0.0204%" height="15" fill="rgb(249,21,11)" fg:x="1474669900" fg:w="22446067"/><text x="1.5899%" y="335.50"></text></g><g><title>[perf-96500.map] (20,639,137 samples, 0.02%)</title><rect x="1.3416%" y="309" width="0.0188%" height="15" fill="rgb(222,201,40)" fg:x="1476476830" fg:w="20639137"/><text x="1.5916%" y="319.50"></text></g><g><title>[perf-96500.map] (20,335,904 samples, 0.02%)</title><rect x="1.3418%" y="293" width="0.0185%" height="15" fill="rgb(235,61,29)" fg:x="1476780063" fg:w="20335904"/><text x="1.5918%" y="303.50"></text></g><g><title>[perf-96500.map] (20,109,176 samples, 0.02%)</title><rect x="1.3420%" y="277" width="0.0183%" height="15" fill="rgb(219,207,3)" fg:x="1477006791" fg:w="20109176"/><text x="1.5920%" y="287.50"></text></g><g><title>[perf-96500.map] (19,593,318 samples, 0.02%)</title><rect x="1.3425%" y="261" width="0.0178%" height="15" fill="rgb(222,56,46)" fg:x="1477522649" fg:w="19593318"/><text x="1.5925%" y="271.50"></text></g><g><title>[perf-96500.map] (19,055,647 samples, 0.02%)</title><rect x="1.3430%" y="245" width="0.0173%" height="15" fill="rgb(239,76,54)" fg:x="1478060320" fg:w="19055647"/><text x="1.5930%" y="255.50"></text></g><g><title>[perf-96500.map] (17,488,057 samples, 0.02%)</title><rect x="1.3444%" y="229" width="0.0159%" height="15" fill="rgb(231,124,27)" fg:x="1479627910" fg:w="17488057"/><text x="1.5944%" y="239.50"></text></g><g><title>[perf-96500.map] (17,488,057 samples, 0.02%)</title><rect x="1.3444%" y="213" width="0.0159%" height="15" fill="rgb(249,195,6)" fg:x="1479627910" fg:w="17488057"/><text x="1.5944%" y="223.50"></text></g><g><title>[perf-96500.map] (17,488,057 samples, 0.02%)</title><rect x="1.3444%" y="197" width="0.0159%" height="15" fill="rgb(237,174,47)" fg:x="1479627910" fg:w="17488057"/><text x="1.5944%" y="207.50"></text></g><g><title>[perf-96500.map] (17,488,057 samples, 0.02%)</title><rect x="1.3444%" y="181" width="0.0159%" height="15" fill="rgb(206,201,31)" fg:x="1479627910" fg:w="17488057"/><text x="1.5944%" y="191.50"></text></g><g><title>[perf-96500.map] (17,190,759 samples, 0.02%)</title><rect x="1.3447%" y="165" width="0.0156%" height="15" fill="rgb(231,57,52)" fg:x="1479925208" fg:w="17190759"/><text x="1.5947%" y="175.50"></text></g><g><title>[perf-96500.map] (17,190,759 samples, 0.02%)</title><rect x="1.3447%" y="149" width="0.0156%" height="15" fill="rgb(248,177,22)" fg:x="1479925208" fg:w="17190759"/><text x="1.5947%" y="159.50"></text></g><g><title>[perf-96500.map] (16,428,827 samples, 0.01%)</title><rect x="1.3454%" y="133" width="0.0149%" height="15" fill="rgb(215,211,37)" fg:x="1480687140" fg:w="16428827"/><text x="1.5954%" y="143.50"></text></g><g><title>[perf-96500.map] (16,428,827 samples, 0.01%)</title><rect x="1.3454%" y="117" width="0.0149%" height="15" fill="rgb(241,128,51)" fg:x="1480687140" fg:w="16428827"/><text x="1.5954%" y="127.50"></text></g><g><title>[perf-96500.map] (16,031,940 samples, 0.01%)</title><rect x="1.3457%" y="101" width="0.0146%" height="15" fill="rgb(227,165,31)" fg:x="1481084027" fg:w="16031940"/><text x="1.5957%" y="111.50"></text></g><g><title>[perf-96500.map] (15,618,658 samples, 0.01%)</title><rect x="1.3461%" y="85" width="0.0142%" height="15" fill="rgb(228,167,24)" fg:x="1481497309" fg:w="15618658"/><text x="1.5961%" y="95.50"></text></g><g><title>[perf-96500.map] (14,859,582 samples, 0.01%)</title><rect x="1.3468%" y="69" width="0.0135%" height="15" fill="rgb(228,143,12)" fg:x="1482256385" fg:w="14859582"/><text x="1.5968%" y="79.50"></text></g><g><title>[perf-96500.map] (14,859,582 samples, 0.01%)</title><rect x="1.3468%" y="53" width="0.0135%" height="15" fill="rgb(249,149,8)" fg:x="1482256385" fg:w="14859582"/><text x="1.5968%" y="63.50"></text></g><g><title>[perf-96500.map] (13,128,888 samples, 0.01%)</title><rect x="1.3484%" y="37" width="0.0119%" height="15" fill="rgb(243,35,44)" fg:x="1483987079" fg:w="13128888"/><text x="1.5984%" y="47.50"></text></g><g><title>node::StreamBase::CallJSOnreadMethod (29,840,950 samples, 0.03%)</title><rect x="1.3335%" y="453" width="0.0271%" height="15" fill="rgb(246,89,9)" fg:x="1467645239" fg:w="29840950"/><text x="1.5835%" y="463.50"></text></g><g><title>node::AsyncWrap::MakeCallback (29,562,044 samples, 0.03%)</title><rect x="1.3338%" y="437" width="0.0269%" height="15" fill="rgb(233,213,13)" fg:x="1467924145" fg:w="29562044"/><text x="1.5838%" y="447.50"></text></g><g><title>node::InternalMakeCallback (29,562,044 samples, 0.03%)</title><rect x="1.3338%" y="421" width="0.0269%" height="15" fill="rgb(233,141,41)" fg:x="1467924145" fg:w="29562044"/><text x="1.5838%" y="431.50"></text></g><g><title>v8::Function::Call (23,825,381 samples, 0.02%)</title><rect x="1.3390%" y="405" width="0.0216%" height="15" fill="rgb(239,167,4)" fg:x="1473660808" fg:w="23825381"/><text x="1.5890%" y="415.50"></text></g><g><title>v8::internal::Execution::Call (23,825,381 samples, 0.02%)</title><rect x="1.3390%" y="389" width="0.0216%" height="15" fill="rgb(209,217,16)" fg:x="1473660808" fg:w="23825381"/><text x="1.5890%" y="399.50"></text></g><g><title>v8::internal::(anonymous namespace)::Invoke (23,825,381 samples, 0.02%)</title><rect x="1.3390%" y="373" width="0.0216%" height="15" fill="rgb(219,88,35)" fg:x="1473660808" fg:w="23825381"/><text x="1.5890%" y="383.50"></text></g><g><title>Builtins_JSEntry (23,825,381 samples, 0.02%)</title><rect x="1.3390%" y="357" width="0.0216%" height="15" fill="rgb(220,193,23)" fg:x="1473660808" fg:w="23825381"/><text x="1.5890%" y="367.50"></text></g><g><title>Builtins_JSEntryTrampoline (23,825,381 samples, 0.02%)</title><rect x="1.3390%" y="341" width="0.0216%" height="15" fill="rgb(230,90,52)" fg:x="1473660808" fg:w="23825381"/><text x="1.5890%" y="351.50"></text></g><g><title>uv__stream_io (37,906,199 samples, 0.03%)</title><rect x="1.3269%" y="533" width="0.0344%" height="15" fill="rgb(252,106,19)" fg:x="1460344259" fg:w="37906199"/><text x="1.5769%" y="543.50"></text></g><g><title>uv__read (31,449,860 samples, 0.03%)</title><rect x="1.3328%" y="517" width="0.0286%" height="15" fill="rgb(206,74,20)" fg:x="1466800598" fg:w="31449860"/><text x="1.5828%" y="527.50"></text></g><g><title>node::LibuvStreamWrap::ReadStart (30,605,219 samples, 0.03%)</title><rect x="1.3335%" y="501" width="0.0278%" height="15" fill="rgb(230,138,44)" fg:x="1467645239" fg:w="30605219"/><text x="1.5835%" y="511.50"></text></g><g><title>node::LibuvStreamWrap::OnUvRead (30,605,219 samples, 0.03%)</title><rect x="1.3335%" y="485" width="0.0278%" height="15" fill="rgb(235,182,43)" fg:x="1467645239" fg:w="30605219"/><text x="1.5835%" y="495.50"></text></g><g><title>node::EmitToJSStreamListener::OnStreamRead (30,605,219 samples, 0.03%)</title><rect x="1.3335%" y="469" width="0.0278%" height="15" fill="rgb(242,16,51)" fg:x="1467645239" fg:w="30605219"/><text x="1.5835%" y="479.50"></text></g><g><title>uv__io_poll (348,972,670 samples, 0.32%)</title><rect x="1.0449%" y="549" width="0.3171%" height="15" fill="rgb(248,9,4)" fg:x="1149963676" fg:w="348972670"/><text x="1.2949%" y="559.50"></text></g><g><title>node::Environment::CheckImmediate (12,717,318 samples, 0.01%)</title><rect x="1.3633%" y="533" width="0.0116%" height="15" fill="rgb(210,31,22)" fg:x="1500435770" fg:w="12717318"/><text x="1.6133%" y="543.50"></text></g><g><title>uv__run_check (14,448,852 samples, 0.01%)</title><rect x="1.3620%" y="549" width="0.0131%" height="15" fill="rgb(239,54,39)" fg:x="1498936346" fg:w="14448852"/><text x="1.6120%" y="559.50"></text></g><g><title>[perf-96500.map] (12,457,276 samples, 0.01%)</title><rect x="1.3828%" y="437" width="0.0113%" height="15" fill="rgb(230,99,41)" fg:x="1521823402" fg:w="12457276"/><text x="1.6328%" y="447.50"></text></g><g><title>[perf-96500.map] (12,161,886 samples, 0.01%)</title><rect x="1.3830%" y="421" width="0.0111%" height="15" fill="rgb(253,106,12)" fg:x="1522118792" fg:w="12161886"/><text x="1.6330%" y="431.50"></text></g><g><title>[perf-96500.map] (12,161,886 samples, 0.01%)</title><rect x="1.3830%" y="405" width="0.0111%" height="15" fill="rgb(213,46,41)" fg:x="1522118792" fg:w="12161886"/><text x="1.6330%" y="415.50"></text></g><g><title>[perf-96500.map] (11,888,365 samples, 0.01%)</title><rect x="1.3833%" y="389" width="0.0108%" height="15" fill="rgb(215,133,35)" fg:x="1522392313" fg:w="11888365"/><text x="1.6333%" y="399.50"></text></g><g><title>[perf-96500.map] (11,888,365 samples, 0.01%)</title><rect x="1.3833%" y="373" width="0.0108%" height="15" fill="rgb(213,28,5)" fg:x="1522392313" fg:w="11888365"/><text x="1.6333%" y="383.50"></text></g><g><title>[perf-96500.map] (11,654,010 samples, 0.01%)</title><rect x="1.3835%" y="357" width="0.0106%" height="15" fill="rgb(215,77,49)" fg:x="1522626668" fg:w="11654010"/><text x="1.6335%" y="367.50"></text></g><g><title>[perf-96500.map] (11,100,010 samples, 0.01%)</title><rect x="1.3840%" y="341" width="0.0101%" height="15" fill="rgb(248,100,22)" fg:x="1523180668" fg:w="11100010"/><text x="1.6340%" y="351.50"></text></g><g><title>[perf-96500.map] (11,100,010 samples, 0.01%)</title><rect x="1.3840%" y="325" width="0.0101%" height="15" fill="rgb(208,67,9)" fg:x="1523180668" fg:w="11100010"/><text x="1.6340%" y="335.50"></text></g><g><title>node::Environment::RunTimers (20,229,866 samples, 0.02%)</title><rect x="1.3758%" y="533" width="0.0184%" height="15" fill="rgb(219,133,21)" fg:x="1514171882" fg:w="20229866"/><text x="1.6258%" y="543.50"></text></g><g><title>v8::Function::Call (18,258,106 samples, 0.02%)</title><rect x="1.3776%" y="517" width="0.0166%" height="15" fill="rgb(246,46,29)" fg:x="1516143642" fg:w="18258106"/><text x="1.6276%" y="527.50"></text></g><g><title>v8::internal::Execution::Call (18,258,106 samples, 0.02%)</title><rect x="1.3776%" y="501" width="0.0166%" height="15" fill="rgb(246,185,52)" fg:x="1516143642" fg:w="18258106"/><text x="1.6276%" y="511.50"></text></g><g><title>v8::internal::(anonymous namespace)::Invoke (18,258,106 samples, 0.02%)</title><rect x="1.3776%" y="485" width="0.0166%" height="15" fill="rgb(252,136,11)" fg:x="1516143642" fg:w="18258106"/><text x="1.6276%" y="495.50"></text></g><g><title>Builtins_JSEntry (18,110,394 samples, 0.02%)</title><rect x="1.3777%" y="469" width="0.0165%" height="15" fill="rgb(219,138,53)" fg:x="1516291354" fg:w="18110394"/><text x="1.6277%" y="479.50"></text></g><g><title>Builtins_JSEntryTrampoline (18,110,394 samples, 0.02%)</title><rect x="1.3777%" y="453" width="0.0165%" height="15" fill="rgb(211,51,23)" fg:x="1516291354" fg:w="18110394"/><text x="1.6277%" y="463.50"></text></g><g><title>__libc_start_call_main (496,157,432 samples, 0.45%)</title><rect x="0.9437%" y="645" width="0.4508%" height="15" fill="rgb(247,221,28)" fg:x="1038638454" fg:w="496157432"/><text x="1.1937%" y="655.50"></text></g><g><title>node::Start (496,157,432 samples, 0.45%)</title><rect x="0.9437%" y="629" width="0.4508%" height="15" fill="rgb(251,222,45)" fg:x="1038638454" fg:w="496157432"/><text x="1.1937%" y="639.50"></text></g><g><title>node::NodeMainInstance::Run (496,157,432 samples, 0.45%)</title><rect x="0.9437%" y="613" width="0.4508%" height="15" fill="rgb(217,162,53)" fg:x="1038638454" fg:w="496157432"/><text x="1.1937%" y="623.50"></text></g><g><title>node::NodeMainInstance::Run (496,157,432 samples, 0.45%)</title><rect x="0.9437%" y="597" width="0.4508%" height="15" fill="rgb(229,93,14)" fg:x="1038638454" fg:w="496157432"/><text x="1.1937%" y="607.50"></text></g><g><title>node::SpinEventLoopInternal (496,157,432 samples, 0.45%)</title><rect x="0.9437%" y="581" width="0.4508%" height="15" fill="rgb(209,67,49)" fg:x="1038638454" fg:w="496157432"/><text x="1.1937%" y="591.50"></text></g><g><title>uv_run (494,674,170 samples, 0.45%)</title><rect x="0.9451%" y="565" width="0.4495%" height="15" fill="rgb(213,87,29)" fg:x="1040121716" fg:w="494674170"/><text x="1.1951%" y="575.50"></text></g><g><title>uv__run_timers (20,624,004 samples, 0.02%)</title><rect x="1.3758%" y="549" width="0.0187%" height="15" fill="rgb(205,151,52)" fg:x="1514171882" fg:w="20624004"/><text x="1.6258%" y="559.50"></text></g><g><title>do_user_addr_fault (18,550,369 samples, 0.02%)</title><rect x="1.4049%" y="597" width="0.0169%" height="15" fill="rgb(253,215,39)" fg:x="1546137968" fg:w="18550369"/><text x="1.6549%" y="607.50"></text></g><g><title>asm_exc_page_fault (18,825,052 samples, 0.02%)</title><rect x="1.4049%" y="629" width="0.0171%" height="15" fill="rgb(221,220,41)" fg:x="1546137968" fg:w="18825052"/><text x="1.6549%" y="639.50"></text></g><g><title>exc_page_fault (18,825,052 samples, 0.02%)</title><rect x="1.4049%" y="613" width="0.0171%" height="15" fill="rgb(218,133,21)" fg:x="1546137968" fg:w="18825052"/><text x="1.6549%" y="623.50"></text></g><g><title>_int_malloc (25,624,639 samples, 0.02%)</title><rect x="1.3999%" y="645" width="0.0233%" height="15" fill="rgb(221,193,43)" fg:x="1540656763" fg:w="25624639"/><text x="1.6499%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (13,816,415 samples, 0.01%)</title><rect x="1.4388%" y="629" width="0.0126%" height="15" fill="rgb(240,128,52)" fg:x="1583551667" fg:w="13816415"/><text x="1.6888%" y="639.50"></text></g><g><title>do_syscall_64 (12,420,798 samples, 0.01%)</title><rect x="1.4401%" y="613" width="0.0113%" height="15" fill="rgb(253,114,12)" fg:x="1584947284" fg:w="12420798"/><text x="1.6901%" y="623.50"></text></g><g><title>pthread_cond_signal@@GLIBC_2.3.2 (16,297,716 samples, 0.01%)</title><rect x="1.4388%" y="645" width="0.0148%" height="15" fill="rgb(215,223,47)" fg:x="1583551667" fg:w="16297716"/><text x="1.6888%" y="655.50"></text></g><g><title>v8::internal::compiler::PipelineImpl::CreateGraph (18,694,042 samples, 0.02%)</title><rect x="1.4690%" y="549" width="0.0170%" height="15" fill="rgb(248,225,23)" fg:x="1616755281" fg:w="18694042"/><text x="1.7190%" y="559.50"></text></g><g><title>v8::internal::compiler::InliningPhase::Run (14,582,216 samples, 0.01%)</title><rect x="1.4728%" y="533" width="0.0132%" height="15" fill="rgb(250,108,0)" fg:x="1620867107" fg:w="14582216"/><text x="1.7228%" y="543.50"></text></g><g><title>v8::internal::compiler::GraphReducer::ReduceNode (14,582,216 samples, 0.01%)</title><rect x="1.4728%" y="517" width="0.0132%" height="15" fill="rgb(228,208,7)" fg:x="1620867107" fg:w="14582216"/><text x="1.7228%" y="527.50"></text></g><g><title>v8::internal::compiler::PipelineImpl::SelectInstructions (27,439,073 samples, 0.02%)</title><rect x="1.5293%" y="533" width="0.0249%" height="15" fill="rgb(244,45,10)" fg:x="1683078331" fg:w="27439073"/><text x="1.7793%" y="543.50"></text></g><g><title>v8::internal::compiler::PipelineImpl::AllocateRegistersForTopTier (19,367,802 samples, 0.02%)</title><rect x="1.5366%" y="517" width="0.0176%" height="15" fill="rgb(207,125,25)" fg:x="1691149602" fg:w="19367802"/><text x="1.7866%" y="527.50"></text></g><g><title>v8::internal::compiler::PipelineImpl::OptimizeGraph (84,743,804 samples, 0.08%)</title><rect x="1.4860%" y="549" width="0.0770%" height="15" fill="rgb(210,195,18)" fg:x="1635449323" fg:w="84743804"/><text x="1.7360%" y="559.50"></text></g><g><title>v8::internal::OptimizingCompileDispatcher::CompileTask::RunInternal (109,973,514 samples, 0.10%)</title><rect x="1.4635%" y="613" width="0.0999%" height="15" fill="rgb(249,80,12)" fg:x="1610730155" fg:w="109973514"/><text x="1.7135%" y="623.50"></text></g><g><title>v8::internal::OptimizingCompileDispatcher::CompileNext (109,973,514 samples, 0.10%)</title><rect x="1.4635%" y="597" width="0.0999%" height="15" fill="rgb(221,65,9)" fg:x="1610730155" fg:w="109973514"/><text x="1.7135%" y="607.50"></text></g><g><title>v8::internal::OptimizedCompilationJob::ExecuteJob (109,973,514 samples, 0.10%)</title><rect x="1.4635%" y="581" width="0.0999%" height="15" fill="rgb(235,49,36)" fg:x="1610730155" fg:w="109973514"/><text x="1.7135%" y="591.50"></text></g><g><title>v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (109,973,514 samples, 0.10%)</title><rect x="1.4635%" y="565" width="0.0999%" height="15" fill="rgb(225,32,20)" fg:x="1610730155" fg:w="109973514"/><text x="1.7135%" y="575.50"></text></g><g><title>node::(anonymous namespace)::PlatformWorkerThread (126,080,783 samples, 0.11%)</title><rect x="1.4541%" y="629" width="0.1146%" height="15" fill="rgb(215,141,46)" fg:x="1600355562" fg:w="126080783"/><text x="1.7041%" y="639.50"></text></g><g><title>__x64_sys_write (12,703,233 samples, 0.01%)</title><rect x="1.5687%" y="565" width="0.0115%" height="15" fill="rgb(250,160,47)" fg:x="1726436345" fg:w="12703233"/><text x="1.8187%" y="575.50"></text></g><g><title>ksys_write (12,703,233 samples, 0.01%)</title><rect x="1.5687%" y="549" width="0.0115%" height="15" fill="rgb(216,222,40)" fg:x="1726436345" fg:w="12703233"/><text x="1.8187%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (15,537,759 samples, 0.01%)</title><rect x="1.5687%" y="597" width="0.0141%" height="15" fill="rgb(234,217,39)" fg:x="1726436345" fg:w="15537759"/><text x="1.8187%" y="607.50"></text></g><g><title>do_syscall_64 (15,537,759 samples, 0.01%)</title><rect x="1.5687%" y="581" width="0.0141%" height="15" fill="rgb(207,178,40)" fg:x="1726436345" fg:w="15537759"/><text x="1.8187%" y="591.50"></text></g><g><title>__GI___libc_write (18,525,807 samples, 0.02%)</title><rect x="1.5687%" y="613" width="0.0168%" height="15" fill="rgb(221,136,13)" fg:x="1726436345" fg:w="18525807"/><text x="1.8187%" y="623.50"></text></g><g><title>established_get_first (12,593,804 samples, 0.01%)</title><rect x="1.5981%" y="453" width="0.0114%" height="15" fill="rgb(249,199,10)" fg:x="1758766736" fg:w="12593804"/><text x="1.8481%" y="463.50"></text></g><g><title>read (22,350,410 samples, 0.02%)</title><rect x="1.5971%" y="613" width="0.0203%" height="15" fill="rgb(249,222,13)" fg:x="1757716297" fg:w="22350410"/><text x="1.8471%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (21,631,277 samples, 0.02%)</title><rect x="1.5977%" y="597" width="0.0197%" height="15" fill="rgb(244,185,38)" fg:x="1758435430" fg:w="21631277"/><text x="1.8477%" y="607.50"></text></g><g><title>do_syscall_64 (21,631,277 samples, 0.02%)</title><rect x="1.5977%" y="581" width="0.0197%" height="15" fill="rgb(236,202,9)" fg:x="1758435430" fg:w="21631277"/><text x="1.8477%" y="591.50"></text></g><g><title>__x64_sys_read (21,631,277 samples, 0.02%)</title><rect x="1.5977%" y="565" width="0.0197%" height="15" fill="rgb(250,229,37)" fg:x="1758435430" fg:w="21631277"/><text x="1.8477%" y="575.50"></text></g><g><title>ksys_read (21,631,277 samples, 0.02%)</title><rect x="1.5977%" y="549" width="0.0197%" height="15" fill="rgb(206,174,23)" fg:x="1758435430" fg:w="21631277"/><text x="1.8477%" y="559.50"></text></g><g><title>vfs_read (21,631,277 samples, 0.02%)</title><rect x="1.5977%" y="533" width="0.0197%" height="15" fill="rgb(211,33,43)" fg:x="1758435430" fg:w="21631277"/><text x="1.8477%" y="543.50"></text></g><g><title>proc_reg_read (21,631,277 samples, 0.02%)</title><rect x="1.5977%" y="517" width="0.0197%" height="15" fill="rgb(245,58,50)" fg:x="1758435430" fg:w="21631277"/><text x="1.8477%" y="527.50"></text></g><g><title>seq_read (21,631,277 samples, 0.02%)</title><rect x="1.5977%" y="501" width="0.0197%" height="15" fill="rgb(244,68,36)" fg:x="1758435430" fg:w="21631277"/><text x="1.8477%" y="511.50"></text></g><g><title>seq_read_iter (21,631,277 samples, 0.02%)</title><rect x="1.5977%" y="485" width="0.0197%" height="15" fill="rgb(232,229,15)" fg:x="1758435430" fg:w="21631277"/><text x="1.8477%" y="495.50"></text></g><g><title>tcp_seq_next (21,299,971 samples, 0.02%)</title><rect x="1.5981%" y="469" width="0.0194%" height="15" fill="rgb(254,30,23)" fg:x="1758766736" fg:w="21299971"/><text x="1.8481%" y="479.50"></text></g><g><title>__x64_sys_statx (12,270,640 samples, 0.01%)</title><rect x="1.6188%" y="533" width="0.0111%" height="15" fill="rgb(235,160,14)" fg:x="1781586190" fg:w="12270640"/><text x="1.8688%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (13,006,498 samples, 0.01%)</title><rect x="1.6188%" y="565" width="0.0118%" height="15" fill="rgb(212,155,44)" fg:x="1781586190" fg:w="13006498"/><text x="1.8688%" y="575.50"></text></g><g><title>do_syscall_64 (13,006,498 samples, 0.01%)</title><rect x="1.6188%" y="549" width="0.0118%" height="15" fill="rgb(226,2,50)" fg:x="1781586190" fg:w="13006498"/><text x="1.8688%" y="559.50"></text></g><g><title>uv__fs_work (15,954,621 samples, 0.01%)</title><rect x="1.6174%" y="613" width="0.0145%" height="15" fill="rgb(234,177,6)" fg:x="1780066707" fg:w="15954621"/><text x="1.8674%" y="623.50"></text></g><g><title>uv__fs_statx (14,435,138 samples, 0.01%)</title><rect x="1.6188%" y="597" width="0.0131%" height="15" fill="rgb(217,24,9)" fg:x="1781586190" fg:w="14435138"/><text x="1.8688%" y="607.50"></text></g><g><title>syscall (14,435,138 samples, 0.01%)</title><rect x="1.6188%" y="581" width="0.0131%" height="15" fill="rgb(220,13,46)" fg:x="1781586190" fg:w="14435138"/><text x="1.8688%" y="591.50"></text></g><g><title>start_thread (197,784,007 samples, 0.18%)</title><rect x="1.4541%" y="645" width="0.1797%" height="15" fill="rgb(239,221,27)" fg:x="1600355562" fg:w="197784007"/><text x="1.7041%" y="655.50"></text></g><g><title>worker (71,703,224 samples, 0.07%)</title><rect x="1.5687%" y="629" width="0.0652%" height="15" fill="rgb(222,198,25)" fg:x="1726436345" fg:w="71703224"/><text x="1.8187%" y="639.50"></text></g><g><title>node (1,527,648,875 samples, 1.39%)</title><rect x="0.2554%" y="661" width="1.3881%" height="15" fill="rgb(211,99,13)" fg:x="281062763" fg:w="1527648875"/><text x="0.5054%" y="671.50"></text></g><g><title>__kmalloc (12,959,779 samples, 0.01%)</title><rect x="1.6725%" y="325" width="0.0118%" height="15" fill="rgb(232,111,31)" fg:x="1840676540" fg:w="12959779"/><text x="1.9225%" y="335.50"></text></g><g><title>__kmem_cache_alloc_node (12,222,872 samples, 0.01%)</title><rect x="1.6731%" y="309" width="0.0111%" height="15" fill="rgb(245,82,37)" fg:x="1841413447" fg:w="12222872"/><text x="1.9231%" y="319.50"></text></g><g><title>__fsnotify_parent (37,382,183 samples, 0.03%)</title><rect x="1.6638%" y="405" width="0.0340%" height="15" fill="rgb(227,149,46)" fg:x="1831165215" fg:w="37382183"/><text x="1.9138%" y="415.50"></text></g><g><title>fsnotify (32,914,965 samples, 0.03%)</title><rect x="1.6679%" y="389" width="0.0299%" height="15" fill="rgb(218,36,50)" fg:x="1835632433" fg:w="32914965"/><text x="1.9179%" y="399.50"></text></g><g><title>send_to_group (30,156,266 samples, 0.03%)</title><rect x="1.6704%" y="373" width="0.0274%" height="15" fill="rgb(226,80,48)" fg:x="1838391132" fg:w="30156266"/><text x="1.9204%" y="383.50"></text></g><g><title>fsnotify_handle_inode_event (28,473,636 samples, 0.03%)</title><rect x="1.6719%" y="357" width="0.0259%" height="15" fill="rgb(238,224,15)" fg:x="1840073762" fg:w="28473636"/><text x="1.9219%" y="367.50"></text></g><g><title>inotify_handle_inode_event (28,473,636 samples, 0.03%)</title><rect x="1.6719%" y="341" width="0.0259%" height="15" fill="rgb(241,136,10)" fg:x="1840073762" fg:w="28473636"/><text x="1.9219%" y="351.50"></text></g><g><title>__filemap_add_folio (21,078,651 samples, 0.02%)</title><rect x="1.7087%" y="325" width="0.0192%" height="15" fill="rgb(208,32,45)" fg:x="1880580417" fg:w="21078651"/><text x="1.9587%" y="335.50"></text></g><g><title>get_page_from_freelist (14,555,091 samples, 0.01%)</title><rect x="1.7291%" y="261" width="0.0132%" height="15" fill="rgb(207,135,9)" fg:x="1902953978" fg:w="14555091"/><text x="1.9791%" y="271.50"></text></g><g><title>filemap_alloc_folio (17,205,076 samples, 0.02%)</title><rect x="1.7281%" y="325" width="0.0156%" height="15" fill="rgb(206,86,44)" fg:x="1901946947" fg:w="17205076"/><text x="1.9781%" y="335.50"></text></g><g><title>folio_alloc (17,205,076 samples, 0.02%)</title><rect x="1.7281%" y="309" width="0.0156%" height="15" fill="rgb(245,177,15)" fg:x="1901946947" fg:w="17205076"/><text x="1.9781%" y="319.50"></text></g><g><title>alloc_pages (17,205,076 samples, 0.02%)</title><rect x="1.7281%" y="293" width="0.0156%" height="15" fill="rgb(206,64,50)" fg:x="1901946947" fg:w="17205076"/><text x="1.9781%" y="303.50"></text></g><g><title>__alloc_pages (16,507,740 samples, 0.01%)</title><rect x="1.7288%" y="277" width="0.0150%" height="15" fill="rgb(234,36,40)" fg:x="1902644283" fg:w="16507740"/><text x="1.9788%" y="287.50"></text></g><g><title>__filemap_get_folio (46,338,797 samples, 0.04%)</title><rect x="1.7087%" y="341" width="0.0421%" height="15" fill="rgb(213,64,8)" fg:x="1880580417" fg:w="46338797"/><text x="1.9587%" y="351.50"></text></g><g><title>create_empty_buffers (16,643,030 samples, 0.02%)</title><rect x="1.7510%" y="325" width="0.0151%" height="15" fill="rgb(210,75,36)" fg:x="1927103901" fg:w="16643030"/><text x="2.0010%" y="335.50"></text></g><g><title>folio_create_empty_buffers (16,643,030 samples, 0.02%)</title><rect x="1.7510%" y="309" width="0.0151%" height="15" fill="rgb(229,88,21)" fg:x="1927103901" fg:w="16643030"/><text x="2.0010%" y="319.50"></text></g><g><title>folio_alloc_buffers (15,960,680 samples, 0.01%)</title><rect x="1.7516%" y="293" width="0.0145%" height="15" fill="rgb(252,204,47)" fg:x="1927786251" fg:w="15960680"/><text x="2.0016%" y="303.50"></text></g><g><title>alloc_buffer_head (15,493,908 samples, 0.01%)</title><rect x="1.7520%" y="277" width="0.0141%" height="15" fill="rgb(208,77,27)" fg:x="1928253023" fg:w="15493908"/><text x="2.0020%" y="287.50"></text></g><g><title>kmem_cache_alloc (14,476,180 samples, 0.01%)</title><rect x="1.7530%" y="261" width="0.0132%" height="15" fill="rgb(221,76,26)" fg:x="1929270751" fg:w="14476180"/><text x="2.0030%" y="271.50"></text></g><g><title>ext4_block_write_begin (28,841,411 samples, 0.03%)</title><rect x="1.7508%" y="341" width="0.0262%" height="15" fill="rgb(225,139,18)" fg:x="1926919214" fg:w="28841411"/><text x="2.0008%" y="351.50"></text></g><g><title>ext4_da_get_block_prep (12,013,694 samples, 0.01%)</title><rect x="1.7661%" y="325" width="0.0109%" height="15" fill="rgb(230,137,11)" fg:x="1943746931" fg:w="12013694"/><text x="2.0161%" y="335.50"></text></g><g><title>ext4_da_write_begin (77,371,071 samples, 0.07%)</title><rect x="1.7071%" y="357" width="0.0703%" height="15" fill="rgb(212,28,1)" fg:x="1878814269" fg:w="77371071"/><text x="1.9571%" y="367.50"></text></g><g><title>rep_movs_alternative (12,402,046 samples, 0.01%)</title><rect x="1.7941%" y="357" width="0.0113%" height="15" fill="rgb(248,164,17)" fg:x="1974531543" fg:w="12402046"/><text x="2.0441%" y="367.50"></text></g><g><title>generic_perform_write (113,161,108 samples, 0.10%)</title><rect x="1.7026%" y="373" width="0.1028%" height="15" fill="rgb(222,171,42)" fg:x="1873885003" fg:w="113161108"/><text x="1.9526%" y="383.50"></text></g><g><title>ext4_file_write_iter (118,548,798 samples, 0.11%)</title><rect x="1.6983%" y="405" width="0.1077%" height="15" fill="rgb(243,84,45)" fg:x="1869061180" fg:w="118548798"/><text x="1.9483%" y="415.50"></text></g><g><title>ext4_buffered_write_iter (118,548,798 samples, 0.11%)</title><rect x="1.6983%" y="389" width="0.1077%" height="15" fill="rgb(252,49,23)" fg:x="1869061180" fg:w="118548798"/><text x="1.9483%" y="399.50"></text></g><g><title>__x64_sys_write (161,828,538 samples, 0.15%)</title><rect x="1.6609%" y="453" width="0.1470%" height="15" fill="rgb(215,19,7)" fg:x="1827902531" fg:w="161828538"/><text x="1.9109%" y="463.50"></text></g><g><title>ksys_write (161,290,826 samples, 0.15%)</title><rect x="1.6614%" y="437" width="0.1466%" height="15" fill="rgb(238,81,41)" fg:x="1828440243" fg:w="161290826"/><text x="1.9114%" y="447.50"></text></g><g><title>vfs_write (160,791,168 samples, 0.15%)</title><rect x="1.6618%" y="421" width="0.1461%" height="15" fill="rgb(210,199,37)" fg:x="1828939901" fg:w="160791168"/><text x="1.9118%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (168,576,537 samples, 0.15%)</title><rect x="1.6598%" y="485" width="0.1532%" height="15" fill="rgb(244,192,49)" fg:x="1826754933" fg:w="168576537"/><text x="1.9098%" y="495.50"></text></g><g><title>do_syscall_64 (167,428,939 samples, 0.15%)</title><rect x="1.6609%" y="469" width="0.1521%" height="15" fill="rgb(226,211,11)" fg:x="1827902531" fg:w="167428939"/><text x="1.9109%" y="479.50"></text></g><g><title>__GI___libc_write (170,718,540 samples, 0.16%)</title><rect x="1.6598%" y="501" width="0.1551%" height="15" fill="rgb(236,162,54)" fg:x="1826754933" fg:w="170718540"/><text x="1.9098%" y="511.50"></text></g><g><title>perf_mmap__push (177,194,481 samples, 0.16%)</title><rect x="1.6544%" y="549" width="0.1610%" height="15" fill="rgb(220,229,9)" fg:x="1820816703" fg:w="177194481"/><text x="1.9044%" y="559.50"></text></g><g><title>record__pushfn (172,576,810 samples, 0.16%)</title><rect x="1.6586%" y="533" width="0.1568%" height="15" fill="rgb(250,87,22)" fg:x="1825434374" fg:w="172576810"/><text x="1.9086%" y="543.50"></text></g><g><title>writen (171,256,251 samples, 0.16%)</title><rect x="1.6598%" y="517" width="0.1556%" height="15" fill="rgb(239,43,17)" fg:x="1826754933" fg:w="171256251"/><text x="1.9098%" y="527.50"></text></g><g><title>record__mmap_read_evlist (184,976,192 samples, 0.17%)</title><rect x="1.6544%" y="565" width="0.1681%" height="15" fill="rgb(231,177,25)" fg:x="1820816703" fg:w="184976192"/><text x="1.9044%" y="575.50"></text></g><g><title>__libc_start_call_main (193,951,875 samples, 0.18%)</title><rect x="1.6466%" y="645" width="0.1762%" height="15" fill="rgb(219,179,1)" fg:x="1812167695" fg:w="193951875"/><text x="1.8966%" y="655.50"></text></g><g><title>main (193,951,875 samples, 0.18%)</title><rect x="1.6466%" y="629" width="0.1762%" height="15" fill="rgb(238,219,53)" fg:x="1812167695" fg:w="193951875"/><text x="1.8966%" y="639.50"></text></g><g><title>run_builtin (193,951,875 samples, 0.18%)</title><rect x="1.6466%" y="613" width="0.1762%" height="15" fill="rgb(232,167,36)" fg:x="1812167695" fg:w="193951875"/><text x="1.8966%" y="623.50"></text></g><g><title>cmd_record (193,951,875 samples, 0.18%)</title><rect x="1.6466%" y="597" width="0.1762%" height="15" fill="rgb(244,19,51)" fg:x="1812167695" fg:w="193951875"/><text x="1.8966%" y="607.50"></text></g><g><title>__cmd_record.constprop.0 (193,951,875 samples, 0.18%)</title><rect x="1.6466%" y="581" width="0.1762%" height="15" fill="rgb(224,6,22)" fg:x="1812167695" fg:w="193951875"/><text x="1.8966%" y="591.50"></text></g><g><title>perf (194,381,372 samples, 0.18%)</title><rect x="1.6465%" y="661" width="0.1766%" height="15" fill="rgb(224,145,5)" fg:x="1812074258" fg:w="194381372"/><text x="1.8965%" y="671.50"></text></g><g><title>__x64_sys_newfstatat (18,584,938 samples, 0.02%)</title><rect x="1.8389%" y="565" width="0.0169%" height="15" fill="rgb(234,130,49)" fg:x="2023812865" fg:w="18584938"/><text x="2.0889%" y="575.50"></text></g><g><title>__se_sys_newfstatat (18,584,938 samples, 0.02%)</title><rect x="1.8389%" y="549" width="0.0169%" height="15" fill="rgb(254,6,2)" fg:x="2023812865" fg:w="18584938"/><text x="2.0889%" y="559.50"></text></g><g><title>vfs_fstatat (17,041,237 samples, 0.02%)</title><rect x="1.8403%" y="533" width="0.0155%" height="15" fill="rgb(208,96,46)" fg:x="2025356566" fg:w="17041237"/><text x="2.0903%" y="543.50"></text></g><g><title>vfs_statx (13,908,237 samples, 0.01%)</title><rect x="1.8431%" y="517" width="0.0126%" height="15" fill="rgb(239,3,39)" fg:x="2028489566" fg:w="13908237"/><text x="2.0931%" y="527.50"></text></g><g><title>__GI___fstatat64 (23,149,704 samples, 0.02%)</title><rect x="1.8367%" y="613" width="0.0210%" height="15" fill="rgb(233,210,1)" fg:x="2021471478" fg:w="23149704"/><text x="2.0867%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (23,149,704 samples, 0.02%)</title><rect x="1.8367%" y="597" width="0.0210%" height="15" fill="rgb(244,137,37)" fg:x="2021471478" fg:w="23149704"/><text x="2.0867%" y="607.50"></text></g><g><title>do_syscall_64 (21,596,427 samples, 0.02%)</title><rect x="1.8382%" y="581" width="0.0196%" height="15" fill="rgb(240,136,2)" fg:x="2023024755" fg:w="21596427"/><text x="2.0882%" y="591.50"></text></g><g><title>[unknown] (32,749,592 samples, 0.03%)</title><rect x="1.8314%" y="629" width="0.0298%" height="15" fill="rgb(239,18,37)" fg:x="2015539248" fg:w="32749592"/><text x="2.0814%" y="639.50"></text></g><g><title>alloc_empty_file (20,135,546 samples, 0.02%)</title><rect x="1.8825%" y="517" width="0.0183%" height="15" fill="rgb(218,185,22)" fg:x="2071788998" fg:w="20135546"/><text x="2.1325%" y="527.50"></text></g><g><title>link_path_walk (14,252,705 samples, 0.01%)</title><rect x="1.9062%" y="517" width="0.0130%" height="15" fill="rgb(225,218,4)" fg:x="2097934228" fg:w="14252705"/><text x="2.1562%" y="527.50"></text></g><g><title>path_openat (56,784,592 samples, 0.05%)</title><rect x="1.8811%" y="533" width="0.0516%" height="15" fill="rgb(230,182,32)" fg:x="2070332532" fg:w="56784592"/><text x="2.1311%" y="543.50"></text></g><g><title>proc_single_open (15,054,162 samples, 0.01%)</title><rect x="1.9478%" y="469" width="0.0137%" height="15" fill="rgb(242,56,43)" fg:x="2143722404" fg:w="15054162"/><text x="2.1978%" y="479.50"></text></g><g><title>single_open (15,054,162 samples, 0.01%)</title><rect x="1.9478%" y="453" width="0.0137%" height="15" fill="rgb(233,99,24)" fg:x="2143722404" fg:w="15054162"/><text x="2.1978%" y="463.50"></text></g><g><title>do_dentry_open (24,914,442 samples, 0.02%)</title><rect x="1.9423%" y="485" width="0.0226%" height="15" fill="rgb(234,209,42)" fg:x="2137631741" fg:w="24914442"/><text x="2.1923%" y="495.50"></text></g><g><title>do_filp_open (95,960,102 samples, 0.09%)</title><rect x="1.8791%" y="549" width="0.0872%" height="15" fill="rgb(227,7,12)" fg:x="2068104223" fg:w="95960102"/><text x="2.1291%" y="559.50"></text></g><g><title>vfs_open (36,947,201 samples, 0.03%)</title><rect x="1.9327%" y="533" width="0.0336%" height="15" fill="rgb(245,203,43)" fg:x="2127117124" fg:w="36947201"/><text x="2.1827%" y="543.50"></text></g><g><title>bpf_trampoline_6442477086 (36,947,201 samples, 0.03%)</title><rect x="1.9327%" y="517" width="0.0336%" height="15" fill="rgb(238,205,33)" fg:x="2127117124" fg:w="36947201"/><text x="2.1827%" y="527.50"></text></g><g><title>vfs_open (27,119,250 samples, 0.02%)</title><rect x="1.9417%" y="501" width="0.0246%" height="15" fill="rgb(231,56,7)" fg:x="2136945075" fg:w="27119250"/><text x="2.1917%" y="511.50"></text></g><g><title>do_sys_openat2 (114,322,649 samples, 0.10%)</title><rect x="1.8770%" y="565" width="0.1039%" height="15" fill="rgb(244,186,29)" fg:x="2065801824" fg:w="114322649"/><text x="2.1270%" y="575.50"></text></g><g><title>__x64_sys_openat (115,825,948 samples, 0.11%)</title><rect x="1.8770%" y="581" width="0.1052%" height="15" fill="rgb(234,111,31)" fg:x="2065801824" fg:w="115825948"/><text x="2.1270%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (126,280,211 samples, 0.11%)</title><rect x="1.8736%" y="613" width="0.1147%" height="15" fill="rgb(241,149,10)" fg:x="2062021946" fg:w="126280211"/><text x="2.1236%" y="623.50"></text></g><g><title>do_syscall_64 (123,219,324 samples, 0.11%)</title><rect x="1.8764%" y="597" width="0.1120%" height="15" fill="rgb(249,206,44)" fg:x="2065082833" fg:w="123219324"/><text x="2.1264%" y="607.50"></text></g><g><title>__GI___libc_open (134,604,670 samples, 0.12%)</title><rect x="1.8722%" y="629" width="0.1223%" height="15" fill="rgb(251,153,30)" fg:x="2060495927" fg:w="134604670"/><text x="2.1222%" y="639.50"></text></g><g><title>__isoc99_sscanf (13,615,328 samples, 0.01%)</title><rect x="2.0044%" y="629" width="0.0124%" height="15" fill="rgb(239,152,38)" fg:x="2206011939" fg:w="13615328"/><text x="2.2544%" y="639.50"></text></g><g><title>__vfscanf_internal (13,615,328 samples, 0.01%)</title><rect x="2.0044%" y="613" width="0.0124%" height="15" fill="rgb(249,139,47)" fg:x="2206011939" fg:w="13615328"/><text x="2.2544%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (12,174,175 samples, 0.01%)</title><rect x="2.0422%" y="613" width="0.0111%" height="15" fill="rgb(244,64,35)" fg:x="2247572814" fg:w="12174175"/><text x="2.2922%" y="623.50"></text></g><g><title>do_syscall_64 (11,386,199 samples, 0.01%)</title><rect x="2.0429%" y="597" width="0.0103%" height="15" fill="rgb(216,46,15)" fg:x="2248360790" fg:w="11386199"/><text x="2.2929%" y="607.50"></text></g><g><title>read (15,911,292 samples, 0.01%)</title><rect x="2.0422%" y="629" width="0.0145%" height="15" fill="rgb(250,74,19)" fg:x="2247572814" fg:w="15911292"/><text x="2.2922%" y="639.50"></text></g><g><title>[unknown] (248,463,993 samples, 0.23%)</title><rect x="1.8314%" y="645" width="0.2258%" height="15" fill="rgb(249,42,33)" fg:x="2015539248" fg:w="248463993"/><text x="2.0814%" y="655.50"></text></g><g><title>__fput (23,312,561 samples, 0.02%)</title><rect x="2.0639%" y="549" width="0.0212%" height="15" fill="rgb(242,149,17)" fg:x="2271497829" fg:w="23312561"/><text x="2.3139%" y="559.50"></text></g><g><title>single_release (12,787,038 samples, 0.01%)</title><rect x="2.0735%" y="533" width="0.0116%" height="15" fill="rgb(244,29,21)" fg:x="2282023352" fg:w="12787038"/><text x="2.3235%" y="543.50"></text></g><g><title>__fput_sync (24,068,850 samples, 0.02%)</title><rect x="2.0639%" y="565" width="0.0219%" height="15" fill="rgb(220,130,37)" fg:x="2271497829" fg:w="24068850"/><text x="2.3139%" y="575.50"></text></g><g><title>__x64_sys_close (25,649,507 samples, 0.02%)</title><rect x="2.0639%" y="597" width="0.0233%" height="15" fill="rgb(211,67,2)" fg:x="2271497829" fg:w="25649507"/><text x="2.3139%" y="607.50"></text></g><g><title>__se_sys_close (25,649,507 samples, 0.02%)</title><rect x="2.0639%" y="581" width="0.0233%" height="15" fill="rgb(235,68,52)" fg:x="2271497829" fg:w="25649507"/><text x="2.3139%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (29,465,607 samples, 0.03%)</title><rect x="2.0625%" y="629" width="0.0268%" height="15" fill="rgb(246,142,3)" fg:x="2269969120" fg:w="29465607"/><text x="2.3125%" y="639.50"></text></g><g><title>do_syscall_64 (27,936,898 samples, 0.03%)</title><rect x="2.0639%" y="613" width="0.0254%" height="15" fill="rgb(241,25,7)" fg:x="2271497829" fg:w="27936898"/><text x="2.3139%" y="623.50"></text></g><g><title>__close (33,305,841 samples, 0.03%)</title><rect x="2.0625%" y="645" width="0.0303%" height="15" fill="rgb(242,119,39)" fg:x="2269969120" fg:w="33305841"/><text x="2.3125%" y="655.50"></text></g><g><title>__kmem_cache_alloc_node (11,746,848 samples, 0.01%)</title><rect x="2.1238%" y="485" width="0.0107%" height="15" fill="rgb(241,98,45)" fg:x="2337390701" fg:w="11746848"/><text x="2.3738%" y="495.50"></text></g><g><title>kvmalloc_node (19,326,512 samples, 0.02%)</title><rect x="2.1224%" y="517" width="0.0176%" height="15" fill="rgb(254,28,30)" fg:x="2335860335" fg:w="19326512"/><text x="2.3724%" y="527.50"></text></g><g><title>__kmalloc_node (18,574,450 samples, 0.02%)</title><rect x="2.1231%" y="501" width="0.0169%" height="15" fill="rgb(241,142,54)" fg:x="2336612397" fg:w="18574450"/><text x="2.3731%" y="511.50"></text></g><g><title>proc_pid_status (27,903,139 samples, 0.03%)</title><rect x="2.1434%" y="501" width="0.0254%" height="15" fill="rgb(222,85,15)" fg:x="2359000732" fg:w="27903139"/><text x="2.3934%" y="511.50"></text></g><g><title>proc_single_show (53,960,428 samples, 0.05%)</title><rect x="2.1421%" y="517" width="0.0490%" height="15" fill="rgb(210,85,47)" fg:x="2357499318" fg:w="53960428"/><text x="2.3921%" y="527.50"></text></g><g><title>proc_tgid_stat (23,096,592 samples, 0.02%)</title><rect x="2.1701%" y="501" width="0.0210%" height="15" fill="rgb(224,206,25)" fg:x="2388363154" fg:w="23096592"/><text x="2.4201%" y="511.50"></text></g><g><title>do_task_stat (23,096,592 samples, 0.02%)</title><rect x="2.1701%" y="485" width="0.0210%" height="15" fill="rgb(243,201,19)" fg:x="2388363154" fg:w="23096592"/><text x="2.4201%" y="495.50"></text></g><g><title>ksys_read (85,455,832 samples, 0.08%)</title><rect x="2.1149%" y="581" width="0.0776%" height="15" fill="rgb(236,59,4)" fg:x="2327568940" fg:w="85455832"/><text x="2.3649%" y="591.50"></text></g><g><title>vfs_read (84,702,135 samples, 0.08%)</title><rect x="2.1156%" y="565" width="0.0770%" height="15" fill="rgb(254,179,45)" fg:x="2328322637" fg:w="84702135"/><text x="2.3656%" y="575.50"></text></g><g><title>seq_read (82,427,154 samples, 0.07%)</title><rect x="2.1176%" y="549" width="0.0749%" height="15" fill="rgb(226,14,10)" fg:x="2330597618" fg:w="82427154"/><text x="2.3676%" y="559.50"></text></g><g><title>seq_read_iter (80,964,714 samples, 0.07%)</title><rect x="2.1190%" y="533" width="0.0736%" height="15" fill="rgb(244,27,41)" fg:x="2332060058" fg:w="80964714"/><text x="2.3690%" y="543.50"></text></g><g><title>__x64_sys_read (86,241,319 samples, 0.08%)</title><rect x="2.1149%" y="597" width="0.0784%" height="15" fill="rgb(235,35,32)" fg:x="2327568940" fg:w="86241319"/><text x="2.3649%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (90,759,902 samples, 0.08%)</title><rect x="2.1149%" y="629" width="0.0825%" height="15" fill="rgb(218,68,31)" fg:x="2327568940" fg:w="90759902"/><text x="2.3649%" y="639.50"></text></g><g><title>do_syscall_64 (90,759,902 samples, 0.08%)</title><rect x="2.1149%" y="613" width="0.0825%" height="15" fill="rgb(207,120,37)" fg:x="2327568940" fg:w="90759902"/><text x="2.3649%" y="623.50"></text></g><g><title>read (93,769,720 samples, 0.09%)</title><rect x="2.1149%" y="645" width="0.0852%" height="15" fill="rgb(227,98,0)" fg:x="2327568940" fg:w="93769720"/><text x="2.3649%" y="655.50"></text></g><g><title>ps (417,690,413 samples, 0.38%)</title><rect x="1.8231%" y="661" width="0.3795%" height="15" fill="rgb(207,7,3)" fg:x="2006455630" fg:w="417690413"/><text x="2.0731%" y="671.50"></text></g><g><title>IOTraceClient::do_operation (16,806,469 samples, 0.02%)</title><rect x="2.2046%" y="549" width="0.0153%" height="15" fill="rgb(206,98,19)" fg:x="2426365476" fg:w="16806469"/><text x="2.4546%" y="559.50"></text></g><g><title>OpMeasurement::record_op (12,549,735 samples, 0.01%)</title><rect x="2.2199%" y="549" width="0.0114%" height="15" fill="rgb(217,5,26)" fg:x="2443171945" fg:w="12549735"/><text x="2.4699%" y="559.50"></text></g><g><title>TraceWorkload::has_next_op (23,413,280 samples, 0.02%)</title><rect x="2.2394%" y="549" width="0.0213%" height="15" fill="rgb(235,190,38)" fg:x="2464594782" fg:w="23413280"/><text x="2.4894%" y="559.50"></text></g><g><title>__interceptor_clock_gettime (34,446,902 samples, 0.03%)</title><rect x="2.2668%" y="549" width="0.0313%" height="15" fill="rgb(247,86,24)" fg:x="2494778287" fg:w="34446902"/><text x="2.5168%" y="559.50"></text></g><g><title>__interceptor_clock_gettime.part.0 (15,294,010 samples, 0.01%)</title><rect x="2.2981%" y="549" width="0.0139%" height="15" fill="rgb(205,101,16)" fg:x="2529225189" fg:w="15294010"/><text x="2.5481%" y="559.50"></text></g><g><title>clock_gettime@plt (12,224,257 samples, 0.01%)</title><rect x="2.3120%" y="549" width="0.0111%" height="15" fill="rgb(246,168,33)" fg:x="2544519199" fg:w="12224257"/><text x="2.5620%" y="559.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (13,159,226 samples, 0.01%)</title><rect x="2.3876%" y="533" width="0.0120%" height="15" fill="rgb(231,114,1)" fg:x="2627741028" fg:w="13159226"/><text x="2.6376%" y="543.50"></text></g><g><title>__interceptor_clock_gettime.part.0 (25,138,216 samples, 0.02%)</title><rect x="2.3996%" y="533" width="0.0228%" height="15" fill="rgb(207,184,53)" fg:x="2640900254" fg:w="25138216"/><text x="2.6496%" y="543.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (242,277,093 samples, 0.22%)</title><rect x="2.3301%" y="549" width="0.2201%" height="15" fill="rgb(224,95,51)" fg:x="2564476182" fg:w="242277093"/><text x="2.5801%" y="559.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (132,314,944 samples, 0.12%)</title><rect x="2.4300%" y="533" width="0.1202%" height="15" fill="rgb(212,188,45)" fg:x="2674438331" fg:w="132314944"/><text x="2.6800%" y="543.50"></text></g><g><title>__vdso_clock_gettime (101,896,966 samples, 0.09%)</title><rect x="2.4577%" y="517" width="0.0926%" height="15" fill="rgb(223,154,38)" fg:x="2704856309" fg:w="101896966"/><text x="2.7077%" y="527.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::operator+= (11,996,023 samples, 0.01%)</title><rect x="2.5587%" y="549" width="0.0109%" height="15" fill="rgb(251,22,52)" fg:x="2816038369" fg:w="11996023"/><text x="2.8087%" y="559.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (15,306,790 samples, 0.01%)</title><rect x="2.5696%" y="549" width="0.0139%" height="15" fill="rgb(229,209,22)" fg:x="2828034392" fg:w="15306790"/><text x="2.8196%" y="559.50"></text></g><g><title>std::enable_if&lt;std::chrono::__is_duration&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::value, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (11,158,092 samples, 0.01%)</title><rect x="2.5835%" y="549" width="0.0101%" height="15" fill="rgb(234,138,34)" fg:x="2843341182" fg:w="11158092"/><text x="2.8335%" y="559.50"></text></g><g><title>FileDescriptorCache::get_file_descriptor (14,834,760 samples, 0.01%)</title><rect x="2.9748%" y="517" width="0.0135%" height="15" fill="rgb(212,95,11)" fg:x="3273970761" fg:w="14834760"/><text x="3.2248%" y="527.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_addr (15,350,965 samples, 0.01%)</title><rect x="3.3314%" y="437" width="0.0139%" height="15" fill="rgb(240,179,47)" fg:x="3666418538" fg:w="15350965"/><text x="3.5814%" y="447.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, false, true&gt;::operator (63,983,712 samples, 0.06%)</title><rect x="3.2990%" y="485" width="0.0581%" height="15" fill="rgb(240,163,11)" fg:x="3630738213" fg:w="63983712"/><text x="3.5490%" y="495.50"></text></g><g><title> (63,983,712 samples, 0.06%)</title><rect x="3.2990%" y="469" width="0.0581%" height="15" fill="rgb(236,37,12)" fg:x="3630738213" fg:w="63983712"/><text x="3.5490%" y="479.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_valptr (38,658,955 samples, 0.04%)</title><rect x="3.3220%" y="453" width="0.0351%" height="15" fill="rgb(232,164,16)" fg:x="3656062970" fg:w="38658955"/><text x="3.5720%" y="463.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_ptr (12,952,422 samples, 0.01%)</title><rect x="3.3453%" y="437" width="0.0118%" height="15" fill="rgb(244,205,15)" fg:x="3681769503" fg:w="12952422"/><text x="3.5953%" y="447.50"></text></g><g><title>std::__detail::operator== (20,274,826 samples, 0.02%)</title><rect x="3.3571%" y="485" width="0.0184%" height="15" fill="rgb(223,117,47)" fg:x="3694721925" fg:w="20274826"/><text x="3.6071%" y="495.50"></text></g><g><title>__get_user_nocheck_4 (19,134,584 samples, 0.02%)</title><rect x="3.4265%" y="325" width="0.0174%" height="15" fill="rgb(244,107,35)" fg:x="3771065496" fg:w="19134584"/><text x="3.6765%" y="335.50"></text></g><g><title>futex_q_lock (29,076,187 samples, 0.03%)</title><rect x="3.4446%" y="325" width="0.0264%" height="15" fill="rgb(205,140,8)" fg:x="3790996066" fg:w="29076187"/><text x="3.6946%" y="335.50"></text></g><g><title>futex_wait_setup (60,594,989 samples, 0.06%)</title><rect x="3.4265%" y="341" width="0.0551%" height="15" fill="rgb(228,84,46)" fg:x="3771065496" fg:w="60594989"/><text x="3.6765%" y="351.50"></text></g><g><title>dequeue_task (13,056,970 samples, 0.01%)</title><rect x="3.4865%" y="309" width="0.0119%" height="15" fill="rgb(254,188,9)" fg:x="3837121516" fg:w="13056970"/><text x="3.7365%" y="319.50"></text></g><g><title>dequeue_task_fair (13,056,970 samples, 0.01%)</title><rect x="3.4865%" y="293" width="0.0119%" height="15" fill="rgb(206,112,54)" fg:x="3837121516" fg:w="13056970"/><text x="3.7365%" y="303.50"></text></g><g><title>__sched_text_start (38,872,270 samples, 0.04%)</title><rect x="3.4830%" y="325" width="0.0353%" height="15" fill="rgb(216,84,49)" fg:x="3833237878" fg:w="38872270"/><text x="3.7330%" y="335.50"></text></g><g><title>futex_wait (119,185,833 samples, 0.11%)</title><rect x="3.4107%" y="357" width="0.1083%" height="15" fill="rgb(214,194,35)" fg:x="3753722499" fg:w="119185833"/><text x="3.6607%" y="367.50"></text></g><g><title>schedule (40,450,355 samples, 0.04%)</title><rect x="3.4822%" y="341" width="0.0368%" height="15" fill="rgb(249,28,3)" fg:x="3832457977" fg:w="40450355"/><text x="3.7322%" y="351.50"></text></g><g><title>do_futex (122,799,790 samples, 0.11%)</title><rect x="3.4088%" y="373" width="0.1116%" height="15" fill="rgb(222,56,52)" fg:x="3751591807" fg:w="122799790"/><text x="3.6588%" y="383.50"></text></g><g><title>__se_sys_futex (132,559,587 samples, 0.12%)</title><rect x="3.4046%" y="389" width="0.1204%" height="15" fill="rgb(245,217,50)" fg:x="3747030088" fg:w="132559587"/><text x="3.6546%" y="399.50"></text></g><g><title>__x64_sys_futex (135,520,903 samples, 0.12%)</title><rect x="3.4046%" y="405" width="0.1231%" height="15" fill="rgb(213,201,24)" fg:x="3747030088" fg:w="135520903"/><text x="3.6546%" y="415.50"></text></g><g><title>syscall_enter_from_user_mode (25,518,638 samples, 0.02%)</title><rect x="3.5292%" y="405" width="0.0232%" height="15" fill="rgb(248,116,28)" fg:x="3884134728" fg:w="25518638"/><text x="3.7792%" y="415.50"></text></g><g><title>__audit_syscall_entry (23,249,438 samples, 0.02%)</title><rect x="3.5313%" y="389" width="0.0211%" height="15" fill="rgb(219,72,43)" fg:x="3886403928" fg:w="23249438"/><text x="3.7813%" y="399.50"></text></g><g><title>ktime_get_coarse_real_ts64 (18,595,728 samples, 0.02%)</title><rect x="3.5355%" y="373" width="0.0169%" height="15" fill="rgb(209,138,14)" fg:x="3891057638" fg:w="18595728"/><text x="3.7855%" y="383.50"></text></g><g><title>syscall_exit_to_user_mode (21,206,179 samples, 0.02%)</title><rect x="3.5524%" y="405" width="0.0193%" height="15" fill="rgb(222,18,33)" fg:x="3909653366" fg:w="21206179"/><text x="3.8024%" y="415.50"></text></g><g><title>do_syscall_64 (191,633,551 samples, 0.17%)</title><rect x="3.3990%" y="421" width="0.1741%" height="15" fill="rgb(213,199,7)" fg:x="3740806408" fg:w="191633551"/><text x="3.6490%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (198,434,030 samples, 0.18%)</title><rect x="3.3948%" y="437" width="0.1803%" height="15" fill="rgb(250,110,10)" fg:x="3736238128" fg:w="198434030"/><text x="3.6448%" y="447.50"></text></g><g><title>__GI___lll_lock_wait (259,082,716 samples, 0.24%)</title><rect x="3.3879%" y="453" width="0.2354%" height="15" fill="rgb(248,123,6)" fg:x="3728590969" fg:w="259082716"/><text x="3.6379%" y="463.50"></text></g><g><title>entry_ibpb (53,001,527 samples, 0.05%)</title><rect x="3.5751%" y="437" width="0.0482%" height="15" fill="rgb(206,91,31)" fg:x="3934672158" fg:w="53001527"/><text x="3.8251%" y="447.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (77,825,481 samples, 0.07%)</title><rect x="3.6364%" y="453" width="0.0707%" height="15" fill="rgb(211,154,13)" fg:x="4002068014" fg:w="77825481"/><text x="3.8864%" y="463.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (367,283,866 samples, 0.33%)</title><rect x="3.3755%" y="485" width="0.3337%" height="15" fill="rgb(225,148,7)" fg:x="3714996751" fg:w="367283866"/><text x="3.6255%" y="495.50"></text></g><g><title>std::mutex::lock (359,544,219 samples, 0.33%)</title><rect x="3.3826%" y="469" width="0.3267%" height="15" fill="rgb(220,160,43)" fg:x="3722736398" fg:w="359544219"/><text x="3.6326%" y="479.50"></text></g><g><title>_raw_spin_lock_nested (12,133,269 samples, 0.01%)</title><rect x="3.8286%" y="277" width="0.0110%" height="15" fill="rgb(213,52,39)" fg:x="4213601337" fg:w="12133269"/><text x="4.0786%" y="287.50"></text></g><g><title>do_raw_spin_lock (12,133,269 samples, 0.01%)</title><rect x="3.8286%" y="261" width="0.0110%" height="15" fill="rgb(243,137,7)" fg:x="4213601337" fg:w="12133269"/><text x="4.0786%" y="271.50"></text></g><g><title>native_queued_spin_lock_slowpath (12,133,269 samples, 0.01%)</title><rect x="3.8286%" y="245" width="0.0110%" height="15" fill="rgb(230,79,13)" fg:x="4213601337" fg:w="12133269"/><text x="4.0786%" y="255.50"></text></g><g><title>futex_wake (72,314,117 samples, 0.07%)</title><rect x="3.7746%" y="357" width="0.0657%" height="15" fill="rgb(247,105,23)" fg:x="4154204230" fg:w="72314117"/><text x="4.0246%" y="367.50"></text></g><g><title>wake_up_q (27,432,093 samples, 0.02%)</title><rect x="3.8154%" y="341" width="0.0249%" height="15" fill="rgb(223,179,41)" fg:x="4199086254" fg:w="27432093"/><text x="4.0654%" y="351.50"></text></g><g><title>try_to_wake_up (27,432,093 samples, 0.02%)</title><rect x="3.8154%" y="325" width="0.0249%" height="15" fill="rgb(218,9,34)" fg:x="4199086254" fg:w="27432093"/><text x="4.0654%" y="335.50"></text></g><g><title>ttwu_runnable (12,917,010 samples, 0.01%)</title><rect x="3.8286%" y="309" width="0.0117%" height="15" fill="rgb(222,106,8)" fg:x="4213601337" fg:w="12917010"/><text x="4.0786%" y="319.50"></text></g><g><title>__task_rq_lock (12,917,010 samples, 0.01%)</title><rect x="3.8286%" y="293" width="0.0117%" height="15" fill="rgb(211,220,0)" fg:x="4213601337" fg:w="12917010"/><text x="4.0786%" y="303.50"></text></g><g><title>do_futex (84,494,471 samples, 0.08%)</title><rect x="3.7662%" y="373" width="0.0768%" height="15" fill="rgb(229,52,16)" fg:x="4144979016" fg:w="84494471"/><text x="4.0162%" y="383.50"></text></g><g><title>__se_sys_futex (94,417,691 samples, 0.09%)</title><rect x="3.7607%" y="389" width="0.0858%" height="15" fill="rgb(212,155,18)" fg:x="4138869517" fg:w="94417691"/><text x="4.0107%" y="399.50"></text></g><g><title>__x64_sys_futex (100,391,184 samples, 0.09%)</title><rect x="3.7599%" y="405" width="0.0912%" height="15" fill="rgb(242,21,14)" fg:x="4138081829" fg:w="100391184"/><text x="4.0099%" y="415.50"></text></g><g><title>__lock_acquire (13,045,766 samples, 0.01%)</title><rect x="3.8928%" y="341" width="0.0119%" height="15" fill="rgb(222,19,48)" fg:x="4284269035" fg:w="13045766"/><text x="4.1428%" y="351.50"></text></g><g><title>lock_acquire (20,586,814 samples, 0.02%)</title><rect x="3.8866%" y="357" width="0.0187%" height="15" fill="rgb(232,45,27)" fg:x="4277479047" fg:w="20586814"/><text x="4.1366%" y="367.50"></text></g><g><title>lock_release (20,124,921 samples, 0.02%)</title><rect x="3.9053%" y="357" width="0.0183%" height="15" fill="rgb(249,103,42)" fg:x="4298065861" fg:w="20124921"/><text x="4.1553%" y="367.50"></text></g><g><title>ktime_get_coarse_real_ts64 (50,671,424 samples, 0.05%)</title><rect x="3.8783%" y="373" width="0.0460%" height="15" fill="rgb(246,81,33)" fg:x="4268312051" fg:w="50671424"/><text x="4.1283%" y="383.50"></text></g><g><title>__audit_syscall_entry (61,421,870 samples, 0.06%)</title><rect x="3.8699%" y="389" width="0.0558%" height="15" fill="rgb(252,33,42)" fg:x="4259062048" fg:w="61421870"/><text x="4.1199%" y="399.50"></text></g><g><title>syscall_enter_from_user_mode (74,229,517 samples, 0.07%)</title><rect x="3.8588%" y="405" width="0.0674%" height="15" fill="rgb(209,212,41)" fg:x="4246909504" fg:w="74229517"/><text x="4.1088%" y="415.50"></text></g><g><title>exit_to_user_mode_prepare (13,737,326 samples, 0.01%)</title><rect x="3.9372%" y="389" width="0.0125%" height="15" fill="rgb(207,154,6)" fg:x="4333110627" fg:w="13737326"/><text x="4.1872%" y="399.50"></text></g><g><title>syscall_exit_to_user_mode (39,459,135 samples, 0.04%)</title><rect x="3.9263%" y="405" width="0.0359%" height="15" fill="rgb(223,64,47)" fg:x="4321139021" fg:w="39459135"/><text x="4.1763%" y="415.50"></text></g><g><title>syscall_exit_work (12,972,233 samples, 0.01%)</title><rect x="3.9503%" y="389" width="0.0118%" height="15" fill="rgb(211,161,38)" fg:x="4347625923" fg:w="12972233"/><text x="4.2003%" y="399.50"></text></g><g><title>do_syscall_64 (230,221,439 samples, 0.21%)</title><rect x="3.7543%" y="421" width="0.2092%" height="15" fill="rgb(219,138,40)" fg:x="4131912515" fg:w="230221439"/><text x="4.0043%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (255,220,920 samples, 0.23%)</title><rect x="3.7330%" y="437" width="0.2319%" height="15" fill="rgb(241,228,46)" fg:x="4108396805" fg:w="255220920"/><text x="3.9830%" y="447.50"></text></g><g><title>__GI___lll_lock_wake (355,187,269 samples, 0.32%)</title><rect x="3.7266%" y="453" width="0.3227%" height="15" fill="rgb(223,209,38)" fg:x="4101426410" fg:w="355187269"/><text x="3.9766%" y="463.50"></text></g><g><title>entry_ibpb (92,995,954 samples, 0.08%)</title><rect x="3.9649%" y="437" width="0.0845%" height="15" fill="rgb(236,164,45)" fg:x="4363617725" fg:w="92995954"/><text x="4.2149%" y="447.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (422,344,914 samples, 0.38%)</title><rect x="3.7092%" y="485" width="0.3838%" height="15" fill="rgb(231,15,5)" fg:x="4082280617" fg:w="422344914"/><text x="3.9592%" y="495.50"></text></g><g><title>std::mutex::unlock (407,014,889 samples, 0.37%)</title><rect x="3.7232%" y="469" width="0.3698%" height="15" fill="rgb(252,35,15)" fg:x="4097610642" fg:w="407014889"/><text x="3.9732%" y="479.50"></text></g><g><title>pthread_mutex_unlock@@GLIBC_2.2.5 (23,644,514 samples, 0.02%)</title><rect x="4.0715%" y="453" width="0.0215%" height="15" fill="rgb(248,181,18)" fg:x="4480981017" fg:w="23644514"/><text x="4.3215%" y="463.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (36,965,889 samples, 0.03%)</title><rect x="4.1063%" y="469" width="0.0336%" height="15" fill="rgb(233,39,42)" fg:x="4519313543" fg:w="36965889"/><text x="4.3563%" y="479.50"></text></g><g><title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::end (52,980,305 samples, 0.05%)</title><rect x="4.0979%" y="485" width="0.0481%" height="15" fill="rgb(238,110,33)" fg:x="4510060116" fg:w="52980305"/><text x="4.3479%" y="495.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (41,803,015 samples, 0.04%)</title><rect x="4.2607%" y="437" width="0.0380%" height="15" fill="rgb(233,195,10)" fg:x="4689250584" fg:w="41803015"/><text x="4.5107%" y="447.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (12,013,478 samples, 0.01%)</title><rect x="4.2878%" y="421" width="0.0109%" height="15" fill="rgb(254,105,3)" fg:x="4719040121" fg:w="12013478"/><text x="4.5378%" y="431.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (78,362,372 samples, 0.07%)</title><rect x="4.2372%" y="453" width="0.0712%" height="15" fill="rgb(221,225,9)" fg:x="4663368447" fg:w="78362372"/><text x="4.4872%" y="463.50"></text></g><g><title>decltype (14,120,916 samples, 0.01%)</title><rect x="4.5364%" y="405" width="0.0128%" height="15" fill="rgb(224,227,45)" fg:x="4992586182" fg:w="14120916"/><text x="4.7864%" y="415.50"></text></g><g><title>decltype  (13,818,009 samples, 0.01%)</title><rect x="4.5492%" y="405" width="0.0126%" height="15" fill="rgb(229,198,43)" fg:x="5006707098" fg:w="13818009"/><text x="4.7992%" y="415.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_v (55,392,180 samples, 0.05%)</title><rect x="4.5618%" y="405" width="0.0503%" height="15" fill="rgb(206,209,35)" fg:x="5020525107" fg:w="55392180"/><text x="4.8118%" y="415.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_valptr (41,097,624 samples, 0.04%)</title><rect x="4.5747%" y="389" width="0.0373%" height="15" fill="rgb(245,195,53)" fg:x="5034819663" fg:w="41097624"/><text x="4.8247%" y="399.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;::_M_ptr (16,914,794 samples, 0.02%)</title><rect x="4.5967%" y="373" width="0.0154%" height="15" fill="rgb(240,92,26)" fg:x="5059002493" fg:w="16914794"/><text x="4.8467%" y="383.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (33,172,379 samples, 0.03%)</title><rect x="4.6240%" y="405" width="0.0301%" height="15" fill="rgb(207,40,23)" fg:x="5088986830" fg:w="33172379"/><text x="4.8740%" y="415.50"></text></g><g><title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_M_cget (13,107,414 samples, 0.01%)</title><rect x="4.6541%" y="405" width="0.0119%" height="15" fill="rgb(223,111,35)" fg:x="5122159209" fg:w="13107414"/><text x="4.9041%" y="415.50"></text></g><g><title>MemcmpInterceptorCommon (15,039,268 samples, 0.01%)</title><rect x="4.6907%" y="373" width="0.0137%" height="15" fill="rgb(229,147,28)" fg:x="5162465789" fg:w="15039268"/><text x="4.9407%" y="383.50"></text></g><g><title>MemcmpInterceptorCommon (55,226,585 samples, 0.05%)</title><rect x="4.7434%" y="357" width="0.0502%" height="15" fill="rgb(211,29,28)" fg:x="5220398755" fg:w="55226585"/><text x="4.9934%" y="367.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (19,761,578 samples, 0.02%)</title><rect x="4.7935%" y="357" width="0.0180%" height="15" fill="rgb(228,72,33)" fg:x="5275625340" fg:w="19761578"/><text x="5.0435%" y="367.50"></text></g><g><title>__asan_region_is_poisoned (74,990,607 samples, 0.07%)</title><rect x="4.8115%" y="357" width="0.0681%" height="15" fill="rgb(205,214,31)" fg:x="5295386918" fg:w="74990607"/><text x="5.0615%" y="367.50"></text></g><g><title>__asan_region_is_poisoned@plt (30,515,651 samples, 0.03%)</title><rect x="4.8796%" y="357" width="0.0277%" height="15" fill="rgb(224,111,15)" fg:x="5370377525" fg:w="30515651"/><text x="5.1296%" y="367.50"></text></g><g><title>__memcmp_avx2_movbe (62,564,628 samples, 0.06%)</title><rect x="4.9074%" y="357" width="0.0568%" height="15" fill="rgb(253,21,26)" fg:x="5400893176" fg:w="62564628"/><text x="5.1574%" y="367.50"></text></g><g><title>__sanitizer::mem_is_zero (35,188,215 samples, 0.03%)</title><rect x="4.9642%" y="357" width="0.0320%" height="15" fill="rgb(245,139,43)" fg:x="5463457804" fg:w="35188215"/><text x="5.2142%" y="367.50"></text></g><g><title>__interceptor_memcmp (357,520,115 samples, 0.32%)</title><rect x="4.7044%" y="373" width="0.3248%" height="15" fill="rgb(252,170,7)" fg:x="5177505057" fg:w="357520115"/><text x="4.9544%" y="383.50"></text></g><g><title>__sanitizer_weak_hook_memcmp (36,379,153 samples, 0.03%)</title><rect x="4.9962%" y="357" width="0.0331%" height="15" fill="rgb(231,118,14)" fg:x="5498646019" fg:w="36379153"/><text x="5.2462%" y="367.50"></text></g><g><title>__gnu_cxx::__enable_if&lt;std::__is_char&lt;char&gt;::__value, bool&gt;::__type std::operator==&lt;char&gt; (421,096,587 samples, 0.38%)</title><rect x="4.6708%" y="389" width="0.3826%" height="15" fill="rgb(238,83,0)" fg:x="5140514823" fg:w="421096587"/><text x="4.9208%" y="399.50"></text></g><g><title>std::char_traits&lt;char&gt;::compare (22,689,113 samples, 0.02%)</title><rect x="5.0328%" y="373" width="0.0206%" height="15" fill="rgb(221,39,39)" fg:x="5538922297" fg:w="22689113"/><text x="5.2828%" y="383.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (29,524,626 samples, 0.03%)</title><rect x="5.0595%" y="389" width="0.0268%" height="15" fill="rgb(222,119,46)" fg:x="5568294571" fg:w="29524626"/><text x="5.3095%" y="399.50"></text></g><g><title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (473,100,084 samples, 0.43%)</title><rect x="4.6660%" y="405" width="0.4299%" height="15" fill="rgb(222,165,49)" fg:x="5135266623" fg:w="473100084"/><text x="4.9160%" y="415.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (704,624,702 samples, 0.64%)</title><rect x="4.4648%" y="421" width="0.6402%" height="15" fill="rgb(219,113,52)" fg:x="4913798710" fg:w="704624702"/><text x="4.7148%" y="431.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_S_equals (13,614,868 samples, 0.01%)</title><rect x="5.1050%" y="421" width="0.0124%" height="15" fill="rgb(214,7,15)" fg:x="5618423412" fg:w="13614868"/><text x="5.3550%" y="431.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (863,357,784 samples, 0.78%)</title><rect x="4.3427%" y="437" width="0.7845%" height="15" fill="rgb(235,32,4)" fg:x="4779413758" fg:w="863357784"/><text x="4.5927%" y="447.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (893,491,241 samples, 0.81%)</title><rect x="4.3181%" y="453" width="0.8118%" height="15" fill="rgb(238,90,54)" fg:x="4752358405" fg:w="893491241"/><text x="4.5681%" y="463.50"></text></g><g><title>std::_Hash_impl::hash (24,018,754 samples, 0.02%)</title><rect x="5.1568%" y="437" width="0.0218%" height="15" fill="rgb(213,208,19)" fg:x="5675406971" fg:w="24018754"/><text x="5.4068%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (11,236,066 samples, 0.01%)</title><rect x="5.1786%" y="437" width="0.0102%" height="15" fill="rgb(233,156,4)" fg:x="5699425725" fg:w="11236066"/><text x="5.4286%" y="447.50"></text></g><g><title>std::_Hash_bytes (209,029,106 samples, 0.19%)</title><rect x="5.2271%" y="421" width="0.1899%" height="15" fill="rgb(207,194,5)" fg:x="5752835685" fg:w="209029106"/><text x="5.4771%" y="431.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (314,470,269 samples, 0.29%)</title><rect x="5.1409%" y="453" width="0.2857%" height="15" fill="rgb(206,111,30)" fg:x="5657963340" fg:w="314470269"/><text x="5.3909%" y="463.50"></text></g><g><title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (245,193,730 samples, 0.22%)</title><rect x="5.2039%" y="437" width="0.2228%" height="15" fill="rgb(243,70,54)" fg:x="5727239879" fg:w="245193730"/><text x="5.4539%" y="447.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, false, true&gt;::_Node_iterator (21,872,685 samples, 0.02%)</title><rect x="5.4267%" y="453" width="0.0199%" height="15" fill="rgb(242,28,8)" fg:x="5972433609" fg:w="21872685"/><text x="5.6767%" y="463.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, true&gt;::_Node_iterator_base (12,791,651 samples, 0.01%)</title><rect x="5.4349%" y="437" width="0.0116%" height="15" fill="rgb(219,106,18)" fg:x="5981514643" fg:w="12791651"/><text x="5.6849%" y="447.50"></text></g><g><title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, true&gt;::_Node_iterator_base (19,680,625 samples, 0.02%)</title><rect x="5.4465%" y="453" width="0.0179%" height="15" fill="rgb(244,222,10)" fg:x="5994306294" fg:w="19680625"/><text x="5.6965%" y="463.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1,432,699,061 samples, 1.30%)</title><rect x="4.1654%" y="469" width="1.3018%" height="15" fill="rgb(236,179,52)" fg:x="4584340801" fg:w="1432699061"/><text x="4.4154%" y="479.50"></text></g><g><title>FileDescriptorCache::get_file_descriptor (2,526,113,116 samples, 2.30%)</title><rect x="3.1929%" y="501" width="2.2953%" height="15" fill="rgb(213,23,39)" fg:x="3513988126" fg:w="2526113116"/><text x="3.4429%" y="511.50">F..</text></g><g><title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::find (1,477,060,821 samples, 1.34%)</title><rect x="4.1461%" y="485" width="1.3421%" height="15" fill="rgb(238,48,10)" fg:x="4563040421" fg:w="1477060821"/><text x="4.3961%" y="495.50"></text></g><g><title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt;, false, true&gt;::_Node_iterator (15,274,626 samples, 0.01%)</title><rect x="5.4743%" y="469" width="0.0139%" height="15" fill="rgb(251,196,23)" fg:x="6024826616" fg:w="15274626"/><text x="5.7243%" y="479.50"></text></g><g><title>__GI___pthread_disable_asynccancel (13,675,888 samples, 0.01%)</title><rect x="5.4889%" y="501" width="0.0124%" height="15" fill="rgb(250,152,24)" fg:x="6040893629" fg:w="13675888"/><text x="5.7389%" y="511.50"></text></g><g><title>__GI___pthread_enable_asynccancel (19,160,057 samples, 0.02%)</title><rect x="5.5013%" y="501" width="0.0174%" height="15" fill="rgb(209,150,17)" fg:x="6054569517" fg:w="19160057"/><text x="5.7513%" y="511.50"></text></g><g><title>__asan::Allocator::Deallocate (23,974,204 samples, 0.02%)</title><rect x="5.5187%" y="501" width="0.0218%" height="15" fill="rgb(234,202,34)" fg:x="6073729574" fg:w="23974204"/><text x="5.7687%" y="511.50"></text></g><g><title>__asan::Allocator::QuarantineChunk (19,990,663 samples, 0.02%)</title><rect x="5.5405%" y="501" width="0.0182%" height="15" fill="rgb(253,148,53)" fg:x="6097703778" fg:w="19990663"/><text x="5.7905%" y="511.50"></text></g><g><title>__asan::GetMallocContextSize (44,390,445 samples, 0.04%)</title><rect x="5.5587%" y="501" width="0.0403%" height="15" fill="rgb(218,129,16)" fg:x="6117694441" fg:w="44390445"/><text x="5.8087%" y="511.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (29,517,319 samples, 0.03%)</title><rect x="5.5990%" y="501" width="0.0268%" height="15" fill="rgb(216,85,19)" fg:x="6162084886" fg:w="29517319"/><text x="5.8490%" y="511.50"></text></g><g><title>__asan::asan_delete (15,077,844 samples, 0.01%)</title><rect x="5.6258%" y="501" width="0.0137%" height="15" fill="rgb(235,228,7)" fg:x="6191602205" fg:w="15077844"/><text x="5.8758%" y="511.50"></text></g><g><title>__asan_region_is_poisoned (222,431,719 samples, 0.20%)</title><rect x="5.6395%" y="501" width="0.2021%" height="15" fill="rgb(245,175,0)" fg:x="6206680049" fg:w="222431719"/><text x="5.8895%" y="511.50"></text></g><g><title>__interceptor_pread.part.0 (60,145,823 samples, 0.05%)</title><rect x="5.8472%" y="501" width="0.0546%" height="15" fill="rgb(208,168,36)" fg:x="6435271982" fg:w="60145823"/><text x="6.0972%" y="511.50"></text></g><g><title>__lock_acquire (30,325,719 samples, 0.03%)</title><rect x="6.0812%" y="469" width="0.0276%" height="15" fill="rgb(246,171,24)" fg:x="6692760377" fg:w="30325719"/><text x="6.3312%" y="479.50"></text></g><g><title>__rcu_read_lock (168,419,891 samples, 0.15%)</title><rect x="6.1087%" y="469" width="0.1530%" height="15" fill="rgb(215,142,24)" fg:x="6723086096" fg:w="168419891"/><text x="6.3587%" y="479.50"></text></g><g><title>__lock_acquire (1,472,636,097 samples, 1.34%)</title><rect x="7.1889%" y="453" width="1.3381%" height="15" fill="rgb(250,187,7)" fg:x="7911868191" fg:w="1472636097"/><text x="7.4389%" y="463.50"></text></g><g><title>lock_acquire (3,244,766,113 samples, 2.95%)</title><rect x="6.2618%" y="469" width="2.9483%" height="15" fill="rgb(228,66,33)" fg:x="6891505987" fg:w="3244766113"/><text x="6.5118%" y="479.50">lo..</text></g><g><title>trace_lock_acquire (737,664,902 samples, 0.67%)</title><rect x="8.5398%" y="453" width="0.6703%" height="15" fill="rgb(234,215,21)" fg:x="9398607198" fg:w="737664902"/><text x="8.7898%" y="463.50"></text></g><g><title>rcu_is_watching (334,603,839 samples, 0.30%)</title><rect x="8.9060%" y="437" width="0.3040%" height="15" fill="rgb(222,191,20)" fg:x="9801668261" fg:w="334603839"/><text x="9.1560%" y="447.50"></text></g><g><title>migrate_disable (228,075,280 samples, 0.21%)</title><rect x="9.2100%" y="469" width="0.2072%" height="15" fill="rgb(245,79,54)" fg:x="10136272100" fg:w="228075280"/><text x="9.4600%" y="479.50"></text></g><g><title>__bpf_prog_enter (3,845,494,848 samples, 3.49%)</title><rect x="5.9637%" y="485" width="3.4941%" height="15" fill="rgb(240,10,37)" fg:x="6563486316" fg:w="3845494848"/><text x="6.2137%" y="495.50">__b..</text></g><g><title>trace_lock_acquire (44,633,784 samples, 0.04%)</title><rect x="9.4173%" y="469" width="0.0406%" height="15" fill="rgb(214,192,32)" fg:x="10364347380" fg:w="44633784"/><text x="9.6673%" y="479.50"></text></g><g><title>__rcu_read_unlock (27,068,895 samples, 0.02%)</title><rect x="9.5255%" y="469" width="0.0246%" height="15" fill="rgb(209,36,54)" fg:x="10483505270" fg:w="27068895"/><text x="9.7755%" y="479.50"></text></g><g><title>match_held_lock (26,260,207 samples, 0.02%)</title><rect x="10.2809%" y="453" width="0.0239%" height="15" fill="rgb(220,10,11)" fg:x="11314902627" fg:w="26260207"/><text x="10.5309%" y="463.50"></text></g><g><title>lock_release (1,025,010,560 samples, 0.93%)</title><rect x="9.5501%" y="469" width="0.9313%" height="15" fill="rgb(221,106,17)" fg:x="10510574165" fg:w="1025010560"/><text x="9.8001%" y="479.50"></text></g><g><title>trace_lock_release (188,190,933 samples, 0.17%)</title><rect x="10.3105%" y="453" width="0.1710%" height="15" fill="rgb(251,142,44)" fg:x="11347393792" fg:w="188190933"/><text x="10.5605%" y="463.50"></text></g><g><title>rcu_is_watching (105,867,469 samples, 0.10%)</title><rect x="10.3853%" y="437" width="0.0962%" height="15" fill="rgb(238,13,15)" fg:x="11429717256" fg:w="105867469"/><text x="10.6353%" y="447.50"></text></g><g><title>match_held_lock (20,195,212 samples, 0.02%)</title><rect x="10.4815%" y="469" width="0.0183%" height="15" fill="rgb(208,107,27)" fg:x="11535584725" fg:w="20195212"/><text x="10.7315%" y="479.50"></text></g><g><title>migrate_enable (156,614,593 samples, 0.14%)</title><rect x="10.4998%" y="469" width="0.1423%" height="15" fill="rgb(205,136,37)" fg:x="11555779937" fg:w="156614593"/><text x="10.7498%" y="479.50"></text></g><g><title>__bpf_prog_exit (1,327,666,471 samples, 1.21%)</title><rect x="9.4578%" y="485" width="1.2063%" height="15" fill="rgb(250,205,27)" fg:x="10408981164" fg:w="1327666471"/><text x="9.7078%" y="495.50"></text></g><g><title>trace_lock_release (24,253,105 samples, 0.02%)</title><rect x="10.6421%" y="469" width="0.0220%" height="15" fill="rgb(210,80,43)" fg:x="11712394530" fg:w="24253105"/><text x="10.8921%" y="479.50"></text></g><g><title>__htab_map_lookup_elem (39,457,781 samples, 0.04%)</title><rect x="10.6642%" y="485" width="0.0359%" height="15" fill="rgb(247,160,36)" fg:x="11736647635" fg:w="39457781"/><text x="10.9142%" y="495.50"></text></g><g><title>__rcu_read_lock (199,916,335 samples, 0.18%)</title><rect x="10.7000%" y="485" width="0.1816%" height="15" fill="rgb(234,13,49)" fg:x="11776105416" fg:w="199916335"/><text x="10.9500%" y="495.50"></text></g><g><title>__rcu_read_unlock (12,529,402 samples, 0.01%)</title><rect x="10.8817%" y="485" width="0.0114%" height="15" fill="rgb(234,122,0)" fg:x="11976021751" fg:w="12529402"/><text x="11.1317%" y="495.50"></text></g><g><title>bpf_ktime_get_ns (36,666,268 samples, 0.03%)</title><rect x="10.8965%" y="485" width="0.0333%" height="15" fill="rgb(207,146,38)" fg:x="11992408731" fg:w="36666268"/><text x="11.1465%" y="495.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (13,251,849 samples, 0.01%)</title><rect x="20.0633%" y="453" width="0.0120%" height="15" fill="rgb(207,177,25)" fg:x="22081053839" fg:w="13251849"/><text x="20.3133%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (13,251,849 samples, 0.01%)</title><rect x="20.0633%" y="437" width="0.0120%" height="15" fill="rgb(211,178,42)" fg:x="22081053839" fg:w="13251849"/><text x="20.3133%" y="447.50"></text></g><g><title>bcmp (122,105,506 samples, 0.11%)</title><rect x="20.0753%" y="453" width="0.1109%" height="15" fill="rgb(230,69,54)" fg:x="22094305688" fg:w="122105506"/><text x="20.3253%" y="463.50"></text></g><g><title>debug_lockdep_rcu_enabled (75,495,047 samples, 0.07%)</title><rect x="20.1863%" y="453" width="0.0686%" height="15" fill="rgb(214,135,41)" fg:x="22216411194" fg:w="75495047"/><text x="20.4363%" y="463.50"></text></g><g><title>htab_map_hash (1,473,937,682 samples, 1.34%)</title><rect x="20.2549%" y="453" width="1.3392%" height="15" fill="rgb(237,67,25)" fg:x="22291906241" fg:w="1473937682"/><text x="20.5049%" y="463.50"></text></g><g><title>lock_is_held_type (42,119,580 samples, 0.04%)</title><rect x="21.5941%" y="453" width="0.0383%" height="15" fill="rgb(222,189,50)" fg:x="23765843923" fg:w="42119580"/><text x="21.8441%" y="463.50"></text></g><g><title>rcu_is_watching (48,909,934 samples, 0.04%)</title><rect x="21.6324%" y="453" width="0.0444%" height="15" fill="rgb(245,148,34)" fg:x="23807963503" fg:w="48909934"/><text x="21.8824%" y="463.50"></text></g><g><title>debug_lockdep_rcu_enabled (96,157,187 samples, 0.09%)</title><rect x="21.7723%" y="437" width="0.0874%" height="15" fill="rgb(222,29,6)" fg:x="23961970679" fg:w="96157187"/><text x="22.0223%" y="447.50"></text></g><g><title>lock_is_held_type (2,113,194,099 samples, 1.92%)</title><rect x="21.8597%" y="437" width="1.9201%" height="15" fill="rgb(221,189,43)" fg:x="24058127866" fg:w="2113194099"/><text x="22.1097%" y="447.50">l..</text></g><g><title>match_held_lock (330,725,018 samples, 0.30%)</title><rect x="23.4793%" y="421" width="0.3005%" height="15" fill="rgb(207,36,27)" fg:x="25840596947" fg:w="330725018"/><text x="23.7293%" y="431.50"></text></g><g><title>match_held_lock (35,145,984 samples, 0.03%)</title><rect x="23.7798%" y="437" width="0.0319%" height="15" fill="rgb(217,90,24)" fg:x="26171321965" fg:w="35145984"/><text x="24.0298%" y="447.50"></text></g><g><title>__htab_map_lookup_elem (13,970,282,031 samples, 12.69%)</title><rect x="11.3245%" y="469" width="12.6937%" height="15" fill="rgb(224,66,35)" fg:x="12463456743" fg:w="13970282031"/><text x="11.5745%" y="479.50">__htab_map_lookup_e..</text></g><g><title>rcu_read_lock_held (2,576,865,337 samples, 2.34%)</title><rect x="21.6768%" y="453" width="2.3414%" height="15" fill="rgb(221,13,50)" fg:x="23856873437" fg:w="2576865337"/><text x="21.9268%" y="463.50">r..</text></g><g><title>rcu_is_watching (227,270,825 samples, 0.21%)</title><rect x="23.8117%" y="437" width="0.2065%" height="15" fill="rgb(236,68,49)" fg:x="26206467949" fg:w="227270825"/><text x="24.0617%" y="447.50"></text></g><g><title>__x86_indirect_thunk_r11 (25,594,405 samples, 0.02%)</title><rect x="24.0536%" y="453" width="0.0233%" height="15" fill="rgb(229,146,28)" fg:x="26472663677" fg:w="25594405"/><text x="24.3036%" y="463.50"></text></g><g><title>ktime_get_mono_fast_ns (2,218,142,003 samples, 2.02%)</title><rect x="24.0768%" y="453" width="2.0154%" height="15" fill="rgb(225,31,38)" fg:x="26498258082" fg:w="2218142003"/><text x="24.3268%" y="463.50">k..</text></g><g><title>read_tsc (1,902,010,243 samples, 1.73%)</title><rect x="24.3641%" y="437" width="1.7282%" height="15" fill="rgb(250,208,3)" fg:x="26814389842" fg:w="1902010243"/><text x="24.6141%" y="447.50"></text></g><g><title>bpf_ktime_get_ns (2,339,761,383 samples, 2.13%)</title><rect x="24.0247%" y="469" width="2.1260%" height="15" fill="rgb(246,54,23)" fg:x="26440824375" fg:w="2339761383"/><text x="24.2747%" y="479.50">b..</text></g><g><title>read_tsc (64,185,673 samples, 0.06%)</title><rect x="26.0923%" y="453" width="0.0583%" height="15" fill="rgb(243,76,11)" fg:x="28716400085" fg:w="64185673"/><text x="26.3423%" y="463.50"></text></g><g><title>ktime_get_mono_fast_ns (31,150,029 samples, 0.03%)</title><rect x="26.1556%" y="469" width="0.0283%" height="15" fill="rgb(245,21,50)" fg:x="28786059978" fg:w="31150029"/><text x="26.4056%" y="479.50"></text></g><g><title>bpf_prog_790e9b214d9c9b97_sampling_folio_accessed (16,840,366,194 samples, 15.30%)</title><rect x="10.9299%" y="485" width="15.3015%" height="15" fill="rgb(228,9,43)" fg:x="12029074999" fg:w="16840366194"/><text x="11.1799%" y="495.50">bpf_prog_790e9b214d9c9b..</text></g><g><title>rcu_read_lock_held (52,231,186 samples, 0.05%)</title><rect x="26.1839%" y="469" width="0.0475%" height="15" fill="rgb(208,100,47)" fg:x="28817210007" fg:w="52231186"/><text x="26.4339%" y="479.50"></text></g><g><title>__x64_sys_pread64 (41,301,136 samples, 0.04%)</title><rect x="26.3731%" y="469" width="0.0375%" height="15" fill="rgb(232,26,8)" fg:x="29025405775" fg:w="41301136"/><text x="26.6231%" y="479.50"></text></g><g><title>__fdget (23,099,900 samples, 0.02%)</title><rect x="26.4816%" y="453" width="0.0210%" height="15" fill="rgb(216,166,38)" fg:x="29144850859" fg:w="23099900"/><text x="26.7316%" y="463.50"></text></g><g><title>__lock_acquire (31,251,919 samples, 0.03%)</title><rect x="26.7387%" y="389" width="0.0284%" height="15" fill="rgb(251,202,51)" fg:x="29427758083" fg:w="31251919"/><text x="26.9887%" y="399.50"></text></g><g><title>lock_acquire (69,367,586 samples, 0.06%)</title><rect x="26.7109%" y="405" width="0.0630%" height="15" fill="rgb(254,216,34)" fg:x="29397193820" fg:w="69367586"/><text x="26.9609%" y="415.50"></text></g><g><title>lock_release (35,312,680 samples, 0.03%)</title><rect x="26.7739%" y="405" width="0.0321%" height="15" fill="rgb(251,32,27)" fg:x="29466561406" fg:w="35312680"/><text x="27.0239%" y="415.50"></text></g><g><title>__fget_files (259,575,184 samples, 0.24%)</title><rect x="26.5716%" y="421" width="0.2359%" height="15" fill="rgb(208,127,28)" fg:x="29243860258" fg:w="259575184"/><text x="26.8216%" y="431.50"></text></g><g><title>__fdget (323,825,166 samples, 0.29%)</title><rect x="26.5349%" y="437" width="0.2942%" height="15" fill="rgb(224,137,22)" fg:x="29203490890" fg:w="323825166"/><text x="26.7849%" y="447.50"></text></g><g><title>__fget_files (23,920,175 samples, 0.02%)</title><rect x="26.8291%" y="437" width="0.0217%" height="15" fill="rgb(254,70,32)" fg:x="29527316056" fg:w="23920175"/><text x="27.0791%" y="447.50"></text></g><g><title>__get_task_ioprio (13,592,882 samples, 0.01%)</title><rect x="26.8529%" y="437" width="0.0124%" height="15" fill="rgb(229,75,37)" fg:x="29553505578" fg:w="13592882"/><text x="27.1029%" y="447.50"></text></g><g><title>ext4_file_read_iter (12,373,927 samples, 0.01%)</title><rect x="26.8667%" y="437" width="0.0112%" height="15" fill="rgb(252,64,23)" fg:x="29568668627" fg:w="12373927"/><text x="27.1167%" y="447.50"></text></g><g><title>fput (17,904,297 samples, 0.02%)</title><rect x="26.8779%" y="437" width="0.0163%" height="15" fill="rgb(232,162,48)" fg:x="29581042554" fg:w="17904297"/><text x="27.1279%" y="447.50"></text></g><g><title>security_file_permission (16,215,998 samples, 0.01%)</title><rect x="26.8942%" y="437" width="0.0147%" height="15" fill="rgb(246,160,12)" fg:x="29598946851" fg:w="16215998"/><text x="27.1442%" y="447.50"></text></g><g><title>__lock_acquire (19,297,303 samples, 0.02%)</title><rect x="27.0941%" y="373" width="0.0175%" height="15" fill="rgb(247,166,0)" fg:x="29818907684" fg:w="19297303"/><text x="27.3441%" y="383.50"></text></g><g><title>lock_acquire (40,573,643 samples, 0.04%)</title><rect x="27.0781%" y="389" width="0.0369%" height="15" fill="rgb(249,219,21)" fg:x="29801396560" fg:w="40573643"/><text x="27.3281%" y="399.50"></text></g><g><title>lock_release (25,168,521 samples, 0.02%)</title><rect x="27.1150%" y="389" width="0.0229%" height="15" fill="rgb(205,209,3)" fg:x="29841970203" fg:w="25168521"/><text x="27.3650%" y="399.50"></text></g><g><title>do_raw_spin_lock (128,988,218 samples, 0.12%)</title><rect x="27.1455%" y="357" width="0.1172%" height="15" fill="rgb(243,44,1)" fg:x="29875547970" fg:w="128988218"/><text x="27.3955%" y="367.50"></text></g><g><title>__lock_acquire (125,816,768 samples, 0.11%)</title><rect x="27.2753%" y="341" width="0.1143%" height="15" fill="rgb(206,159,16)" fg:x="30018362262" fg:w="125816768"/><text x="27.5253%" y="351.50"></text></g><g><title>lock_acquire (143,346,420 samples, 0.13%)</title><rect x="27.2627%" y="357" width="0.1302%" height="15" fill="rgb(244,77,30)" fg:x="30004536188" fg:w="143346420"/><text x="27.5127%" y="367.50"></text></g><g><title>_raw_spin_lock (280,007,952 samples, 0.25%)</title><rect x="27.1400%" y="373" width="0.2544%" height="15" fill="rgb(218,69,12)" fg:x="29869437607" fg:w="280007952"/><text x="27.3900%" y="383.50"></text></g><g><title>do_raw_spin_unlock (12,390,166 samples, 0.01%)</title><rect x="27.3972%" y="357" width="0.0113%" height="15" fill="rgb(212,87,7)" fg:x="30152488422" fg:w="12390166"/><text x="27.6472%" y="367.50"></text></g><g><title>_raw_spin_unlock (28,791,041 samples, 0.03%)</title><rect x="27.3944%" y="373" width="0.0262%" height="15" fill="rgb(245,114,25)" fg:x="30149445559" fg:w="28791041"/><text x="27.6444%" y="383.50"></text></g><g><title>lock_release (13,358,012 samples, 0.01%)</title><rect x="27.4084%" y="357" width="0.0121%" height="15" fill="rgb(210,61,42)" fg:x="30164878588" fg:w="13358012"/><text x="27.6584%" y="367.50"></text></g><g><title>lockref_get_not_zero (313,317,386 samples, 0.28%)</title><rect x="27.1379%" y="389" width="0.2847%" height="15" fill="rgb(211,52,33)" fg:x="29867138724" fg:w="313317386"/><text x="27.3879%" y="399.50"></text></g><g><title>dget_parent (390,737,020 samples, 0.36%)</title><rect x="27.0683%" y="405" width="0.3550%" height="15" fill="rgb(234,58,33)" fg:x="29790513322" fg:w="390737020"/><text x="27.3183%" y="415.50"></text></g><g><title>do_raw_spin_lock (30,823,381 samples, 0.03%)</title><rect x="27.4308%" y="373" width="0.0280%" height="15" fill="rgb(220,115,36)" fg:x="30189502268" fg:w="30823381"/><text x="27.6808%" y="383.50"></text></g><g><title>__lock_acquire (17,962,757 samples, 0.02%)</title><rect x="27.4692%" y="357" width="0.0163%" height="15" fill="rgb(243,153,54)" fg:x="30231751324" fg:w="17962757"/><text x="27.7192%" y="367.50"></text></g><g><title>lock_acquire (30,082,133 samples, 0.03%)</title><rect x="27.4588%" y="373" width="0.0273%" height="15" fill="rgb(251,47,18)" fg:x="30220325649" fg:w="30082133"/><text x="27.7088%" y="383.50"></text></g><g><title>_raw_spin_lock (62,449,111 samples, 0.06%)</title><rect x="27.4301%" y="389" width="0.0567%" height="15" fill="rgb(242,102,42)" fg:x="30188718145" fg:w="62449111"/><text x="27.6801%" y="399.50"></text></g><g><title>lock_release (20,246,324 samples, 0.02%)</title><rect x="27.4916%" y="373" width="0.0184%" height="15" fill="rgb(234,31,38)" fg:x="30256386299" fg:w="20246324"/><text x="27.7416%" y="383.50"></text></g><g><title>_raw_spin_unlock (26,152,364 samples, 0.02%)</title><rect x="27.4868%" y="389" width="0.0238%" height="15" fill="rgb(221,117,51)" fg:x="30251167256" fg:w="26152364"/><text x="27.7368%" y="399.50"></text></g><g><title>__lock_acquire (25,216,222 samples, 0.02%)</title><rect x="27.5273%" y="373" width="0.0229%" height="15" fill="rgb(212,20,18)" fg:x="30295725477" fg:w="25216222"/><text x="27.7773%" y="383.50"></text></g><g><title>lock_acquire (54,759,517 samples, 0.05%)</title><rect x="27.5113%" y="389" width="0.0498%" height="15" fill="rgb(245,133,36)" fg:x="30278091862" fg:w="54759517"/><text x="27.7613%" y="399.50"></text></g><g><title>trace_lock_acquire (11,124,314 samples, 0.01%)</title><rect x="27.5509%" y="373" width="0.0101%" height="15" fill="rgb(212,6,19)" fg:x="30321727065" fg:w="11124314"/><text x="27.8009%" y="383.50"></text></g><g><title>lock_release (18,391,764 samples, 0.02%)</title><rect x="27.5610%" y="389" width="0.0167%" height="15" fill="rgb(218,1,36)" fg:x="30332851379" fg:w="18391764"/><text x="27.8110%" y="399.50"></text></g><g><title>dput (173,106,803 samples, 0.16%)</title><rect x="27.4233%" y="405" width="0.1573%" height="15" fill="rgb(246,84,54)" fg:x="30181250342" fg:w="173106803"/><text x="27.6733%" y="415.50"></text></g><g><title>fsnotify (15,441,999 samples, 0.01%)</title><rect x="27.5806%" y="405" width="0.0140%" height="15" fill="rgb(242,110,6)" fg:x="30354357145" fg:w="15441999"/><text x="27.8306%" y="415.50"></text></g><g><title>__fsnotify_parent (618,661,258 samples, 0.56%)</title><rect x="27.0346%" y="421" width="0.5621%" height="15" fill="rgb(214,47,5)" fg:x="29753483449" fg:w="618661258"/><text x="27.2846%" y="431.50"></text></g><g><title>__get_task_ioprio (16,689,409 samples, 0.02%)</title><rect x="27.5967%" y="421" width="0.0152%" height="15" fill="rgb(218,159,25)" fg:x="30372144707" fg:w="16689409"/><text x="27.8467%" y="431.50"></text></g><g><title>apparmor_file_permission (18,301,477 samples, 0.02%)</title><rect x="27.6119%" y="421" width="0.0166%" height="15" fill="rgb(215,211,28)" fg:x="30388834116" fg:w="18301477"/><text x="27.8619%" y="431.50"></text></g><g><title>copy_page_to_iter (20,667,919 samples, 0.02%)</title><rect x="27.6840%" y="389" width="0.0188%" height="15" fill="rgb(238,59,32)" fg:x="30468197152" fg:w="20667919"/><text x="27.9340%" y="399.50"></text></g><g><title>[unknown] (377,305,032 samples, 0.34%)</title><rect x="30.1217%" y="373" width="0.3428%" height="15" fill="rgb(226,82,3)" fg:x="33151004043" fg:w="377305032"/><text x="30.3717%" y="383.50"></text></g><g><title>__x86_indirect_thunk_r11 (24,251,924 samples, 0.02%)</title><rect x="30.4699%" y="373" width="0.0220%" height="15" fill="rgb(240,164,32)" fg:x="33534245657" fg:w="24251924"/><text x="30.7199%" y="383.50"></text></g><g><title>_copy_to_iter (13,514,934 samples, 0.01%)</title><rect x="30.4919%" y="373" width="0.0123%" height="15" fill="rgb(232,46,7)" fg:x="33558497581" fg:w="13514934"/><text x="30.7419%" y="383.50"></text></g><g><title>_copy_to_iter (1,792,047,929 samples, 1.63%)</title><rect x="30.8892%" y="357" width="1.6283%" height="15" fill="rgb(229,129,53)" fg:x="33995749026" fg:w="1792047929"/><text x="31.1392%" y="367.50"></text></g><g><title>tick_sched_timer (34,931,057 samples, 0.03%)</title><rect x="65.8285%" y="261" width="0.0317%" height="15" fill="rgb(234,188,29)" fg:x="72448885044" fg:w="34931057"/><text x="66.0785%" y="271.50"></text></g><g><title>update_process_times (34,136,698 samples, 0.03%)</title><rect x="65.8292%" y="245" width="0.0310%" height="15" fill="rgb(246,141,4)" fg:x="72449679403" fg:w="34136698"/><text x="66.0792%" y="255.50"></text></g><g><title>scheduler_tick (30,377,600 samples, 0.03%)</title><rect x="65.8327%" y="229" width="0.0276%" height="15" fill="rgb(229,23,39)" fg:x="72453438501" fg:w="30377600"/><text x="66.0827%" y="239.50"></text></g><g><title>__hrtimer_run_queues (38,848,631 samples, 0.04%)</title><rect x="65.8271%" y="277" width="0.0353%" height="15" fill="rgb(206,12,3)" fg:x="72447302709" fg:w="38848631"/><text x="66.0771%" y="287.50"></text></g><g><title>hrtimer_interrupt (42,697,385 samples, 0.04%)</title><rect x="65.8264%" y="293" width="0.0388%" height="15" fill="rgb(252,226,20)" fg:x="72446507873" fg:w="42697385"/><text x="66.0764%" y="303.50"></text></g><g><title>__sysvec_apic_timer_interrupt (45,028,148 samples, 0.04%)</title><rect x="65.8249%" y="309" width="0.0409%" height="15" fill="rgb(216,123,35)" fg:x="72444917282" fg:w="45028148"/><text x="66.0749%" y="319.50"></text></g><g><title>rep_movs_alternative (36,712,893,280 samples, 33.36%)</title><rect x="32.5204%" y="357" width="33.3581%" height="15" fill="rgb(212,68,40)" fg:x="35790927754" fg:w="36712893280"/><text x="32.7704%" y="367.50">rep_movs_alternative</text></g><g><title>asm_sysvec_apic_timer_interrupt (59,683,797 samples, 0.05%)</title><rect x="65.8242%" y="341" width="0.0542%" height="15" fill="rgb(254,125,32)" fg:x="72444137237" fg:w="59683797"/><text x="66.0742%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (59,683,797 samples, 0.05%)</title><rect x="65.8242%" y="325" width="0.0542%" height="15" fill="rgb(253,97,22)" fg:x="72444137237" fg:w="59683797"/><text x="66.0742%" y="335.50"></text></g><g><title>irq_exit_rcu (12,289,126 samples, 0.01%)</title><rect x="65.8673%" y="309" width="0.0112%" height="15" fill="rgb(241,101,14)" fg:x="72491531908" fg:w="12289126"/><text x="66.1173%" y="319.50"></text></g><g><title>__irq_exit_rcu (12,289,126 samples, 0.01%)</title><rect x="65.8673%" y="293" width="0.0112%" height="15" fill="rgb(238,103,29)" fg:x="72491531908" fg:w="12289126"/><text x="66.1173%" y="303.50"></text></g><g><title>__kprobes_text_end (12,289,126 samples, 0.01%)</title><rect x="65.8673%" y="277" width="0.0112%" height="15" fill="rgb(233,195,47)" fg:x="72491531908" fg:w="12289126"/><text x="66.1173%" y="287.50"></text></g><g><title>copy_page_to_iter (38,922,818,447 samples, 35.37%)</title><rect x="30.5131%" y="373" width="35.3661%" height="15" fill="rgb(246,218,30)" fg:x="33581796129" fg:w="38922818447"/><text x="30.7631%" y="383.50">copy_page_to_iter</text></g><g><title>__rcu_read_unlock (17,278,306 samples, 0.02%)</title><rect x="65.9670%" y="357" width="0.0157%" height="15" fill="rgb(219,145,47)" fg:x="72601323854" fg:w="17278306"/><text x="66.2170%" y="367.50"></text></g><g><title>__xas_next (22,696,656 samples, 0.02%)</title><rect x="65.9827%" y="357" width="0.0206%" height="15" fill="rgb(243,12,26)" fg:x="72618602160" fg:w="22696656"/><text x="66.2327%" y="367.50"></text></g><g><title>__xas_next (74,012,570 samples, 0.07%)</title><rect x="71.1896%" y="341" width="0.0672%" height="15" fill="rgb(214,87,16)" fg:x="78349096047" fg:w="74012570"/><text x="71.4396%" y="351.50"></text></g><g><title>__lock_acquire (113,373,551 samples, 0.10%)</title><rect x="71.4086%" y="325" width="0.1030%" height="15" fill="rgb(208,99,42)" fg:x="78590122477" fg:w="113373551"/><text x="71.6586%" y="335.50"></text></g><g><title>lock_acquire (334,426,178 samples, 0.30%)</title><rect x="71.2639%" y="341" width="0.3039%" height="15" fill="rgb(253,99,2)" fg:x="78430857067" fg:w="334426178"/><text x="71.5139%" y="351.50"></text></g><g><title>trace_lock_acquire (59,404,811 samples, 0.05%)</title><rect x="71.5137%" y="325" width="0.0540%" height="15" fill="rgb(220,168,23)" fg:x="78705878434" fg:w="59404811"/><text x="71.7637%" y="335.50"></text></g><g><title>rcu_is_watching (24,669,152 samples, 0.02%)</title><rect x="71.5453%" y="309" width="0.0224%" height="15" fill="rgb(242,38,24)" fg:x="78740614093" fg:w="24669152"/><text x="71.7953%" y="319.50"></text></g><g><title>lock_release (65,241,078 samples, 0.06%)</title><rect x="71.5677%" y="341" width="0.0593%" height="15" fill="rgb(225,182,9)" fg:x="78765283245" fg:w="65241078"/><text x="71.8177%" y="351.50"></text></g><g><title>trace_lock_release (17,825,825 samples, 0.02%)</title><rect x="71.6108%" y="325" width="0.0162%" height="15" fill="rgb(243,178,37)" fg:x="78812698498" fg:w="17825825"/><text x="71.8608%" y="335.50"></text></g><g><title>xas_load (190,988,292 samples, 0.17%)</title><rect x="71.6426%" y="341" width="0.1735%" height="15" fill="rgb(232,139,19)" fg:x="78847698107" fg:w="190988292"/><text x="71.8926%" y="351.50"></text></g><g><title>xas_start (67,671,354 samples, 0.06%)</title><rect x="71.7547%" y="325" width="0.0615%" height="15" fill="rgb(225,201,24)" fg:x="78971015045" fg:w="67671354"/><text x="72.0047%" y="335.50"></text></g><g><title>filemap_get_read_batch (6,405,076,066 samples, 5.82%)</title><rect x="66.0033%" y="357" width="5.8198%" height="15" fill="rgb(221,47,46)" fg:x="72641298816" fg:w="6405076066"/><text x="66.2533%" y="367.50">filemap..</text></g><g><title>filemap_get_pages (6,561,720,750 samples, 5.96%)</title><rect x="65.8792%" y="373" width="5.9621%" height="15" fill="rgb(249,23,13)" fg:x="72504614576" fg:w="6561720750"/><text x="66.1292%" y="383.50">filemap_..</text></g><g><title>filemap_get_read_batch (19,448,348 samples, 0.02%)</title><rect x="71.8413%" y="373" width="0.0177%" height="15" fill="rgb(219,9,5)" fg:x="79066335326" fg:w="19448348"/><text x="72.0913%" y="383.50"></text></g><g><title>[unknown] (270,721,434 samples, 0.25%)</title><rect x="72.0666%" y="357" width="0.2460%" height="15" fill="rgb(254,171,16)" fg:x="79314308702" fg:w="270721434"/><text x="72.3166%" y="367.50"></text></g><g><title>__bpf_prog_enter (29,575,415 samples, 0.03%)</title><rect x="72.3126%" y="357" width="0.0269%" height="15" fill="rgb(230,171,20)" fg:x="79585030136" fg:w="29575415"/><text x="72.5626%" y="367.50"></text></g><g><title>bpf_prog_790e9b214d9c9b97_sampling_folio_accessed (34,464,700 samples, 0.03%)</title><rect x="72.3436%" y="357" width="0.0313%" height="15" fill="rgb(210,71,41)" fg:x="79619182247" fg:w="34464700"/><text x="72.5936%" y="367.50"></text></g><g><title>folio_mark_accessed (741,757,653 samples, 0.67%)</title><rect x="71.8589%" y="373" width="0.6740%" height="15" fill="rgb(206,173,20)" fg:x="79085783674" fg:w="741757653"/><text x="72.1089%" y="383.50"></text></g><g><title>get_page_cache_ext_ops (173,894,380 samples, 0.16%)</title><rect x="72.3749%" y="357" width="0.1580%" height="15" fill="rgb(233,88,34)" fg:x="79653646947" fg:w="173894380"/><text x="72.6249%" y="367.50"></text></g><g><title>get_page_cache_ext_ops (50,784,106 samples, 0.05%)</title><rect x="72.5329%" y="373" width="0.0461%" height="15" fill="rgb(223,209,46)" fg:x="79827541327" fg:w="50784106"/><text x="72.7829%" y="383.50"></text></g><g><title>__lock_acquire (20,623,456 samples, 0.02%)</title><rect x="72.7414%" y="309" width="0.0187%" height="15" fill="rgb(250,43,18)" fg:x="80057034726" fg:w="20623456"/><text x="72.9914%" y="319.50"></text></g><g><title>lock_acquire (41,734,547 samples, 0.04%)</title><rect x="72.7285%" y="325" width="0.0379%" height="15" fill="rgb(208,13,10)" fg:x="80042795721" fg:w="41734547"/><text x="72.9785%" y="335.50"></text></g><g><title>lock_release (22,158,641 samples, 0.02%)</title><rect x="72.7664%" y="325" width="0.0201%" height="15" fill="rgb(212,200,36)" fg:x="80084530268" fg:w="22158641"/><text x="73.0164%" y="335.50"></text></g><g><title>ktime_get_coarse_real_ts64 (86,575,471 samples, 0.08%)</title><rect x="72.7093%" y="341" width="0.0787%" height="15" fill="rgb(225,90,30)" fg:x="80021626618" fg:w="86575471"/><text x="72.9593%" y="351.50"></text></g><g><title>atime_needs_update (244,971,429 samples, 0.22%)</title><rect x="72.6012%" y="357" width="0.2226%" height="15" fill="rgb(236,182,39)" fg:x="79902743883" fg:w="244971429"/><text x="72.8512%" y="367.50"></text></g><g><title>make_vfsuid (28,108,983 samples, 0.03%)</title><rect x="72.7983%" y="341" width="0.0255%" height="15" fill="rgb(212,144,35)" fg:x="80119606329" fg:w="28108983"/><text x="73.0483%" y="351.50"></text></g><g><title>ktime_get_coarse_real_ts64 (15,345,721 samples, 0.01%)</title><rect x="72.8238%" y="357" width="0.0139%" height="15" fill="rgb(228,63,44)" fg:x="80147715312" fg:w="15345721"/><text x="73.0738%" y="367.50"></text></g><g><title>filemap_read (49,681,788,091 samples, 45.14%)</title><rect x="27.7088%" y="389" width="45.1419%" height="15" fill="rgb(228,109,6)" fg:x="30495471520" fg:w="49681788091"/><text x="27.9588%" y="399.50">filemap_read</text></g><g><title>touch_atime (298,934,178 samples, 0.27%)</title><rect x="72.5791%" y="373" width="0.2716%" height="15" fill="rgb(238,117,24)" fg:x="79878325433" fg:w="298934178"/><text x="72.8291%" y="383.50"></text></g><g><title>folio_mark_accessed (38,182,945 samples, 0.03%)</title><rect x="72.8507%" y="389" width="0.0347%" height="15" fill="rgb(242,26,26)" fg:x="80177259611" fg:w="38182945"/><text x="73.1007%" y="399.50"></text></g><g><title>ext4_file_read_iter (49,811,112,974 samples, 45.26%)</title><rect x="27.6320%" y="421" width="45.2594%" height="15" fill="rgb(221,92,48)" fg:x="30411001952" fg:w="49811112974"/><text x="27.8820%" y="431.50">ext4_file_read_iter</text></g><g><title>generic_file_read_iter (49,770,000,569 samples, 45.22%)</title><rect x="27.6694%" y="405" width="45.2220%" height="15" fill="rgb(209,209,32)" fg:x="30452114357" fg:w="49770000569"/><text x="27.9194%" y="415.50">generic_file_read_iter</text></g><g><title>aa_file_perm (14,487,094 samples, 0.01%)</title><rect x="72.9411%" y="389" width="0.0132%" height="15" fill="rgb(221,70,22)" fg:x="80276783128" fg:w="14487094"/><text x="73.1911%" y="399.50"></text></g><g><title>__lock_acquire (13,652,730 samples, 0.01%)</title><rect x="73.0958%" y="341" width="0.0124%" height="15" fill="rgb(248,145,5)" fg:x="80447027097" fg:w="13652730"/><text x="73.3458%" y="351.50"></text></g><g><title>lock_acquire (46,971,067 samples, 0.04%)</title><rect x="73.0717%" y="357" width="0.0427%" height="15" fill="rgb(226,116,26)" fg:x="80420469884" fg:w="46971067"/><text x="73.3217%" y="367.50"></text></g><g><title>lock_release (29,433,043 samples, 0.03%)</title><rect x="73.1143%" y="357" width="0.0267%" height="15" fill="rgb(244,5,17)" fg:x="80467440951" fg:w="29433043"/><text x="73.3643%" y="367.50"></text></g><g><title>aa_file_perm (101,991,524 samples, 0.09%)</title><rect x="73.0505%" y="373" width="0.0927%" height="15" fill="rgb(252,159,33)" fg:x="80397139758" fg:w="101991524"/><text x="73.3005%" y="383.50"></text></g><g><title>apparmor_file_permission (233,087,433 samples, 0.21%)</title><rect x="72.9369%" y="405" width="0.2118%" height="15" fill="rgb(206,71,0)" fg:x="80272116619" fg:w="233087433"/><text x="73.1869%" y="415.50"></text></g><g><title>common_file_perm (213,933,830 samples, 0.19%)</title><rect x="72.9543%" y="389" width="0.1944%" height="15" fill="rgb(233,118,54)" fg:x="80291270222" fg:w="213933830"/><text x="73.2043%" y="399.50"></text></g><g><title>common_file_perm (19,633,494 samples, 0.02%)</title><rect x="73.1486%" y="405" width="0.0178%" height="15" fill="rgb(234,83,48)" fg:x="80505204052" fg:w="19633494"/><text x="73.3986%" y="415.50"></text></g><g><title>__cond_resched (16,030,008 samples, 0.01%)</title><rect x="73.2967%" y="373" width="0.0146%" height="15" fill="rgb(228,3,54)" fg:x="80668139685" fg:w="16030008"/><text x="73.5467%" y="383.50"></text></g><g><title>__rcu_read_unlock (12,272,267 samples, 0.01%)</title><rect x="73.3196%" y="373" width="0.0112%" height="15" fill="rgb(226,155,13)" fg:x="80693304074" fg:w="12272267"/><text x="73.5696%" y="383.50"></text></g><g><title>_raw_spin_lock (16,968,961 samples, 0.02%)</title><rect x="73.3526%" y="357" width="0.0154%" height="15" fill="rgb(241,28,37)" fg:x="80729702895" fg:w="16968961"/><text x="73.6026%" y="367.50"></text></g><g><title>__lock_acquire (19,068,369 samples, 0.02%)</title><rect x="73.3881%" y="341" width="0.0173%" height="15" fill="rgb(233,93,10)" fg:x="80768754870" fg:w="19068369"/><text x="73.6381%" y="351.50"></text></g><g><title>lock_acquire (43,884,458 samples, 0.04%)</title><rect x="73.3723%" y="357" width="0.0399%" height="15" fill="rgb(225,113,19)" fg:x="80751333443" fg:w="43884458"/><text x="73.6223%" y="367.50"></text></g><g><title>lock_release (29,128,012 samples, 0.03%)</title><rect x="73.4122%" y="357" width="0.0265%" height="15" fill="rgb(241,2,18)" fg:x="80795217901" fg:w="29128012"/><text x="73.6622%" y="367.50"></text></g><g><title>trace_lock_release (11,402,587 samples, 0.01%)</title><rect x="73.4283%" y="341" width="0.0104%" height="15" fill="rgb(228,207,21)" fg:x="80812943326" fg:w="11402587"/><text x="73.6783%" y="351.50"></text></g><g><title>do_raw_spin_lock (75,887,632 samples, 0.07%)</title><rect x="73.4491%" y="325" width="0.0690%" height="15" fill="rgb(213,211,35)" fg:x="80835840862" fg:w="75887632"/><text x="73.6991%" y="335.50"></text></g><g><title>__lock_acquire (109,267,215 samples, 0.10%)</title><rect x="73.5241%" y="309" width="0.0993%" height="15" fill="rgb(209,83,10)" fg:x="80918448675" fg:w="109267215"/><text x="73.7741%" y="319.50"></text></g><g><title>lock_acquire (125,005,021 samples, 0.11%)</title><rect x="73.5180%" y="325" width="0.1136%" height="15" fill="rgb(209,164,1)" fg:x="80911728494" fg:w="125005021"/><text x="73.7680%" y="335.50"></text></g><g><title>_raw_spin_lock (203,950,720 samples, 0.19%)</title><rect x="73.4470%" y="341" width="0.1853%" height="15" fill="rgb(213,184,43)" fg:x="80833579766" fg:w="203950720"/><text x="73.6970%" y="351.50"></text></g><g><title>lock_release (18,314,395 samples, 0.02%)</title><rect x="73.6453%" y="325" width="0.0166%" height="15" fill="rgb(231,61,34)" fg:x="81051854297" fg:w="18314395"/><text x="73.8953%" y="335.50"></text></g><g><title>_raw_spin_unlock (33,366,512 samples, 0.03%)</title><rect x="73.6323%" y="341" width="0.0303%" height="15" fill="rgb(235,75,3)" fg:x="81037530486" fg:w="33366512"/><text x="73.8823%" y="351.50"></text></g><g><title>lockref_get_not_zero (258,073,415 samples, 0.23%)</title><rect x="73.4386%" y="357" width="0.2345%" height="15" fill="rgb(220,106,47)" fg:x="80824345913" fg:w="258073415"/><text x="73.6886%" y="367.50"></text></g><g><title>dget_parent (374,750,481 samples, 0.34%)</title><rect x="73.3361%" y="373" width="0.3405%" height="15" fill="rgb(210,196,33)" fg:x="80711518703" fg:w="374750481"/><text x="73.5861%" y="383.50"></text></g><g><title>do_raw_spin_lock (13,799,251 samples, 0.01%)</title><rect x="73.7103%" y="341" width="0.0125%" height="15" fill="rgb(229,154,42)" fg:x="81123309857" fg:w="13799251"/><text x="73.9603%" y="351.50"></text></g><g><title>__lock_acquire (21,181,928 samples, 0.02%)</title><rect x="73.7372%" y="325" width="0.0192%" height="15" fill="rgb(228,114,26)" fg:x="81152910003" fg:w="21181928"/><text x="73.9872%" y="335.50"></text></g><g><title>_raw_spin_lock (61,502,732 samples, 0.06%)</title><rect x="73.7095%" y="357" width="0.0559%" height="15" fill="rgb(208,144,1)" fg:x="81122515966" fg:w="61502732"/><text x="73.9595%" y="367.50"></text></g><g><title>lock_acquire (46,909,590 samples, 0.04%)</title><rect x="73.7228%" y="341" width="0.0426%" height="15" fill="rgb(239,112,37)" fg:x="81137109108" fg:w="46909590"/><text x="73.9728%" y="351.50"></text></g><g><title>_raw_spin_unlock (29,608,212 samples, 0.03%)</title><rect x="73.7654%" y="357" width="0.0269%" height="15" fill="rgb(210,96,50)" fg:x="81184018698" fg:w="29608212"/><text x="74.0154%" y="367.50"></text></g><g><title>lock_release (21,147,022 samples, 0.02%)</title><rect x="73.7731%" y="341" width="0.0192%" height="15" fill="rgb(222,178,2)" fg:x="81192479888" fg:w="21147022"/><text x="74.0231%" y="351.50"></text></g><g><title>__lock_acquire (24,468,896 samples, 0.02%)</title><rect x="73.8058%" y="341" width="0.0222%" height="15" fill="rgb(226,74,18)" fg:x="81228401099" fg:w="24468896"/><text x="74.0558%" y="351.50"></text></g><g><title>lock_acquire (46,126,614 samples, 0.04%)</title><rect x="73.7937%" y="357" width="0.0419%" height="15" fill="rgb(225,67,54)" fg:x="81215156157" fg:w="46126614"/><text x="74.0437%" y="367.50"></text></g><g><title>lock_release (33,135,586 samples, 0.03%)</title><rect x="73.8356%" y="357" width="0.0301%" height="15" fill="rgb(251,92,32)" fg:x="81261282771" fg:w="33135586"/><text x="74.0856%" y="367.50"></text></g><g><title>trace_lock_release (15,108,783 samples, 0.01%)</title><rect x="73.8520%" y="341" width="0.0137%" height="15" fill="rgb(228,149,22)" fg:x="81279309574" fg:w="15108783"/><text x="74.1020%" y="351.50"></text></g><g><title>dput (209,554,774 samples, 0.19%)</title><rect x="73.6766%" y="373" width="0.1904%" height="15" fill="rgb(243,54,13)" fg:x="81086269184" fg:w="209554774"/><text x="73.9266%" y="383.50"></text></g><g><title>fsnotify (50,893,482 samples, 0.05%)</title><rect x="73.8670%" y="373" width="0.0462%" height="15" fill="rgb(243,180,28)" fg:x="81295823958" fg:w="50893482"/><text x="74.1170%" y="383.50"></text></g><g><title>lock_release (11,270,457 samples, 0.01%)</title><rect x="73.9214%" y="373" width="0.0102%" height="15" fill="rgb(208,167,24)" fg:x="81355692770" fg:w="11270457"/><text x="74.1714%" y="383.50"></text></g><g><title>__fsnotify_parent (785,883,711 samples, 0.71%)</title><rect x="73.2238%" y="389" width="0.7141%" height="15" fill="rgb(245,73,45)" fg:x="80587924274" fg:w="785883711"/><text x="73.4738%" y="399.50"></text></g><g><title>__x64_sys_pread64 (52,233,254,156 samples, 47.46%)</title><rect x="26.5026%" y="453" width="47.4602%" height="15" fill="rgb(237,203,48)" fg:x="29167950759" fg:w="52233254156"/><text x="26.7526%" y="463.50">__x64_sys_pread64</text></g><g><title>vfs_read (51,786,042,066 samples, 47.05%)</title><rect x="26.9089%" y="437" width="47.0538%" height="15" fill="rgb(211,197,16)" fg:x="29615162849" fg:w="51786042066"/><text x="27.1589%" y="447.50">vfs_read</text></g><g><title>security_file_permission (1,174,649,268 samples, 1.07%)</title><rect x="72.8955%" y="421" width="1.0673%" height="15" fill="rgb(243,99,51)" fg:x="80226555647" fg:w="1174649268"/><text x="73.1455%" y="431.50"></text></g><g><title>fsnotify_perm (876,367,369 samples, 0.80%)</title><rect x="73.1665%" y="405" width="0.7963%" height="15" fill="rgb(215,123,29)" fg:x="80524837546" fg:w="876367369"/><text x="73.4165%" y="415.50"></text></g><g><title>amd_clear_divider (18,299,306 samples, 0.02%)</title><rect x="73.9628%" y="453" width="0.0166%" height="15" fill="rgb(239,186,37)" fg:x="81401204915" fg:w="18299306"/><text x="74.2128%" y="463.50"></text></g><g><title>exit_to_user_mode_prepare (12,724,551 samples, 0.01%)</title><rect x="73.9794%" y="453" width="0.0116%" height="15" fill="rgb(252,136,39)" fg:x="81419504221" fg:w="12724551"/><text x="74.2294%" y="463.50"></text></g><g><title>__lock_acquire (65,178,312 samples, 0.06%)</title><rect x="74.1838%" y="389" width="0.0592%" height="15" fill="rgb(223,213,32)" fg:x="81644457528" fg:w="65178312"/><text x="74.4338%" y="399.50"></text></g><g><title>lock_acquire (131,124,114 samples, 0.12%)</title><rect x="74.1566%" y="405" width="0.1191%" height="15" fill="rgb(233,115,5)" fg:x="81614531562" fg:w="131124114"/><text x="74.4066%" y="415.50"></text></g><g><title>trace_lock_acquire (35,281,607 samples, 0.03%)</title><rect x="74.2437%" y="389" width="0.0321%" height="15" fill="rgb(207,226,44)" fg:x="81710374069" fg:w="35281607"/><text x="74.4937%" y="399.50"></text></g><g><title>rcu_is_watching (16,756,890 samples, 0.02%)</title><rect x="74.2605%" y="373" width="0.0152%" height="15" fill="rgb(208,126,0)" fg:x="81728898786" fg:w="16756890"/><text x="74.5105%" y="383.50"></text></g><g><title>match_held_lock (18,828,057 samples, 0.02%)</title><rect x="74.3347%" y="389" width="0.0171%" height="15" fill="rgb(244,66,21)" fg:x="81810550256" fg:w="18828057"/><text x="74.5847%" y="399.50"></text></g><g><title>lock_release (96,044,873 samples, 0.09%)</title><rect x="74.2757%" y="405" width="0.0873%" height="15" fill="rgb(222,97,12)" fg:x="81745655676" fg:w="96044873"/><text x="74.5257%" y="415.50"></text></g><g><title>match_held_lock (20,247,428 samples, 0.02%)</title><rect x="74.3630%" y="405" width="0.0184%" height="15" fill="rgb(219,213,19)" fg:x="81841700549" fg:w="20247428"/><text x="74.6130%" y="415.50"></text></g><g><title>ktime_get_coarse_real_ts64 (306,812,561 samples, 0.28%)</title><rect x="74.1125%" y="421" width="0.2788%" height="15" fill="rgb(252,169,30)" fg:x="81565952176" fg:w="306812561"/><text x="74.3625%" y="431.50"></text></g><g><title>__audit_syscall_entry (374,619,675 samples, 0.34%)</title><rect x="74.0640%" y="437" width="0.3404%" height="15" fill="rgb(206,32,51)" fg:x="81512643772" fg:w="374619675"/><text x="74.3140%" y="447.50"></text></g><g><title>syscall_enter_from_user_mode (453,500,839 samples, 0.41%)</title><rect x="73.9957%" y="453" width="0.4121%" height="15" fill="rgb(250,172,42)" fg:x="81437488890" fg:w="453500839"/><text x="74.2457%" y="463.50"></text></g><g><title>__audit_syscall_exit (18,221,994 samples, 0.02%)</title><rect x="74.4403%" y="437" width="0.0166%" height="15" fill="rgb(209,34,43)" fg:x="81926813749" fg:w="18221994"/><text x="74.6903%" y="447.50"></text></g><g><title>exit_to_user_mode_prepare (51,787,161 samples, 0.05%)</title><rect x="74.4576%" y="437" width="0.0471%" height="15" fill="rgb(223,11,35)" fg:x="81945746223" fg:w="51787161"/><text x="74.7076%" y="447.50"></text></g><g><title>fpregs_assert_state_consistent (34,244,803 samples, 0.03%)</title><rect x="74.4735%" y="421" width="0.0311%" height="15" fill="rgb(251,219,26)" fg:x="81963288581" fg:w="34244803"/><text x="74.7235%" y="431.50"></text></g><g><title>fpregs_assert_state_consistent (13,784,030 samples, 0.01%)</title><rect x="74.5046%" y="437" width="0.0125%" height="15" fill="rgb(231,119,3)" fg:x="81997533384" fg:w="13784030"/><text x="74.7546%" y="447.50"></text></g><g><title>__audit_syscall_exit (44,271,283 samples, 0.04%)</title><rect x="74.5638%" y="421" width="0.0402%" height="15" fill="rgb(216,97,11)" fg:x="82062698380" fg:w="44271283"/><text x="74.8138%" y="431.50"></text></g><g><title>audit_reset_context (12,817,425 samples, 0.01%)</title><rect x="74.5924%" y="405" width="0.0116%" height="15" fill="rgb(223,59,9)" fg:x="82094152238" fg:w="12817425"/><text x="74.8424%" y="415.50"></text></g><g><title>syscall_exit_to_user_mode (229,572,690 samples, 0.21%)</title><rect x="74.4078%" y="453" width="0.2086%" height="15" fill="rgb(233,93,31)" fg:x="81890989729" fg:w="229572690"/><text x="74.6578%" y="463.50"></text></g><g><title>syscall_exit_work (107,785,811 samples, 0.10%)</title><rect x="74.5185%" y="437" width="0.0979%" height="15" fill="rgb(239,81,33)" fg:x="82012776608" fg:w="107785811"/><text x="74.7685%" y="447.50"></text></g><g><title>audit_reset_context (13,592,756 samples, 0.01%)</title><rect x="74.6040%" y="421" width="0.0124%" height="15" fill="rgb(213,120,34)" fg:x="82106969663" fg:w="13592756"/><text x="74.8540%" y="431.50"></text></g><g><title>syscall_exit_work (19,656,250 samples, 0.02%)</title><rect x="74.6164%" y="453" width="0.0179%" height="15" fill="rgb(243,49,53)" fg:x="82120562419" fg:w="19656250"/><text x="74.8664%" y="463.50"></text></g><g><title>do_syscall_64 (53,082,821,344 samples, 48.23%)</title><rect x="26.4140%" y="469" width="48.2321%" height="15" fill="rgb(247,216,33)" fg:x="29070415568" fg:w="53082821344"/><text x="26.6640%" y="479.50">do_syscall_64</text></g><g><title>vfs_read (13,018,243 samples, 0.01%)</title><rect x="74.6343%" y="453" width="0.0118%" height="15" fill="rgb(226,26,14)" fg:x="82140218669" fg:w="13018243"/><text x="74.8843%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (53,291,943,137 samples, 48.42%)</title><rect x="26.2410%" y="485" width="48.4221%" height="15" fill="rgb(215,49,53)" fg:x="28880108476" fg:w="53291943137"/><text x="26.4910%" y="495.50">entry_SYSCALL_64</text></g><g><title>syscall_exit_to_user_mode (13,559,331 samples, 0.01%)</title><rect x="74.6509%" y="469" width="0.0123%" height="15" fill="rgb(245,162,40)" fg:x="82158492282" fg:w="13559331"/><text x="74.9009%" y="479.50"></text></g><g><title>entry_ibpb (541,846,640 samples, 0.49%)</title><rect x="74.6632%" y="485" width="0.4923%" height="15" fill="rgb(229,68,17)" fg:x="82172051613" fg:w="541846640"/><text x="74.9132%" y="495.50"></text></g><g><title>lock_acquire (45,245,596 samples, 0.04%)</title><rect x="75.1555%" y="485" width="0.0411%" height="15" fill="rgb(213,182,10)" fg:x="82713898253" fg:w="45245596"/><text x="75.4055%" y="495.50"></text></g><g><title>lock_release (38,854,867 samples, 0.04%)</title><rect x="75.1966%" y="485" width="0.0353%" height="15" fill="rgb(245,125,30)" fg:x="82759143849" fg:w="38854867"/><text x="75.4466%" y="495.50"></text></g><g><title>migrate_disable (43,570,225 samples, 0.04%)</title><rect x="75.2319%" y="485" width="0.0396%" height="15" fill="rgb(232,202,2)" fg:x="82797998716" fg:w="43570225"/><text x="75.4819%" y="495.50"></text></g><g><title>__libc_pread (76,391,277,526 samples, 69.41%)</title><rect x="5.9019%" y="501" width="69.4107%" height="15" fill="rgb(237,140,51)" fg:x="6495417805" fg:w="76391277526"/><text x="6.1519%" y="511.50">__libc_pread</text></g><g><title>migrate_enable (45,126,390 samples, 0.04%)</title><rect x="75.2715%" y="485" width="0.0410%" height="15" fill="rgb(236,157,25)" fg:x="82841568941" fg:w="45126390"/><text x="75.5215%" y="495.50"></text></g><g><title>__sanitizer::mem_is_zero (2,530,609,999 samples, 2.30%)</title><rect x="75.3275%" y="501" width="2.2994%" height="15" fill="rgb(219,209,0)" fg:x="82903220172" fg:w="2530609999"/><text x="75.5775%" y="511.50">_..</text></g><g><title>file_and_offset_and_size::~file_and_offset_and_size (27,717,308 samples, 0.03%)</title><rect x="77.6269%" y="501" width="0.0252%" height="15" fill="rgb(240,116,54)" fg:x="85433830171" fg:w="27717308"/><text x="77.8769%" y="511.50"></text></g><g><title>operator delete (11,511,930 samples, 0.01%)</title><rect x="77.6416%" y="485" width="0.0105%" height="15" fill="rgb(216,10,36)" fg:x="85450035549" fg:w="11511930"/><text x="77.8916%" y="495.50"></text></g><g><title>[libstdc++.so.6.0.30] (33,557,574 samples, 0.03%)</title><rect x="77.9556%" y="485" width="0.0305%" height="15" fill="rgb(222,72,44)" fg:x="85795645882" fg:w="33557574"/><text x="78.2056%" y="495.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindImpl (13,695,742 samples, 0.01%)</title><rect x="78.0009%" y="485" width="0.0124%" height="15" fill="rgb(232,159,9)" fg:x="85845401765" fg:w="13695742"/><text x="78.2509%" y="495.50"></text></g><g><title>operator delete (34,428,688 samples, 0.03%)</title><rect x="78.0230%" y="485" width="0.0313%" height="15" fill="rgb(210,39,32)" fg:x="85869745802" fg:w="34428688"/><text x="78.2730%" y="495.50"></text></g><g><title>pthread_once@GLIBC_2.2.5 (91,838,806 samples, 0.08%)</title><rect x="78.0543%" y="485" width="0.0834%" height="15" fill="rgb(216,194,45)" fg:x="85904174490" fg:w="91838806"/><text x="78.3043%" y="495.50"></text></g><g><title>operator delete (17,178,164 samples, 0.02%)</title><rect x="78.3395%" y="469" width="0.0156%" height="15" fill="rgb(218,18,35)" fg:x="86218059494" fg:w="17178164"/><text x="78.5895%" y="479.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (25,117,112 samples, 0.02%)</title><rect x="78.3551%" y="469" width="0.0228%" height="15" fill="rgb(207,83,51)" fg:x="86235237658" fg:w="25117112"/><text x="78.6051%" y="479.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (20,144,205 samples, 0.02%)</title><rect x="78.4390%" y="453" width="0.0183%" height="15" fill="rgb(225,63,43)" fg:x="86327599219" fg:w="20144205"/><text x="78.6890%" y="463.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (16,154,600 samples, 0.01%)</title><rect x="78.4753%" y="453" width="0.0147%" height="15" fill="rgb(207,57,36)" fg:x="86367586682" fg:w="16154600"/><text x="78.7253%" y="463.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (27,512,905 samples, 0.02%)</title><rect x="78.4900%" y="453" width="0.0250%" height="15" fill="rgb(216,99,33)" fg:x="86383741282" fg:w="27512905"/><text x="78.7400%" y="463.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (11,739,192 samples, 0.01%)</title><rect x="78.5212%" y="453" width="0.0107%" height="15" fill="rgb(225,42,16)" fg:x="86418072903" fg:w="11739192"/><text x="78.7712%" y="463.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (17,295,272 samples, 0.02%)</title><rect x="78.5319%" y="453" width="0.0157%" height="15" fill="rgb(220,201,45)" fg:x="86429812095" fg:w="17295272"/><text x="78.7819%" y="463.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::begin (14,292,041 samples, 0.01%)</title><rect x="78.5476%" y="453" width="0.0130%" height="15" fill="rgb(225,33,4)" fg:x="86447107367" fg:w="14292041"/><text x="78.7976%" y="463.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (39,056,389 samples, 0.04%)</title><rect x="78.5606%" y="453" width="0.0355%" height="15" fill="rgb(224,33,50)" fg:x="86461399408" fg:w="39056389"/><text x="78.8106%" y="463.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (15,427,484 samples, 0.01%)</title><rect x="78.5820%" y="437" width="0.0140%" height="15" fill="rgb(246,198,51)" fg:x="86485028313" fg:w="15427484"/><text x="78.8320%" y="447.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (13,004,179 samples, 0.01%)</title><rect x="78.9270%" y="437" width="0.0118%" height="15" fill="rgb(205,22,4)" fg:x="86864676174" fg:w="13004179"/><text x="79.1770%" y="447.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (15,951,006 samples, 0.01%)</title><rect x="78.9388%" y="437" width="0.0145%" height="15" fill="rgb(206,3,8)" fg:x="86877680353" fg:w="15951006"/><text x="79.1888%" y="447.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::difference_type __gnu_cxx::operator-&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (38,483,380 samples, 0.03%)</title><rect x="78.9533%" y="437" width="0.0350%" height="15" fill="rgb(251,23,15)" fg:x="86893631359" fg:w="38483380"/><text x="79.2033%" y="447.50"></text></g><g><title>__asan::asan_memalign (12,020,448 samples, 0.01%)</title><rect x="79.0371%" y="389" width="0.0109%" height="15" fill="rgb(252,88,28)" fg:x="86985831693" fg:w="12020448"/><text x="79.2871%" y="399.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (65,614,049 samples, 0.06%)</title><rect x="79.0235%" y="405" width="0.0596%" height="15" fill="rgb(212,127,14)" fg:x="86970849848" fg:w="65614049"/><text x="79.2735%" y="415.50"></text></g><g><title>operator new (25,685,054 samples, 0.02%)</title><rect x="79.0597%" y="389" width="0.0233%" height="15" fill="rgb(247,145,37)" fg:x="87010778843" fg:w="25685054"/><text x="79.3097%" y="399.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (124,751,780 samples, 0.11%)</title><rect x="78.9890%" y="437" width="0.1134%" height="15" fill="rgb(209,117,53)" fg:x="86932903130" fg:w="124751780"/><text x="79.2390%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (105,757,884 samples, 0.10%)</title><rect x="79.0062%" y="421" width="0.0961%" height="15" fill="rgb(212,90,42)" fg:x="86951897026" fg:w="105757884"/><text x="79.2562%" y="431.50"></text></g><g><title>operator new (21,191,013 samples, 0.02%)</title><rect x="79.0831%" y="405" width="0.0193%" height="15" fill="rgb(218,164,37)" fg:x="87036463897" fg:w="21191013"/><text x="79.3331%" y="415.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (15,901,661 samples, 0.01%)</title><rect x="79.1167%" y="421" width="0.0144%" height="15" fill="rgb(246,65,34)" fg:x="87073462008" fg:w="15901661"/><text x="79.3667%" y="431.50"></text></g><g><title>__asan::GetMallocContextSize (25,215,741 samples, 0.02%)</title><rect x="79.1644%" y="389" width="0.0229%" height="15" fill="rgb(231,100,33)" fg:x="87125950085" fg:w="25215741"/><text x="79.4144%" y="399.50"></text></g><g><title>__asan::asan_delete (12,153,991 samples, 0.01%)</title><rect x="79.1873%" y="389" width="0.0110%" height="15" fill="rgb(228,126,14)" fg:x="87151165826" fg:w="12153991"/><text x="79.4373%" y="399.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindImpl (12,805,831 samples, 0.01%)</title><rect x="79.1983%" y="389" width="0.0116%" height="15" fill="rgb(215,173,21)" fg:x="87163319817" fg:w="12805831"/><text x="79.4483%" y="399.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (96,886,361 samples, 0.09%)</title><rect x="79.1456%" y="405" width="0.0880%" height="15" fill="rgb(210,6,40)" fg:x="87105299032" fg:w="96886361"/><text x="79.3956%" y="415.50"></text></g><g><title>operator delete (20,725,533 samples, 0.02%)</title><rect x="79.2148%" y="389" width="0.0188%" height="15" fill="rgb(212,48,18)" fg:x="87181459860" fg:w="20725533"/><text x="79.4648%" y="399.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (175,940,480 samples, 0.16%)</title><rect x="79.1023%" y="437" width="0.1599%" height="15" fill="rgb(230,214,11)" fg:x="87057654910" fg:w="175940480"/><text x="79.3523%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (144,231,721 samples, 0.13%)</title><rect x="79.1311%" y="421" width="0.1311%" height="15" fill="rgb(254,105,39)" fg:x="87089363669" fg:w="144231721"/><text x="79.3811%" y="431.50"></text></g><g><title>operator delete (31,409,997 samples, 0.03%)</title><rect x="79.2337%" y="405" width="0.0285%" height="15" fill="rgb(245,158,5)" fg:x="87202185393" fg:w="31409997"/><text x="79.4837%" y="415.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (14,775,956 samples, 0.01%)</title><rect x="79.2622%" y="437" width="0.0134%" height="15" fill="rgb(249,208,11)" fg:x="87233595390" fg:w="14775956"/><text x="79.5122%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (19,750,535 samples, 0.02%)</title><rect x="79.2756%" y="437" width="0.0179%" height="15" fill="rgb(210,39,28)" fg:x="87248371346" fg:w="19750535"/><text x="79.5256%" y="447.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (18,106,311 samples, 0.02%)</title><rect x="79.4055%" y="421" width="0.0165%" height="15" fill="rgb(211,56,53)" fg:x="87391268219" fg:w="18106311"/><text x="79.6555%" y="431.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (19,028,026 samples, 0.02%)</title><rect x="79.4219%" y="421" width="0.0173%" height="15" fill="rgb(226,201,30)" fg:x="87409374530" fg:w="19028026"/><text x="79.6719%" y="431.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (17,181,226 samples, 0.02%)</title><rect x="79.4711%" y="405" width="0.0156%" height="15" fill="rgb(239,101,34)" fg:x="87463501349" fg:w="17181226"/><text x="79.7211%" y="415.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_max_size (19,187,511 samples, 0.02%)</title><rect x="79.6279%" y="373" width="0.0174%" height="15" fill="rgb(226,209,5)" fg:x="87636098435" fg:w="19187511"/><text x="79.8779%" y="383.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (62,962,479 samples, 0.06%)</title><rect x="79.6053%" y="389" width="0.0572%" height="15" fill="rgb(250,105,47)" fg:x="87611162614" fg:w="62962479"/><text x="79.8553%" y="399.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::max_size (18,839,147 samples, 0.02%)</title><rect x="79.6454%" y="373" width="0.0171%" height="15" fill="rgb(230,72,3)" fg:x="87655285946" fg:w="18839147"/><text x="79.8954%" y="383.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (251,221,884 samples, 0.23%)</title><rect x="79.4867%" y="405" width="0.2283%" height="15" fill="rgb(232,218,39)" fg:x="87480682575" fg:w="251221884"/><text x="79.7367%" y="415.50"></text></g><g><title>unsigned long const&amp; std::min&lt;unsigned long&gt; (57,779,366 samples, 0.05%)</title><rect x="79.6625%" y="389" width="0.0525%" height="15" fill="rgb(248,166,6)" fg:x="87674125093" fg:w="57779366"/><text x="79.9125%" y="399.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (311,017,108 samples, 0.28%)</title><rect x="79.4392%" y="421" width="0.2826%" height="15" fill="rgb(247,89,20)" fg:x="87428402556" fg:w="311017108"/><text x="79.6892%" y="431.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (56,525,173 samples, 0.05%)</title><rect x="79.7218%" y="421" width="0.0514%" height="15" fill="rgb(248,130,54)" fg:x="87739419664" fg:w="56525173"/><text x="79.9718%" y="431.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (562,898,470 samples, 0.51%)</title><rect x="79.3080%" y="437" width="0.5115%" height="15" fill="rgb(234,196,4)" fg:x="87283990032" fg:w="562898470"/><text x="79.5580%" y="447.50"></text></g><g><title>unsigned long const&amp; std::max&lt;unsigned long&gt; (50,943,665 samples, 0.05%)</title><rect x="79.7732%" y="421" width="0.0463%" height="15" fill="rgb(250,143,31)" fg:x="87795944837" fg:w="50943665"/><text x="80.0232%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__niter_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (28,485,331 samples, 0.03%)</title><rect x="79.8791%" y="405" width="0.0259%" height="15" fill="rgb(211,110,34)" fg:x="87912544822" fg:w="28485331"/><text x="80.1291%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (32,763,865 samples, 0.03%)</title><rect x="79.9406%" y="389" width="0.0298%" height="15" fill="rgb(215,124,48)" fg:x="87980255137" fg:w="32763865"/><text x="80.1906%" y="399.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__niter_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (21,268,272 samples, 0.02%)</title><rect x="79.9704%" y="389" width="0.0193%" height="15" fill="rgb(216,46,13)" fg:x="88013019002" fg:w="21268272"/><text x="80.2204%" y="399.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (22,062,326 samples, 0.02%)</title><rect x="80.0634%" y="373" width="0.0200%" height="15" fill="rgb(205,184,25)" fg:x="88115335533" fg:w="22062326"/><text x="80.3134%" y="383.50"></text></g><g><title>std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (13,859,887 samples, 0.01%)</title><rect x="80.0834%" y="373" width="0.0126%" height="15" fill="rgb(228,1,10)" fg:x="88137397859" fg:w="13859887"/><text x="80.3334%" y="383.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (22,090,065 samples, 0.02%)</title><rect x="80.1218%" y="357" width="0.0201%" height="15" fill="rgb(213,116,27)" fg:x="88179664809" fg:w="22090065"/><text x="80.3718%" y="367.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (59,778,766 samples, 0.05%)</title><rect x="80.1922%" y="341" width="0.0543%" height="15" fill="rgb(241,95,50)" fg:x="88257139326" fg:w="59778766"/><text x="80.4422%" y="351.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (127,129,026 samples, 0.12%)</title><rect x="80.1605%" y="357" width="0.1155%" height="15" fill="rgb(238,48,32)" fg:x="88222250219" fg:w="127129026"/><text x="80.4105%" y="367.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (32,461,153 samples, 0.03%)</title><rect x="80.2465%" y="341" width="0.0295%" height="15" fill="rgb(235,113,49)" fg:x="88316918092" fg:w="32461153"/><text x="80.4965%" y="351.50"></text></g><g><title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (224,755,014 samples, 0.20%)</title><rect x="80.0960%" y="373" width="0.2042%" height="15" fill="rgb(205,127,43)" fg:x="88151257746" fg:w="224755014"/><text x="80.3460%" y="383.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (26,633,515 samples, 0.02%)</title><rect x="80.2760%" y="357" width="0.0242%" height="15" fill="rgb(250,162,2)" fg:x="88349379245" fg:w="26633515"/><text x="80.5260%" y="367.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (15,468,647 samples, 0.01%)</title><rect x="80.3002%" y="373" width="0.0141%" height="15" fill="rgb(220,13,41)" fg:x="88376012760" fg:w="15468647"/><text x="80.5502%" y="383.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (366,846,496 samples, 0.33%)</title><rect x="79.9897%" y="389" width="0.3333%" height="15" fill="rgb(249,221,25)" fg:x="88034287274" fg:w="366846496"/><text x="80.2397%" y="399.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (463,831,958 samples, 0.42%)</title><rect x="79.9050%" y="405" width="0.4214%" height="15" fill="rgb(215,208,19)" fg:x="87941030153" fg:w="463831958"/><text x="80.1550%" y="415.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (556,583,274 samples, 0.51%)</title><rect x="79.8284%" y="437" width="0.5057%" height="15" fill="rgb(236,175,2)" fg:x="87856712240" fg:w="556583274"/><text x="80.0784%" y="447.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (522,599,506 samples, 0.47%)</title><rect x="79.8593%" y="421" width="0.4748%" height="15" fill="rgb(241,52,2)" fg:x="87890696008" fg:w="522599506"/><text x="80.1093%" y="431.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::begin (75,400,543 samples, 0.07%)</title><rect x="80.3341%" y="437" width="0.0685%" height="15" fill="rgb(248,140,14)" fg:x="88413295514" fg:w="75400543"/><text x="80.5841%" y="447.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (17,414,676 samples, 0.02%)</title><rect x="80.3868%" y="421" width="0.0158%" height="15" fill="rgb(253,22,42)" fg:x="88471281381" fg:w="17414676"/><text x="80.6368%" y="431.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (42,729,251 samples, 0.04%)</title><rect x="80.4026%" y="437" width="0.0388%" height="15" fill="rgb(234,61,47)" fg:x="88488696057" fg:w="42729251"/><text x="80.6526%" y="447.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (12,142,667 samples, 0.01%)</title><rect x="80.4414%" y="437" width="0.0110%" height="15" fill="rgb(208,226,15)" fg:x="88531425308" fg:w="12142667"/><text x="80.6914%" y="447.50"></text></g><g><title>unsigned long const&amp; std::max&lt;unsigned long&gt; (27,726,364 samples, 0.03%)</title><rect x="80.4525%" y="437" width="0.0252%" height="15" fill="rgb(217,221,4)" fg:x="88543567975" fg:w="27726364"/><text x="80.7025%" y="447.50"></text></g><g><title>operator new (12,143,060 samples, 0.01%)</title><rect x="80.4880%" y="421" width="0.0110%" height="15" fill="rgb(212,174,34)" fg:x="88582707679" fg:w="12143060"/><text x="80.7380%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (11,269,287 samples, 0.01%)</title><rect x="80.4991%" y="421" width="0.0102%" height="15" fill="rgb(253,83,4)" fg:x="88594850739" fg:w="11269287"/><text x="80.7491%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (20,481,428 samples, 0.02%)</title><rect x="80.5093%" y="421" width="0.0186%" height="15" fill="rgb(250,195,49)" fg:x="88606120026" fg:w="20481428"/><text x="80.7593%" y="431.50"></text></g><g><title>operator new (12,121,583 samples, 0.01%)</title><rect x="80.5562%" y="405" width="0.0110%" height="15" fill="rgb(241,192,25)" fg:x="88657780397" fg:w="12121583"/><text x="80.8062%" y="415.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (49,217,362 samples, 0.04%)</title><rect x="80.5279%" y="421" width="0.0447%" height="15" fill="rgb(208,124,10)" fg:x="88626601454" fg:w="49217362"/><text x="80.7779%" y="431.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (2,450,127,335 samples, 2.23%)</title><rect x="78.3874%" y="469" width="2.2262%" height="15" fill="rgb(222,33,0)" fg:x="86270765840" fg:w="2450127335"/><text x="78.6374%" y="479.50">s..</text></g><g><title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2,211,431,002 samples, 2.01%)</title><rect x="78.6042%" y="453" width="2.0094%" height="15" fill="rgb(234,209,28)" fg:x="86509462173" fg:w="2211431002"/><text x="78.8542%" y="463.50">v..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (144,147,129 samples, 0.13%)</title><rect x="80.4826%" y="437" width="0.1310%" height="15" fill="rgb(224,11,23)" fg:x="88576746046" fg:w="144147129"/><text x="80.7326%" y="447.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (45,074,359 samples, 0.04%)</title><rect x="80.5726%" y="421" width="0.0410%" height="15" fill="rgb(232,99,1)" fg:x="88675818816" fg:w="45074359"/><text x="80.8226%" y="431.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::new_allocator (26,779,091 samples, 0.02%)</title><rect x="80.6488%" y="421" width="0.0243%" height="15" fill="rgb(237,95,45)" fg:x="88759632421" fg:w="26779091"/><text x="80.8988%" y="431.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (42,207,111 samples, 0.04%)</title><rect x="80.6731%" y="421" width="0.0384%" height="15" fill="rgb(208,109,11)" fg:x="88786411512" fg:w="42207111"/><text x="80.9231%" y="431.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (102,434,497 samples, 0.09%)</title><rect x="80.6348%" y="437" width="0.0931%" height="15" fill="rgb(216,190,48)" fg:x="88744236057" fg:w="102434497"/><text x="80.8848%" y="447.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocator (18,051,931 samples, 0.02%)</title><rect x="80.7115%" y="421" width="0.0164%" height="15" fill="rgb(251,171,36)" fg:x="88828618623" fg:w="18051931"/><text x="80.9615%" y="431.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (148,925,660 samples, 0.14%)</title><rect x="80.6232%" y="453" width="0.1353%" height="15" fill="rgb(230,62,22)" fg:x="88731450256" fg:w="148925660"/><text x="80.8732%" y="463.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocator (25,317,070 samples, 0.02%)</title><rect x="80.7355%" y="437" width="0.0230%" height="15" fill="rgb(225,114,35)" fg:x="88855058846" fg:w="25317070"/><text x="80.9855%" y="447.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (176,888,275 samples, 0.16%)</title><rect x="80.6136%" y="469" width="0.1607%" height="15" fill="rgb(215,118,42)" fg:x="88720893175" fg:w="176888275"/><text x="80.8636%" y="479.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (17,405,534 samples, 0.02%)</title><rect x="80.7585%" y="453" width="0.0158%" height="15" fill="rgb(243,119,21)" fg:x="88880375916" fg:w="17405534"/><text x="81.0085%" y="463.50"></text></g><g><title>split (2,898,091,940 samples, 2.63%)</title><rect x="78.1474%" y="485" width="2.6333%" height="15" fill="rgb(252,177,53)" fg:x="86006687698" fg:w="2898091940"/><text x="78.3974%" y="495.50">sp..</text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (63,722,920 samples, 0.06%)</title><rect x="80.7981%" y="485" width="0.0579%" height="15" fill="rgb(237,209,29)" fg:x="88923998485" fg:w="63722920"/><text x="81.0481%" y="495.50"></text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (76,767,572 samples, 0.07%)</title><rect x="80.8560%" y="485" width="0.0698%" height="15" fill="rgb(212,65,23)" fg:x="88987721405" fg:w="76767572"/><text x="81.1060%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (27,829,571 samples, 0.03%)</title><rect x="80.9258%" y="485" width="0.0253%" height="15" fill="rgb(230,222,46)" fg:x="89064488977" fg:w="27829571"/><text x="81.1758%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (30,929,390 samples, 0.03%)</title><rect x="80.9511%" y="485" width="0.0281%" height="15" fill="rgb(215,135,32)" fg:x="89092318548" fg:w="30929390"/><text x="81.2011%" y="495.50"></text></g><g><title>__interceptor_memcpy (30,507,035 samples, 0.03%)</title><rect x="81.0441%" y="469" width="0.0277%" height="15" fill="rgb(246,101,22)" fg:x="89194734542" fg:w="30507035"/><text x="81.2941%" y="479.50"></text></g><g><title>__interceptor_strlen (42,968,420 samples, 0.04%)</title><rect x="81.0718%" y="469" width="0.0390%" height="15" fill="rgb(206,107,13)" fg:x="89225241577" fg:w="42968420"/><text x="81.3218%" y="479.50"></text></g><g><title>__interceptor_strlen.part.0 (20,725,798 samples, 0.02%)</title><rect x="81.1109%" y="469" width="0.0188%" height="15" fill="rgb(250,100,44)" fg:x="89268209997" fg:w="20725798"/><text x="81.3609%" y="479.50"></text></g><g><title>bool __gnu_cxx::__is_null_pointer&lt;char const&gt; (19,068,205 samples, 0.02%)</title><rect x="81.1338%" y="469" width="0.0173%" height="15" fill="rgb(231,147,38)" fg:x="89293399871" fg:w="19068205"/><text x="81.3838%" y="479.50"></text></g><g><title>memcpy@plt (25,022,465 samples, 0.02%)</title><rect x="81.1608%" y="469" width="0.0227%" height="15" fill="rgb(229,8,40)" fg:x="89323154443" fg:w="25022465"/><text x="81.4108%" y="479.50"></text></g><g><title>operator new (33,487,021 samples, 0.03%)</title><rect x="81.1835%" y="469" width="0.0304%" height="15" fill="rgb(221,135,30)" fg:x="89348176908" fg:w="33487021"/><text x="81.4335%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (19,885,689 samples, 0.02%)</title><rect x="81.2140%" y="469" width="0.0181%" height="15" fill="rgb(249,193,18)" fg:x="89381663929" fg:w="19885689"/><text x="81.4640%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (17,575,798 samples, 0.02%)</title><rect x="81.2320%" y="469" width="0.0160%" height="15" fill="rgb(209,133,39)" fg:x="89401549618" fg:w="17575798"/><text x="81.4820%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (45,313,148 samples, 0.04%)</title><rect x="81.2480%" y="469" width="0.0412%" height="15" fill="rgb(232,100,14)" fg:x="89419125416" fg:w="45313148"/><text x="81.4980%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (14,264,341 samples, 0.01%)</title><rect x="81.2968%" y="469" width="0.0130%" height="15" fill="rgb(224,185,1)" fg:x="89472809239" fg:w="14264341"/><text x="81.5468%" y="479.50"></text></g><g><title>__asan_region_is_poisoned (45,488,355 samples, 0.04%)</title><rect x="81.3345%" y="453" width="0.0413%" height="15" fill="rgb(223,139,8)" fg:x="89514358537" fg:w="45488355"/><text x="81.5845%" y="463.50"></text></g><g><title>__asan_region_is_poisoned@plt (12,262,026 samples, 0.01%)</title><rect x="81.3759%" y="453" width="0.0111%" height="15" fill="rgb(232,213,38)" fg:x="89559846892" fg:w="12262026"/><text x="81.6259%" y="463.50"></text></g><g><title>__interceptor_strlen.part.0 (25,977,108 samples, 0.02%)</title><rect x="81.3870%" y="453" width="0.0236%" height="15" fill="rgb(207,94,22)" fg:x="89572108918" fg:w="25977108"/><text x="81.6370%" y="463.50"></text></g><g><title>__sanitizer::mem_is_zero (22,393,492 samples, 0.02%)</title><rect x="81.4106%" y="453" width="0.0203%" height="15" fill="rgb(219,183,54)" fg:x="89598086026" fg:w="22393492"/><text x="81.6606%" y="463.50"></text></g><g><title>std::char_traits&lt;char&gt;::length (191,689,257 samples, 0.17%)</title><rect x="81.3098%" y="469" width="0.1742%" height="15" fill="rgb(216,185,54)" fg:x="89487073580" fg:w="191689257"/><text x="81.5598%" y="479.50"></text></g><g><title>__strlen_avx2 (58,283,319 samples, 0.05%)</title><rect x="81.4310%" y="453" width="0.0530%" height="15" fill="rgb(254,217,39)" fg:x="89620479518" fg:w="58283319"/><text x="81.6810%" y="463.50"></text></g><g><title>std::iterator_traits&lt;char const*&gt;::difference_type std::distance&lt;char const*&gt; (13,768,300 samples, 0.01%)</title><rect x="81.4839%" y="469" width="0.0125%" height="15" fill="rgb(240,178,23)" fg:x="89678762837" fg:w="13768300"/><text x="81.7339%" y="479.50"></text></g><g><title>__asan::GetMallocContextSize (23,503,832 samples, 0.02%)</title><rect x="81.6134%" y="453" width="0.0214%" height="15" fill="rgb(218,11,47)" fg:x="89821217587" fg:w="23503832"/><text x="81.8634%" y="463.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (26,907,143 samples, 0.02%)</title><rect x="81.6347%" y="453" width="0.0244%" height="15" fill="rgb(218,51,51)" fg:x="89844721419" fg:w="26907143"/><text x="81.8847%" y="463.50"></text></g><g><title>__asan::asan_memalign (19,584,479 samples, 0.02%)</title><rect x="81.6592%" y="453" width="0.0178%" height="15" fill="rgb(238,126,27)" fg:x="89871628562" fg:w="19584479"/><text x="81.9092%" y="463.50"></text></g><g><title>__asan_region_is_poisoned (53,548,799 samples, 0.05%)</title><rect x="81.6770%" y="453" width="0.0487%" height="15" fill="rgb(249,202,22)" fg:x="89891213041" fg:w="53548799"/><text x="81.9270%" y="463.50"></text></g><g><title>__interceptor_memcpy (44,044,765 samples, 0.04%)</title><rect x="81.7310%" y="453" width="0.0400%" height="15" fill="rgb(254,195,49)" fg:x="89950739547" fg:w="44044765"/><text x="81.9810%" y="463.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindImpl (11,975,349 samples, 0.01%)</title><rect x="81.7711%" y="453" width="0.0109%" height="15" fill="rgb(208,123,14)" fg:x="89994784312" fg:w="11975349"/><text x="82.0211%" y="463.50"></text></g><g><title>__sanitizer::StackTrace::GetCurrentPc (11,457,183 samples, 0.01%)</title><rect x="81.7820%" y="453" width="0.0104%" height="15" fill="rgb(224,200,8)" fg:x="90006759661" fg:w="11457183"/><text x="82.0320%" y="463.50"></text></g><g><title>__sanitizer::mem_is_zero (48,800,936 samples, 0.04%)</title><rect x="81.7924%" y="453" width="0.0443%" height="15" fill="rgb(217,61,36)" fg:x="90018216844" fg:w="48800936"/><text x="82.0424%" y="463.50"></text></g><g><title>operator new (19,277,219 samples, 0.02%)</title><rect x="81.8401%" y="453" width="0.0175%" height="15" fill="rgb(206,35,45)" fg:x="90070724520" fg:w="19277219"/><text x="82.0901%" y="463.50"></text></g><g><title>std::iterator_traits&lt;char const*&gt;::difference_type std::distance&lt;char const*&gt; (55,900,054 samples, 0.05%)</title><rect x="81.8638%" y="453" width="0.0508%" height="15" fill="rgb(217,65,33)" fg:x="90096875861" fg:w="55900054"/><text x="82.1138%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1,029,210,876 samples, 0.94%)</title><rect x="80.9875%" y="485" width="0.9352%" height="15" fill="rgb(222,158,48)" fg:x="89132414118" fg:w="1029210876"/><text x="81.2375%" y="495.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (459,165,236 samples, 0.42%)</title><rect x="81.5055%" y="469" width="0.4172%" height="15" fill="rgb(254,2,54)" fg:x="89702459758" fg:w="459165236"/><text x="81.7555%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (15,039,526 samples, 0.01%)</title><rect x="81.9227%" y="485" width="0.0137%" height="15" fill="rgb(250,143,38)" fg:x="90161624994" fg:w="15039526"/><text x="82.1727%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (34,440,800 samples, 0.03%)</title><rect x="81.9363%" y="485" width="0.0313%" height="15" fill="rgb(248,25,0)" fg:x="90176664520" fg:w="34440800"/><text x="82.1863%" y="495.50"></text></g><g><title>__gnu_cxx::__stoa&lt;long, int, char, int&gt; (32,789,568 samples, 0.03%)</title><rect x="81.9904%" y="469" width="0.0298%" height="15" fill="rgb(206,152,27)" fg:x="90236166594" fg:w="32789568"/><text x="82.2404%" y="479.50"></text></g><g><title>__interceptor_strtol (40,824,221 samples, 0.04%)</title><rect x="82.0202%" y="469" width="0.0371%" height="15" fill="rgb(240,77,30)" fg:x="90268956162" fg:w="40824221"/><text x="82.2702%" y="479.50"></text></g><g><title>__errno_location (57,495,404 samples, 0.05%)</title><rect x="82.2088%" y="453" width="0.0522%" height="15" fill="rgb(231,5,3)" fg:x="90476580851" fg:w="57495404"/><text x="82.4588%" y="463.50"></text></g><g><title>__errno_location@plt (15,369,927 samples, 0.01%)</title><rect x="82.2611%" y="453" width="0.0140%" height="15" fill="rgb(207,226,32)" fg:x="90534076255" fg:w="15369927"/><text x="82.5111%" y="463.50"></text></g><g><title>std::__cxx11::stoi (468,605,238 samples, 0.43%)</title><rect x="81.9676%" y="485" width="0.4258%" height="15" fill="rgb(222,207,47)" fg:x="90211105320" fg:w="468605238"/><text x="82.2176%" y="495.50"></text></g><g><title>int __gnu_cxx::__stoa&lt;long, int, char, int&gt; (369,930,175 samples, 0.34%)</title><rect x="82.0573%" y="469" width="0.3361%" height="15" fill="rgb(229,115,45)" fg:x="90309780383" fg:w="369930175"/><text x="82.3073%" y="479.50"></text></g><g><title>__gnu_cxx::__stoa&lt;long, int, char, int&gt; (130,264,376 samples, 0.12%)</title><rect x="82.2750%" y="453" width="0.1184%" height="15" fill="rgb(224,191,6)" fg:x="90549446182" fg:w="130264376"/><text x="82.5250%" y="463.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (44,300,451 samples, 0.04%)</title><rect x="82.3934%" y="485" width="0.0403%" height="15" fill="rgb(230,227,24)" fg:x="90679710558" fg:w="44300451"/><text x="82.6434%" y="495.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::operator bool (47,314,480 samples, 0.04%)</title><rect x="82.4337%" y="485" width="0.0430%" height="15" fill="rgb(228,80,19)" fg:x="90724011009" fg:w="47314480"/><text x="82.6837%" y="495.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (47,019,043 samples, 0.04%)</title><rect x="82.4767%" y="485" width="0.0427%" height="15" fill="rgb(247,229,0)" fg:x="90771325489" fg:w="47019043"/><text x="82.7267%" y="495.50"></text></g><g><title>std::ios_base::_M_call_callbacks (68,582,603 samples, 0.06%)</title><rect x="82.5243%" y="485" width="0.0623%" height="15" fill="rgb(237,194,15)" fg:x="90823718553" fg:w="68582603"/><text x="82.7743%" y="495.50"></text></g><g><title>std::ios_base::_M_dispose_callbacks (37,153,522 samples, 0.03%)</title><rect x="82.5866%" y="485" width="0.0338%" height="15" fill="rgb(219,203,20)" fg:x="90892301156" fg:w="37153522"/><text x="82.8366%" y="495.50"></text></g><g><title>std::ios_base::ios_base (81,658,854 samples, 0.07%)</title><rect x="82.6203%" y="485" width="0.0742%" height="15" fill="rgb(234,128,8)" fg:x="90929454678" fg:w="81658854"/><text x="82.8703%" y="495.50"></text></g><g><title>std::ios_base::~ios_base (129,246,783 samples, 0.12%)</title><rect x="82.6945%" y="485" width="0.1174%" height="15" fill="rgb(248,202,8)" fg:x="91011113532" fg:w="129246783"/><text x="82.9445%" y="495.50"></text></g><g><title>std::locale::locale (54,621,980 samples, 0.05%)</title><rect x="82.8120%" y="485" width="0.0496%" height="15" fill="rgb(206,104,37)" fg:x="91140360315" fg:w="54621980"/><text x="83.0620%" y="495.50"></text></g><g><title>std::locale::~locale (88,897,399 samples, 0.08%)</title><rect x="82.8616%" y="485" width="0.0808%" height="15" fill="rgb(223,8,27)" fg:x="91194982295" fg:w="88897399"/><text x="83.1116%" y="495.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (13,745,056 samples, 0.01%)</title><rect x="82.9424%" y="485" width="0.0125%" height="15" fill="rgb(216,217,28)" fg:x="91283879694" fg:w="13745056"/><text x="83.1924%" y="495.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (19,870,042 samples, 0.02%)</title><rect x="82.9549%" y="485" width="0.0181%" height="15" fill="rgb(249,199,1)" fg:x="91297624750" fg:w="19870042"/><text x="83.2049%" y="495.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (31,320,362 samples, 0.03%)</title><rect x="82.9769%" y="485" width="0.0285%" height="15" fill="rgb(240,85,17)" fg:x="91321921902" fg:w="31320362"/><text x="83.2269%" y="495.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::~_Vector_impl (22,544,213 samples, 0.02%)</title><rect x="83.0501%" y="469" width="0.0205%" height="15" fill="rgb(206,108,45)" fg:x="91402434156" fg:w="22544213"/><text x="83.3001%" y="479.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (27,105,276 samples, 0.02%)</title><rect x="83.1016%" y="421" width="0.0246%" height="15" fill="rgb(245,210,41)" fg:x="91459097234" fg:w="27105276"/><text x="83.3516%" y="431.50"></text></g><g><title>operator delete (13,359,031 samples, 0.01%)</title><rect x="83.1141%" y="405" width="0.0121%" height="15" fill="rgb(206,13,37)" fg:x="91472843479" fg:w="13359031"/><text x="83.3641%" y="415.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_deallocate (36,116,240 samples, 0.03%)</title><rect x="83.0953%" y="453" width="0.0328%" height="15" fill="rgb(250,61,18)" fg:x="91452223660" fg:w="36116240"/><text x="83.3453%" y="463.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (31,490,022 samples, 0.03%)</title><rect x="83.0995%" y="437" width="0.0286%" height="15" fill="rgb(235,172,48)" fg:x="91456849878" fg:w="31490022"/><text x="83.3495%" y="447.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::~_Vector_impl (30,158,604 samples, 0.03%)</title><rect x="83.1281%" y="453" width="0.0274%" height="15" fill="rgb(249,201,17)" fg:x="91488339900" fg:w="30158604"/><text x="83.3781%" y="463.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~allocator (12,406,083 samples, 0.01%)</title><rect x="83.1555%" y="453" width="0.0113%" height="15" fill="rgb(219,208,6)" fg:x="91518498504" fg:w="12406083"/><text x="83.4055%" y="463.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (111,148,607 samples, 0.10%)</title><rect x="83.0706%" y="469" width="0.1010%" height="15" fill="rgb(248,31,23)" fg:x="91424978369" fg:w="111148607"/><text x="83.3206%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (13,688,251 samples, 0.01%)</title><rect x="83.1825%" y="437" width="0.0124%" height="15" fill="rgb(245,15,42)" fg:x="91548177700" fg:w="13688251"/><text x="83.4325%" y="447.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (98,465,233 samples, 0.09%)</title><rect x="83.1763%" y="453" width="0.0895%" height="15" fill="rgb(222,217,39)" fg:x="91541359920" fg:w="98465233"/><text x="83.4263%" y="463.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (69,641,257 samples, 0.06%)</title><rect x="83.2025%" y="437" width="0.0633%" height="15" fill="rgb(210,219,27)" fg:x="91570183896" fg:w="69641257"/><text x="83.4525%" y="447.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (21,217,209 samples, 0.02%)</title><rect x="83.2465%" y="421" width="0.0193%" height="15" fill="rgb(252,166,36)" fg:x="91618607944" fg:w="21217209"/><text x="83.4965%" y="431.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (110,547,624 samples, 0.10%)</title><rect x="83.1716%" y="469" width="0.1004%" height="15" fill="rgb(245,132,34)" fg:x="91536126976" fg:w="110547624"/><text x="83.4216%" y="479.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (303,856,786 samples, 0.28%)</title><rect x="83.0054%" y="485" width="0.2761%" height="15" fill="rgb(236,54,3)" fg:x="91353242264" fg:w="303856786"/><text x="83.2554%" y="495.50"></text></g><g><title>get_file_and_offset_and_size_from_key (6,208,402,767 samples, 5.64%)</title><rect x="77.6521%" y="501" width="5.6411%" height="15" fill="rgb(241,173,43)" fg:x="85461547479" fg:w="6208402767"/><text x="77.9021%" y="511.50">get_fil..</text></g><g><title>operator delete (53,465,034 samples, 0.05%)</title><rect x="83.2932%" y="501" width="0.0486%" height="15" fill="rgb(215,190,9)" fg:x="91669950246" fg:w="53465034"/><text x="83.5432%" y="511.50"></text></g><g><title>split (32,879,186 samples, 0.03%)</title><rect x="83.3417%" y="501" width="0.0299%" height="15" fill="rgb(242,101,16)" fg:x="91723415280" fg:w="32879186"/><text x="83.5917%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (24,432,436 samples, 0.02%)</title><rect x="83.3799%" y="501" width="0.0222%" height="15" fill="rgb(223,190,21)" fg:x="91765396078" fg:w="24432436"/><text x="83.6299%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (25,914,186 samples, 0.02%)</title><rect x="83.4021%" y="501" width="0.0235%" height="15" fill="rgb(215,228,25)" fg:x="91789828514" fg:w="25914186"/><text x="83.6521%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (66,315,923 samples, 0.06%)</title><rect x="83.4256%" y="501" width="0.0603%" height="15" fill="rgb(225,36,22)" fg:x="91815742700" fg:w="66315923"/><text x="83.6756%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (25,310,393 samples, 0.02%)</title><rect x="83.4955%" y="501" width="0.0230%" height="15" fill="rgb(251,106,46)" fg:x="91892646656" fg:w="25310393"/><text x="83.7455%" y="511.50"></text></g><g><title>std::__cxx11::stoi (16,046,886 samples, 0.01%)</title><rect x="83.5185%" y="501" width="0.0146%" height="15" fill="rgb(208,90,1)" fg:x="91917957049" fg:w="16046886"/><text x="83.7685%" y="511.50"></text></g><g><title>std::__detail::operator== (12,211,900 samples, 0.01%)</title><rect x="83.5378%" y="501" width="0.0111%" height="15" fill="rgb(243,10,4)" fg:x="91939205536" fg:w="12211900"/><text x="83.7878%" y="511.50"></text></g><g><title>std::allocator&lt;char&gt;::allocator (24,851,293 samples, 0.02%)</title><rect x="83.5489%" y="501" width="0.0226%" height="15" fill="rgb(212,137,27)" fg:x="91951417436" fg:w="24851293"/><text x="83.7989%" y="511.50"></text></g><g><title>std::allocator&lt;char&gt;::~allocator (14,621,332 samples, 0.01%)</title><rect x="83.5715%" y="501" width="0.0133%" height="15" fill="rgb(231,220,49)" fg:x="91976268729" fg:w="14621332"/><text x="83.8215%" y="511.50"></text></g><g><title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, int, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, int&gt; &gt; &gt;::end (14,587,276 samples, 0.01%)</title><rect x="83.6021%" y="501" width="0.0133%" height="15" fill="rgb(237,96,20)" fg:x="92009988198" fg:w="14587276"/><text x="83.8521%" y="511.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (25,893,912 samples, 0.02%)</title><rect x="83.6203%" y="501" width="0.0235%" height="15" fill="rgb(239,229,30)" fg:x="92029960047" fg:w="25893912"/><text x="83.8703%" y="511.50"></text></g><g><title>IOTraceClient::do_read (88,786,754,592 samples, 80.67%)</title><rect x="2.9883%" y="517" width="80.6734%" height="15" fill="rgb(219,65,33)" fg:x="3288805521" fg:w="88786754592"/><text x="3.2383%" y="527.50">IOTraceClient::do_read</text></g><g><title>__interceptor_pread (39,397,540 samples, 0.04%)</title><rect x="83.6617%" y="517" width="0.0358%" height="15" fill="rgb(243,134,7)" fg:x="92075560113" fg:w="39397540"/><text x="83.9117%" y="527.50"></text></g><g><title>file_and_offset_and_size::~file_and_offset_and_size (18,385,507 samples, 0.02%)</title><rect x="83.7018%" y="517" width="0.0167%" height="15" fill="rgb(216,177,54)" fg:x="92119645176" fg:w="18385507"/><text x="83.9518%" y="527.50"></text></g><g><title>get_file_and_offset_and_size_from_key (18,565,892 samples, 0.02%)</title><rect x="83.7185%" y="517" width="0.0169%" height="15" fill="rgb(211,160,20)" fg:x="92138030683" fg:w="18565892"/><text x="83.9685%" y="527.50"></text></g><g><title>operator delete (43,786,820 samples, 0.04%)</title><rect x="83.7353%" y="517" width="0.0398%" height="15" fill="rgb(239,85,39)" fg:x="92156596575" fg:w="43786820"/><text x="83.9853%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (20,518,752 samples, 0.02%)</title><rect x="83.7805%" y="517" width="0.0186%" height="15" fill="rgb(232,125,22)" fg:x="92206353724" fg:w="20518752"/><text x="84.0305%" y="527.50"></text></g><g><title>IOTraceClient::do_operation (89,164,093,391 samples, 81.02%)</title><rect x="2.8471%" y="533" width="81.0163%" height="15" fill="rgb(244,57,34)" fg:x="3133430585" fg:w="89164093391"/><text x="3.0971%" y="543.50">IOTraceClient::do_operation</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (70,651,500 samples, 0.06%)</title><rect x="83.7992%" y="517" width="0.0642%" height="15" fill="rgb(214,203,32)" fg:x="92226872476" fg:w="70651500"/><text x="84.0492%" y="527.50"></text></g><g><title>IOTraceClient::do_read (17,638,486 samples, 0.02%)</title><rect x="83.8634%" y="533" width="0.0160%" height="15" fill="rgb(207,58,43)" fg:x="92297523976" fg:w="17638486"/><text x="84.1134%" y="543.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::size (16,841,466 samples, 0.02%)</title><rect x="83.9813%" y="517" width="0.0153%" height="15" fill="rgb(215,193,15)" fg:x="92427256830" fg:w="16841466"/><text x="84.2313%" y="527.50"></text></g><g><title>std::__atomic_base&lt;long&gt;::operator++ (45,008,518 samples, 0.04%)</title><rect x="83.9966%" y="517" width="0.0409%" height="15" fill="rgb(232,15,44)" fg:x="92444098296" fg:w="45008518"/><text x="84.2466%" y="527.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (86,861,948 samples, 0.08%)</title><rect x="84.0616%" y="501" width="0.0789%" height="15" fill="rgb(212,3,48)" fg:x="92515657529" fg:w="86861948"/><text x="84.3116%" y="511.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (112,928,598 samples, 0.10%)</title><rect x="84.0539%" y="517" width="0.1026%" height="15" fill="rgb(218,128,7)" fg:x="92507169409" fg:w="112928598"/><text x="84.3039%" y="527.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (17,578,530 samples, 0.02%)</title><rect x="84.1405%" y="501" width="0.0160%" height="15" fill="rgb(226,216,39)" fg:x="92602519477" fg:w="17578530"/><text x="84.3905%" y="511.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::ratio&lt;1l, 1l&gt;, long, true, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (15,136,749 samples, 0.01%)</title><rect x="84.1579%" y="501" width="0.0138%" height="15" fill="rgb(243,47,51)" fg:x="92621653583" fg:w="15136749"/><text x="84.4079%" y="511.50"></text></g><g><title>std::enable_if&lt;std::chrono::__is_duration&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::value, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (18,167,597 samples, 0.02%)</title><rect x="84.1565%" y="517" width="0.0165%" height="15" fill="rgb(241,183,40)" fg:x="92620098007" fg:w="18167597"/><text x="84.4065%" y="527.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (15,578,770 samples, 0.01%)</title><rect x="84.1971%" y="501" width="0.0142%" height="15" fill="rgb(231,217,32)" fg:x="92664841754" fg:w="15578770"/><text x="84.4471%" y="511.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (32,863,816 samples, 0.03%)</title><rect x="84.3027%" y="469" width="0.0299%" height="15" fill="rgb(229,61,38)" fg:x="92781009878" fg:w="32863816"/><text x="84.5527%" y="479.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (58,754,891 samples, 0.05%)</title><rect x="84.2854%" y="485" width="0.0534%" height="15" fill="rgb(225,210,5)" fg:x="92761982329" fg:w="58754891"/><text x="84.5354%" y="495.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_ptr (16,910,546 samples, 0.02%)</title><rect x="84.5590%" y="421" width="0.0154%" height="15" fill="rgb(231,79,45)" fg:x="93063092954" fg:w="16910546"/><text x="84.8090%" y="431.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_addr (14,695,517 samples, 0.01%)</title><rect x="84.5778%" y="405" width="0.0134%" height="15" fill="rgb(224,100,7)" fg:x="93083826272" fg:w="14695517"/><text x="84.8278%" y="415.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_v (49,844,772 samples, 0.05%)</title><rect x="84.5514%" y="437" width="0.0453%" height="15" fill="rgb(241,198,18)" fg:x="93054752255" fg:w="49844772"/><text x="84.8014%" y="447.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_valptr (24,593,527 samples, 0.02%)</title><rect x="84.5744%" y="421" width="0.0223%" height="15" fill="rgb(252,97,53)" fg:x="93080003500" fg:w="24593527"/><text x="84.8244%" y="431.50"></text></g><g><title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;int&gt;, true&gt;::_M_cget (12,121,458 samples, 0.01%)</title><rect x="84.6022%" y="437" width="0.0110%" height="15" fill="rgb(220,88,7)" fg:x="93110682308" fg:w="12121458"/><text x="84.8522%" y="447.50"></text></g><g><title>std::equal_to&lt;int&gt;::operator (62,164,246 samples, 0.06%)</title><rect x="84.6133%" y="437" width="0.0565%" height="15" fill="rgb(213,176,14)" fg:x="93122803766" fg:w="62164246"/><text x="84.8633%" y="447.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (222,736,915 samples, 0.20%)</title><rect x="84.4735%" y="453" width="0.2024%" height="15" fill="rgb(246,73,7)" fg:x="92969019265" fg:w="222736915"/><text x="84.7235%" y="463.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (356,331,335 samples, 0.32%)</title><rect x="84.3673%" y="469" width="0.3238%" height="15" fill="rgb(245,64,36)" fg:x="92852148625" fg:w="356331335"/><text x="84.6173%" y="479.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (380,845,739 samples, 0.35%)</title><rect x="84.3464%" y="485" width="0.3460%" height="15" fill="rgb(245,80,10)" fg:x="92829132892" fg:w="380845739"/><text x="84.5964%" y="495.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (15,279,035 samples, 0.01%)</title><rect x="84.6980%" y="485" width="0.0139%" height="15" fill="rgb(232,107,50)" fg:x="93216027018" fg:w="15279035"/><text x="84.9480%" y="495.50"></text></g><g><title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;int&gt;, true&gt;::_M_cget (12,024,568 samples, 0.01%)</title><rect x="84.7423%" y="469" width="0.0109%" height="15" fill="rgb(253,3,0)" fg:x="93264784046" fg:w="12024568"/><text x="84.9923%" y="479.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (51,634,850 samples, 0.05%)</title><rect x="84.7118%" y="485" width="0.0469%" height="15" fill="rgb(212,99,53)" fg:x="93231306053" fg:w="51634850"/><text x="84.9618%" y="495.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_ptr (26,230,414 samples, 0.02%)</title><rect x="84.7651%" y="469" width="0.0238%" height="15" fill="rgb(249,111,54)" fg:x="93289895392" fg:w="26230414"/><text x="85.0151%" y="479.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_addr (15,394,061 samples, 0.01%)</title><rect x="84.8015%" y="453" width="0.0140%" height="15" fill="rgb(249,55,30)" fg:x="93329988376" fg:w="15394061"/><text x="85.0515%" y="463.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_v (70,180,161 samples, 0.06%)</title><rect x="84.7588%" y="485" width="0.0638%" height="15" fill="rgb(237,47,42)" fg:x="93282940903" fg:w="70180161"/><text x="85.0088%" y="495.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_valptr (36,995,258 samples, 0.03%)</title><rect x="84.7889%" y="469" width="0.0336%" height="15" fill="rgb(211,20,18)" fg:x="93316125806" fg:w="36995258"/><text x="85.0389%" y="479.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;::_M_valptr (20,321,486 samples, 0.02%)</title><rect x="84.8225%" y="485" width="0.0185%" height="15" fill="rgb(231,203,46)" fg:x="93353121064" fg:w="20321486"/><text x="85.0725%" y="495.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt; &gt;::operator[] (748,888,840 samples, 0.68%)</title><rect x="84.1737%" y="517" width="0.6805%" height="15" fill="rgb(237,142,3)" fg:x="92639006077" fg:w="748888840"/><text x="84.4237%" y="527.50"></text></g><g><title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (699,847,570 samples, 0.64%)</title><rect x="84.2182%" y="501" width="0.6359%" height="15" fill="rgb(241,107,1)" fg:x="92688047347" fg:w="699847570"/><text x="84.4682%" y="511.50"></text></g><g><title>std::hash&lt;int&gt;::operator (14,452,367 samples, 0.01%)</title><rect x="84.8410%" y="485" width="0.0131%" height="15" fill="rgb(229,83,13)" fg:x="93373442550" fg:w="14452367"/><text x="85.0910%" y="495.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt; &gt;::size (126,759,700 samples, 0.12%)</title><rect x="84.8541%" y="517" width="0.1152%" height="15" fill="rgb(241,91,40)" fg:x="93387894917" fg:w="126759700"/><text x="85.1041%" y="527.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::size (126,003,246 samples, 0.11%)</title><rect x="84.8548%" y="501" width="0.1145%" height="15" fill="rgb(225,3,45)" fg:x="93388651371" fg:w="126003246"/><text x="85.1048%" y="511.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (20,586,709 samples, 0.02%)</title><rect x="84.9937%" y="501" width="0.0187%" height="15" fill="rgb(244,223,14)" fg:x="93541478380" fg:w="20586709"/><text x="85.2437%" y="511.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (26,626,556 samples, 0.02%)</title><rect x="85.1317%" y="469" width="0.0242%" height="15" fill="rgb(224,124,37)" fg:x="93693371425" fg:w="26626556"/><text x="85.3817%" y="479.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (65,509,191 samples, 0.06%)</title><rect x="85.0998%" y="485" width="0.0595%" height="15" fill="rgb(251,171,30)" fg:x="93658294738" fg:w="65509191"/><text x="85.3498%" y="495.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (12,083,056 samples, 0.01%)</title><rect x="85.1593%" y="485" width="0.0110%" height="15" fill="rgb(236,46,54)" fg:x="93723803929" fg:w="12083056"/><text x="85.4093%" y="495.50"></text></g><g><title>decltype (12,652,513 samples, 0.01%)</title><rect x="85.3217%" y="437" width="0.0115%" height="15" fill="rgb(245,213,5)" fg:x="93902505352" fg:w="12652513"/><text x="85.5717%" y="447.50"></text></g><g><title>decltype  (13,042,406 samples, 0.01%)</title><rect x="85.3332%" y="437" width="0.0119%" height="15" fill="rgb(230,144,27)" fg:x="93915157865" fg:w="13042406"/><text x="85.5832%" y="447.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_v (43,043,898 samples, 0.04%)</title><rect x="85.3451%" y="437" width="0.0391%" height="15" fill="rgb(220,86,6)" fg:x="93928200271" fg:w="43043898"/><text x="85.5951%" y="447.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_valptr (29,362,494 samples, 0.03%)</title><rect x="85.3575%" y="421" width="0.0267%" height="15" fill="rgb(240,20,13)" fg:x="93941881675" fg:w="29362494"/><text x="85.6075%" y="431.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (165,740,955 samples, 0.15%)</title><rect x="85.2709%" y="453" width="0.1506%" height="15" fill="rgb(217,89,34)" fg:x="93846540164" fg:w="165740955"/><text x="85.5209%" y="463.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_S_equals (18,469,755 samples, 0.02%)</title><rect x="85.4214%" y="453" width="0.0168%" height="15" fill="rgb(229,13,5)" fg:x="94012281119" fg:w="18469755"/><text x="85.6714%" y="463.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (277,154,180 samples, 0.25%)</title><rect x="85.1933%" y="469" width="0.2518%" height="15" fill="rgb(244,67,35)" fg:x="93761191531" fg:w="277154180"/><text x="85.4433%" y="479.50"></text></g><g><title>std::_Hashtable&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (314,922,959 samples, 0.29%)</title><rect x="85.1703%" y="485" width="0.2861%" height="15" fill="rgb(221,40,2)" fg:x="93735886985" fg:w="314922959"/><text x="85.4203%" y="495.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (12,464,233 samples, 0.01%)</title><rect x="85.4451%" y="469" width="0.0113%" height="15" fill="rgb(237,157,21)" fg:x="94038345711" fg:w="12464233"/><text x="85.6951%" y="479.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (22,078,792 samples, 0.02%)</title><rect x="85.4626%" y="485" width="0.0201%" height="15" fill="rgb(222,94,11)" fg:x="94057604367" fg:w="22078792"/><text x="85.7126%" y="495.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (37,421,902 samples, 0.03%)</title><rect x="85.4827%" y="485" width="0.0340%" height="15" fill="rgb(249,113,6)" fg:x="94079683159" fg:w="37421902"/><text x="85.7327%" y="495.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_v (45,258,749 samples, 0.04%)</title><rect x="85.5167%" y="485" width="0.0411%" height="15" fill="rgb(238,137,36)" fg:x="94117105061" fg:w="45258749"/><text x="85.7667%" y="495.50"></text></g><g><title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_valptr (27,199,669 samples, 0.02%)</title><rect x="85.5331%" y="469" width="0.0247%" height="15" fill="rgb(210,102,26)" fg:x="94135164141" fg:w="27199669"/><text x="85.7831%" y="479.50"></text></g><g><title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;::_M_ptr (12,056,644 samples, 0.01%)</title><rect x="85.5469%" y="453" width="0.0110%" height="15" fill="rgb(218,30,30)" fg:x="94150307166" fg:w="12056644"/><text x="85.7969%" y="463.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt; &gt;::operator[] (658,848,640 samples, 0.60%)</title><rect x="84.9693%" y="517" width="0.5986%" height="15" fill="rgb(214,67,26)" fg:x="93514654617" fg:w="658848640"/><text x="85.2193%" y="527.50"></text></g><g><title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;long, std::allocator&lt;long&gt; &gt; [5]&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (603,809,352 samples, 0.55%)</title><rect x="85.0193%" y="501" width="0.5486%" height="15" fill="rgb(251,9,53)" fg:x="93569693905" fg:w="603809352"/><text x="85.2693%" y="511.50"></text></g><g><title>double const&amp; std::forward&lt;double const&amp;&gt; (20,272,888 samples, 0.02%)</title><rect x="85.6414%" y="501" width="0.0184%" height="15" fill="rgb(228,204,25)" fg:x="94254370636" fg:w="20272888"/><text x="85.8914%" y="511.50"></text></g><g><title>operator new (15,841,740 samples, 0.01%)</title><rect x="85.6802%" y="485" width="0.0144%" height="15" fill="rgb(207,153,8)" fg:x="94297057141" fg:w="15841740"/><text x="85.9302%" y="495.50"></text></g><g><title>handle_mm_fault (11,164,549 samples, 0.01%)</title><rect x="85.7413%" y="421" width="0.0101%" height="15" fill="rgb(242,9,16)" fg:x="94364350683" fg:w="11164549"/><text x="85.9913%" y="431.50"></text></g><g><title>asm_exc_page_fault (14,302,788 samples, 0.01%)</title><rect x="85.7413%" y="469" width="0.0130%" height="15" fill="rgb(217,211,10)" fg:x="94364350683" fg:w="14302788"/><text x="85.9913%" y="479.50"></text></g><g><title>exc_page_fault (14,302,788 samples, 0.01%)</title><rect x="85.7413%" y="453" width="0.0130%" height="15" fill="rgb(219,228,52)" fg:x="94364350683" fg:w="14302788"/><text x="85.9913%" y="463.50"></text></g><g><title>do_user_addr_fault (14,302,788 samples, 0.01%)</title><rect x="85.7413%" y="437" width="0.0130%" height="15" fill="rgb(231,92,29)" fg:x="94364350683" fg:w="14302788"/><text x="85.9913%" y="447.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back (211,334,156 samples, 0.19%)</title><rect x="85.5679%" y="517" width="0.1920%" height="15" fill="rgb(232,8,23)" fg:x="94173503257" fg:w="211334156"/><text x="85.8179%" y="527.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::construct&lt;double, double const&amp;&gt; (105,646,635 samples, 0.10%)</title><rect x="85.6640%" y="501" width="0.0960%" height="15" fill="rgb(216,211,34)" fg:x="94279190778" fg:w="105646635"/><text x="85.9140%" y="511.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;double&gt;::construct&lt;double, double const&amp;&gt; (71,938,532 samples, 0.07%)</title><rect x="85.6946%" y="485" width="0.0654%" height="15" fill="rgb(236,151,0)" fg:x="94312898881" fg:w="71938532"/><text x="85.9446%" y="495.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::push_back (164,543,762 samples, 0.15%)</title><rect x="85.7600%" y="517" width="0.1495%" height="15" fill="rgb(209,168,3)" fg:x="94384837413" fg:w="164543762"/><text x="86.0100%" y="527.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;long&gt; &gt;::construct&lt;long, long const&amp;&gt; (94,433,647 samples, 0.09%)</title><rect x="85.8237%" y="501" width="0.0858%" height="15" fill="rgb(208,129,28)" fg:x="94454947528" fg:w="94433647"/><text x="86.0737%" y="511.50"></text></g><g><title>void __gnu_cxx::new_allocator&lt;long&gt;::construct&lt;long, long const&amp;&gt; (61,638,148 samples, 0.06%)</title><rect x="85.8535%" y="485" width="0.0560%" height="15" fill="rgb(229,78,22)" fg:x="94487743027" fg:w="61638148"/><text x="86.1035%" y="495.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::construct&lt;double, double const&amp;&gt; (14,964,707 samples, 0.01%)</title><rect x="85.9095%" y="517" width="0.0136%" height="15" fill="rgb(228,187,13)" fg:x="94549381175" fg:w="14964707"/><text x="86.1595%" y="527.50"></text></g><g><title>OpMeasurement::record_op (2,266,358,097 samples, 2.06%)</title><rect x="83.8794%" y="533" width="2.0593%" height="15" fill="rgb(240,119,24)" fg:x="92315162462" fg:w="2266358097"/><text x="84.1294%" y="543.50">O..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;long&gt; &gt;::construct&lt;long, long const&amp;&gt; (17,174,677 samples, 0.02%)</title><rect x="85.9231%" y="517" width="0.0156%" height="15" fill="rgb(209,194,42)" fg:x="94564345882" fg:w="17174677"/><text x="86.1731%" y="527.50"></text></g><g><title>OpMeasurement::record_progress (58,551,610 samples, 0.05%)</title><rect x="85.9387%" y="533" width="0.0532%" height="15" fill="rgb(247,200,46)" fg:x="94581520559" fg:w="58551610"/><text x="86.1887%" y="543.50"></text></g><g><title>std::__atomic_base&lt;long&gt;::operator+= (56,277,070 samples, 0.05%)</title><rect x="85.9407%" y="517" width="0.0511%" height="15" fill="rgb(218,76,16)" fg:x="94583795099" fg:w="56277070"/><text x="86.1907%" y="527.50"></text></g><g><title>TraceIterator::next_op (19,122,317 samples, 0.02%)</title><rect x="85.9919%" y="533" width="0.0174%" height="15" fill="rgb(225,21,48)" fg:x="94640072169" fg:w="19122317"/><text x="86.2419%" y="543.50"></text></g><g><title>TraceWorkload::has_next_op (28,444,243 samples, 0.03%)</title><rect x="86.0092%" y="533" width="0.0258%" height="15" fill="rgb(239,223,50)" fg:x="94659194486" fg:w="28444243"/><text x="86.2592%" y="543.50"></text></g><g><title>PoisonAlignedStackMemory (12,681,116 samples, 0.01%)</title><rect x="86.1251%" y="517" width="0.0115%" height="15" fill="rgb(244,45,21)" fg:x="94786714874" fg:w="12681116"/><text x="86.3751%" y="527.50"></text></g><g><title>bool __gnu_cxx::operator==&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (26,678,784 samples, 0.02%)</title><rect x="86.2713%" y="501" width="0.0242%" height="15" fill="rgb(232,33,43)" fg:x="94947562922" fg:w="26678784"/><text x="86.5213%" y="511.50"></text></g><g><title>__gthread_mutex_lock (13,594,469 samples, 0.01%)</title><rect x="86.3152%" y="485" width="0.0124%" height="15" fill="rgb(209,8,3)" fg:x="94995901789" fg:w="13594469"/><text x="86.5652%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (13,816,068 samples, 0.01%)</title><rect x="86.3330%" y="453" width="0.0126%" height="15" fill="rgb(214,25,53)" fg:x="95015482717" fg:w="13816068"/><text x="86.5830%" y="463.50"></text></g><g><title>do_syscall_64 (13,023,897 samples, 0.01%)</title><rect x="86.3337%" y="437" width="0.0118%" height="15" fill="rgb(254,186,54)" fg:x="95016274888" fg:w="13023897"/><text x="86.5837%" y="447.50"></text></g><g><title>__GI___lll_lock_wait (19,800,895 samples, 0.02%)</title><rect x="86.3323%" y="469" width="0.0180%" height="15" fill="rgb(208,174,49)" fg:x="95014740069" fg:w="19800895"/><text x="86.5823%" y="479.50"></text></g><g><title>__gthread_active_p (19,009,297 samples, 0.02%)</title><rect x="86.3503%" y="469" width="0.0173%" height="15" fill="rgb(233,191,51)" fg:x="95034540964" fg:w="19009297"/><text x="86.6003%" y="479.50"></text></g><g><title>__interceptor_pthread_mutex_lock (28,934,554 samples, 0.03%)</title><rect x="86.3731%" y="469" width="0.0263%" height="15" fill="rgb(222,134,10)" fg:x="95059620032" fg:w="28934554"/><text x="86.6231%" y="479.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (179,777,142 samples, 0.16%)</title><rect x="86.3994%" y="469" width="0.1633%" height="15" fill="rgb(230,226,20)" fg:x="95088554586" fg:w="179777142"/><text x="86.6494%" y="479.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (297,233,215 samples, 0.27%)</title><rect x="86.2955%" y="501" width="0.2701%" height="15" fill="rgb(251,111,25)" fg:x="94974241706" fg:w="297233215"/><text x="86.5455%" y="511.50"></text></g><g><title>std::mutex::lock (261,978,663 samples, 0.24%)</title><rect x="86.3275%" y="485" width="0.2380%" height="15" fill="rgb(224,40,46)" fg:x="95009496258" fg:w="261978663"/><text x="86.5775%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (25,950,553 samples, 0.02%)</title><rect x="86.5961%" y="453" width="0.0236%" height="15" fill="rgb(236,108,47)" fg:x="95305016407" fg:w="25950553"/><text x="86.8461%" y="463.50"></text></g><g><title>do_syscall_64 (23,640,142 samples, 0.02%)</title><rect x="86.5982%" y="437" width="0.0215%" height="15" fill="rgb(234,93,0)" fg:x="95307326818" fg:w="23640142"/><text x="86.8482%" y="447.50"></text></g><g><title>__GI___lll_lock_wake (39,632,707 samples, 0.04%)</title><rect x="86.5953%" y="469" width="0.0360%" height="15" fill="rgb(224,213,32)" fg:x="95304219842" fg:w="39632707"/><text x="86.8453%" y="479.50"></text></g><g><title>entry_ibpb (12,885,589 samples, 0.01%)</title><rect x="86.6196%" y="453" width="0.0117%" height="15" fill="rgb(251,11,48)" fg:x="95330966960" fg:w="12885589"/><text x="86.8696%" y="463.50"></text></g><g><title>pthread_mutex_unlock@@GLIBC_2.2.5 (54,103,802 samples, 0.05%)</title><rect x="86.6481%" y="469" width="0.0492%" height="15" fill="rgb(236,173,5)" fg:x="95362270305" fg:w="54103802"/><text x="86.8981%" y="479.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (146,409,182 samples, 0.13%)</title><rect x="86.5656%" y="501" width="0.1330%" height="15" fill="rgb(230,95,12)" fg:x="95271474921" fg:w="146409182"/><text x="86.8156%" y="511.50"></text></g><g><title>std::mutex::unlock (124,319,143 samples, 0.11%)</title><rect x="86.5856%" y="485" width="0.1130%" height="15" fill="rgb(232,209,1)" fg:x="95293564960" fg:w="124319143"/><text x="86.8356%" y="495.50"></text></g><g><title>TraceIterator::next_op (663,193,706 samples, 0.60%)</title><rect x="86.1366%" y="517" width="0.6026%" height="15" fill="rgb(232,6,1)" fg:x="94799395990" fg:w="663193706"/><text x="86.3866%" y="527.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (36,334,780 samples, 0.03%)</title><rect x="86.7062%" y="501" width="0.0330%" height="15" fill="rgb(210,224,50)" fg:x="95426254916" fg:w="36334780"/><text x="86.9562%" y="511.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (12,836,849 samples, 0.01%)</title><rect x="86.7276%" y="485" width="0.0117%" height="15" fill="rgb(228,127,35)" fg:x="95449752847" fg:w="12836849"/><text x="86.9776%" y="495.50"></text></g><g><title>__asan_poison_stack_memory (48,876,392 samples, 0.04%)</title><rect x="86.7392%" y="517" width="0.0444%" height="15" fill="rgb(245,102,45)" fg:x="95462589696" fg:w="48876392"/><text x="86.9892%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (35,323,541 samples, 0.03%)</title><rect x="86.7926%" y="517" width="0.0321%" height="15" fill="rgb(214,1,49)" fg:x="95521331355" fg:w="35323541"/><text x="87.0426%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (15,088,705 samples, 0.01%)</title><rect x="86.8247%" y="517" width="0.0137%" height="15" fill="rgb(226,163,40)" fg:x="95556654896" fg:w="15088705"/><text x="87.0747%" y="527.50"></text></g><g><title>std::__shared_ptr&lt;TraceIterator, (__gnu_cxx::_Lock_policy)2&gt;::get (15,090,040 samples, 0.01%)</title><rect x="86.8384%" y="517" width="0.0137%" height="15" fill="rgb(239,212,28)" fg:x="95571743601" fg:w="15090040"/><text x="87.0884%" y="527.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (13,021,297 samples, 0.01%)</title><rect x="86.8521%" y="517" width="0.0118%" height="15" fill="rgb(220,20,13)" fg:x="95586833641" fg:w="13021297"/><text x="87.1021%" y="527.50"></text></g><g><title>TraceWorkload::next_op (924,452,748 samples, 0.84%)</title><rect x="86.0351%" y="533" width="0.8400%" height="15" fill="rgb(210,164,35)" fg:x="94687638729" fg:w="924452748"/><text x="86.2851%" y="543.50"></text></g><g><title>bool std::chrono::operator&lt; &lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt;(std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; const&amp;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; const&amp;) (12,693,477 samples, 0.01%)</title><rect x="86.8758%" y="533" width="0.0115%" height="15" fill="rgb(248,109,41)" fg:x="95612886210" fg:w="12693477"/><text x="87.1258%" y="543.50"></text></g><g><title>bool std::chrono::operator&lt; &lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt;(std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; const&amp;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; const&amp;) (52,155,676 samples, 0.05%)</title><rect x="86.9158%" y="517" width="0.0474%" height="15" fill="rgb(238,23,50)" fg:x="95656950619" fg:w="52155676"/><text x="87.1658%" y="527.50"></text></g><g><title>bool std::chrono::operator&lt; &lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;(std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&amp;, std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&amp;) (90,967,199 samples, 0.08%)</title><rect x="86.8873%" y="533" width="0.0827%" height="15" fill="rgb(211,48,49)" fg:x="95625579687" fg:w="90967199"/><text x="87.1373%" y="543.50"></text></g><g><title>std::__shared_ptr&lt;TraceIterator, (__gnu_cxx::_Lock_policy)2&gt;::get (15,998,202 samples, 0.01%)</title><rect x="86.9866%" y="533" width="0.0145%" height="15" fill="rgb(223,36,21)" fg:x="95734866242" fg:w="15998202"/><text x="87.2366%" y="543.50"></text></g><g><title>std::atomic&lt;bool&gt;::operator bool (23,464,084 samples, 0.02%)</title><rect x="87.0012%" y="533" width="0.0213%" height="15" fill="rgb(207,123,46)" fg:x="95750864444" fg:w="23464084"/><text x="87.2512%" y="543.50"></text></g><g><title>std::chrono::_V2::steady_clock::now (38,809,203 samples, 0.04%)</title><rect x="87.0225%" y="533" width="0.0353%" height="15" fill="rgb(240,218,32)" fg:x="95774328528" fg:w="38809203"/><text x="87.2725%" y="543.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (29,704,941 samples, 0.03%)</title><rect x="87.0308%" y="517" width="0.0270%" height="15" fill="rgb(252,5,43)" fg:x="95783432790" fg:w="29704941"/><text x="87.2808%" y="527.50"></text></g><g><title>__vdso_clock_gettime (27,405,916 samples, 0.02%)</title><rect x="87.0328%" y="501" width="0.0249%" height="15" fill="rgb(252,84,19)" fg:x="95785731815" fg:w="27405916"/><text x="87.2828%" y="511.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (13,068,572 samples, 0.01%)</title><rect x="87.0618%" y="533" width="0.0119%" height="15" fill="rgb(243,152,39)" fg:x="95817592307" fg:w="13068572"/><text x="87.3118%" y="543.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::operator+= (28,903,998 samples, 0.03%)</title><rect x="87.0842%" y="533" width="0.0263%" height="15" fill="rgb(234,160,15)" fg:x="95842213191" fg:w="28903998"/><text x="87.3342%" y="543.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::operator+= (18,952,831 samples, 0.02%)</title><rect x="87.0932%" y="517" width="0.0172%" height="15" fill="rgb(237,34,20)" fg:x="95852164358" fg:w="18952831"/><text x="87.3432%" y="527.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (30,284,505 samples, 0.03%)</title><rect x="87.1104%" y="533" width="0.0275%" height="15" fill="rgb(229,97,13)" fg:x="95871117189" fg:w="30284505"/><text x="87.3604%" y="543.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (20,550,308 samples, 0.02%)</title><rect x="87.2109%" y="517" width="0.0187%" height="15" fill="rgb(234,71,50)" fg:x="95981687161" fg:w="20550308"/><text x="87.4609%" y="527.50"></text></g><g><title>std::chrono::time_point&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (17,511,960 samples, 0.02%)</title><rect x="87.2343%" y="517" width="0.0159%" height="15" fill="rgb(253,155,4)" fg:x="96007473753" fg:w="17511960"/><text x="87.4843%" y="527.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (12,711,803 samples, 0.01%)</title><rect x="87.3585%" y="501" width="0.0116%" height="15" fill="rgb(222,185,37)" fg:x="96144088612" fg:w="12711803"/><text x="87.6085%" y="511.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (277,354,673 samples, 0.25%)</title><rect x="87.1422%" y="533" width="0.2520%" height="15" fill="rgb(251,177,13)" fg:x="95906065290" fg:w="277354673"/><text x="87.3922%" y="543.50"></text></g><g><title>std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (158,434,250 samples, 0.14%)</title><rect x="87.2502%" y="517" width="0.1440%" height="15" fill="rgb(250,179,40)" fg:x="96024985713" fg:w="158434250"/><text x="87.5002%" y="527.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (26,619,548 samples, 0.02%)</title><rect x="87.3700%" y="501" width="0.0242%" height="15" fill="rgb(242,44,2)" fg:x="96156800415" fg:w="26619548"/><text x="87.6200%" y="511.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::ratio&lt;1l, 1l&gt;, long, true, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (58,568,486 samples, 0.05%)</title><rect x="87.4032%" y="517" width="0.0532%" height="15" fill="rgb(216,177,13)" fg:x="96193390273" fg:w="58568486"/><text x="87.6532%" y="527.50"></text></g><g><title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (11,356,325 samples, 0.01%)</title><rect x="87.4461%" y="501" width="0.0103%" height="15" fill="rgb(216,106,43)" fg:x="96240602434" fg:w="11356325"/><text x="87.6961%" y="511.50"></text></g><g><title>std::enable_if&lt;std::chrono::__is_duration&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::value, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::type std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (78,478,247 samples, 0.07%)</title><rect x="87.3942%" y="533" width="0.0713%" height="15" fill="rgb(216,183,2)" fg:x="96183419963" fg:w="78478247"/><text x="87.6442%" y="543.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt; &gt;::operator[] (17,687,327 samples, 0.02%)</title><rect x="87.4751%" y="533" width="0.0161%" height="15" fill="rgb(249,75,3)" fg:x="96272522543" fg:w="17687327"/><text x="87.7251%" y="543.50"></text></g><g><title>std::unordered_map&lt;int, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5], std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;double, std::allocator&lt;double&gt; &gt; [5]&gt; &gt; &gt;::size (14,881,497 samples, 0.01%)</title><rect x="87.4912%" y="533" width="0.0135%" height="15" fill="rgb(219,67,39)" fg:x="96290209870" fg:w="14881497"/><text x="87.7412%" y="543.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::push_back (30,720,978 samples, 0.03%)</title><rect x="87.5145%" y="533" width="0.0279%" height="15" fill="rgb(253,228,2)" fg:x="96315789196" fg:w="30720978"/><text x="87.7645%" y="543.50"></text></g><g><title>[libstdc++.so.6.0.30] (93,929,025,358 samples, 85.35%)</title><rect x="2.2046%" y="645" width="85.3458%" height="15" fill="rgb(235,138,27)" fg:x="2426365476" fg:w="93929025358"/><text x="2.4546%" y="655.50">[libstdc++.so.6.0.30]</text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; &gt; &gt;::_M_run (93,929,025,358 samples, 85.35%)</title><rect x="2.2046%" y="629" width="85.3458%" height="15" fill="rgb(236,97,51)" fg:x="2426365476" fg:w="93929025358"/><text x="2.4546%" y="639.50">std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasuremen..</text></g><g><title>std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; &gt;::operator (93,929,025,358 samples, 85.35%)</title><rect x="2.2046%" y="613" width="85.3458%" height="15" fill="rgb(240,80,30)" fg:x="2426365476" fg:w="93929025358"/><text x="2.4546%" y="623.50">std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; &gt;::operator</text></g><g><title>void std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; &gt;::_M_invoke&lt;0ul, 1ul, 2ul, 3ul, 4ul&gt; (93,929,025,358 samples, 85.35%)</title><rect x="2.2046%" y="597" width="85.3458%" height="15" fill="rgb(230,178,19)" fg:x="2426365476" fg:w="93929025358"/><text x="2.4546%" y="607.50">void std::thread::_Invoker&lt;std::tuple&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; &gt;::_M_invo..</text></g><g><title>std::__invoke_result&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt;::type std::__invoke&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; (93,929,025,358 samples, 85.35%)</title><rect x="2.2046%" y="581" width="85.3458%" height="15" fill="rgb(210,190,27)" fg:x="2426365476" fg:w="93929025358"/><text x="2.4546%" y="591.50">std::__invoke_result&lt;void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt;::type std::__invoke&lt;void (*..</text></g><g><title>void std::__invoke_impl&lt;void, void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt; (93,929,025,358 samples, 85.35%)</title><rect x="2.2046%" y="565" width="85.3458%" height="15" fill="rgb(222,107,31)" fg:x="2426365476" fg:w="93929025358"/><text x="2.4546%" y="575.50">void std::__invoke_impl&lt;void, void (*)(Client*, Workload*, OpMeasurement*, long), Client*, Workload*, OpMeasurement*, long&gt;</text></g><g><title>worker_thread_fn (93,500,891,560 samples, 84.96%)</title><rect x="2.5937%" y="549" width="84.9568%" height="15" fill="rgb(216,127,34)" fg:x="2854499274" fg:w="93500891560"/><text x="2.8437%" y="559.50">worker_thread_fn</text></g><g><title>PoisonAlignedStackMemory (21,669,551 samples, 0.02%)</title><rect x="87.5641%" y="597" width="0.0197%" height="15" fill="rgb(234,116,52)" fg:x="96370454009" fg:w="21669551"/><text x="87.8141%" y="607.50"></text></g><g><title>[unknown] (43,714,471 samples, 0.04%)</title><rect x="87.5838%" y="597" width="0.0397%" height="15" fill="rgb(222,124,15)" fg:x="96392123560" fg:w="43714471"/><text x="87.8338%" y="607.50"></text></g><g><title>[unknown] (43,714,471 samples, 0.04%)</title><rect x="87.5838%" y="581" width="0.0397%" height="15" fill="rgb(231,179,28)" fg:x="96392123560" fg:w="43714471"/><text x="87.8338%" y="591.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (36,376,105 samples, 0.03%)</title><rect x="87.5905%" y="565" width="0.0331%" height="15" fill="rgb(226,93,45)" fg:x="96399461926" fg:w="36376105"/><text x="87.8405%" y="575.50"></text></g><g><title>operator new (19,817,152 samples, 0.02%)</title><rect x="87.6055%" y="549" width="0.0180%" height="15" fill="rgb(215,8,51)" fg:x="96416020879" fg:w="19817152"/><text x="87.8555%" y="559.50"></text></g><g><title>__asan::PoisonShadow (25,336,919 samples, 0.02%)</title><rect x="87.6235%" y="597" width="0.0230%" height="15" fill="rgb(223,106,5)" fg:x="96435838031" fg:w="25336919"/><text x="87.8735%" y="607.50"></text></g><g><title>[unknown] (125,930,581 samples, 0.11%)</title><rect x="87.5641%" y="613" width="0.1144%" height="15" fill="rgb(250,191,5)" fg:x="96370454009" fg:w="125930581"/><text x="87.8141%" y="623.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20,932,668 samples, 0.02%)</title><rect x="87.6595%" y="597" width="0.0190%" height="15" fill="rgb(242,132,44)" fg:x="96475451922" fg:w="20932668"/><text x="87.9095%" y="607.50"></text></g><g><title>__interceptor_memcpy (16,145,938 samples, 0.01%)</title><rect x="87.6903%" y="613" width="0.0147%" height="15" fill="rgb(251,152,29)" fg:x="96509316702" fg:w="16145938"/><text x="87.9403%" y="623.50"></text></g><g><title>__memmove_sse2_unaligned_erms (28,372,550 samples, 0.03%)</title><rect x="87.7105%" y="613" width="0.0258%" height="15" fill="rgb(218,179,5)" fg:x="96531591428" fg:w="28372550"/><text x="87.9605%" y="623.50"></text></g><g><title>__sanitizer::RunFreeHooks (14,181,278 samples, 0.01%)</title><rect x="87.7363%" y="613" width="0.0129%" height="15" fill="rgb(227,67,19)" fg:x="96559963978" fg:w="14181278"/><text x="87.9863%" y="623.50"></text></g><g><title>bool std::has_facet&lt;std::ctype&lt;char&gt; &gt; (23,112,574 samples, 0.02%)</title><rect x="87.7492%" y="613" width="0.0210%" height="15" fill="rgb(233,119,31)" fg:x="96574145256" fg:w="23112574"/><text x="87.9992%" y="623.50"></text></g><g><title>bool std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (21,673,527 samples, 0.02%)</title><rect x="87.7702%" y="613" width="0.0197%" height="15" fill="rgb(241,120,22)" fg:x="96597257830" fg:w="21673527"/><text x="88.0202%" y="623.50"></text></g><g><title>bool std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (28,114,283 samples, 0.03%)</title><rect x="87.7899%" y="613" width="0.0255%" height="15" fill="rgb(224,102,30)" fg:x="96618931357" fg:w="28114283"/><text x="88.0399%" y="623.50"></text></g><g><title>memcpy@GLIBC_2.2.5 (35,660,919 samples, 0.03%)</title><rect x="87.8154%" y="613" width="0.0324%" height="15" fill="rgb(210,164,37)" fg:x="96647045640" fg:w="35660919"/><text x="88.0654%" y="623.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (24,931,272 samples, 0.02%)</title><rect x="87.8560%" y="613" width="0.0227%" height="15" fill="rgb(226,191,16)" fg:x="96691626032" fg:w="24931272"/><text x="88.1060%" y="623.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (32,349,624 samples, 0.03%)</title><rect x="87.8786%" y="613" width="0.0294%" height="15" fill="rgb(214,40,45)" fg:x="96716557304" fg:w="32349624"/><text x="88.1286%" y="623.50"></text></g><g><title>std::ctype&lt;char&gt; const&amp; std::use_facet&lt;std::ctype&lt;char&gt; &gt; (93,467,406 samples, 0.08%)</title><rect x="87.9080%" y="613" width="0.0849%" height="15" fill="rgb(244,29,26)" fg:x="96748906928" fg:w="93467406"/><text x="88.1580%" y="623.50"></text></g><g><title>std::ios_base::_M_init (15,354,236 samples, 0.01%)</title><rect x="87.9929%" y="613" width="0.0140%" height="15" fill="rgb(216,16,5)" fg:x="96842374334" fg:w="15354236"/><text x="88.2429%" y="623.50"></text></g><g><title>std::locale::id::_M_id (26,416,414 samples, 0.02%)</title><rect x="88.0069%" y="613" width="0.0240%" height="15" fill="rgb(249,76,35)" fg:x="96857728570" fg:w="26416414"/><text x="88.2569%" y="623.50"></text></g><g><title>std::locale::locale (12,036,946 samples, 0.01%)</title><rect x="88.0309%" y="613" width="0.0109%" height="15" fill="rgb(207,11,44)" fg:x="96884144984" fg:w="12036946"/><text x="88.2809%" y="623.50"></text></g><g><title>std::locale::operator= (49,549,342 samples, 0.05%)</title><rect x="88.0418%" y="613" width="0.0450%" height="15" fill="rgb(228,190,49)" fg:x="96896181930" fg:w="49549342"/><text x="88.2918%" y="623.50"></text></g><g><title>std::locale::~locale (38,497,118 samples, 0.03%)</title><rect x="88.0868%" y="613" width="0.0350%" height="15" fill="rgb(214,173,12)" fg:x="96945731272" fg:w="38497118"/><text x="88.3368%" y="623.50"></text></g><g><title>std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (32,076,280 samples, 0.03%)</title><rect x="88.1218%" y="613" width="0.0291%" height="15" fill="rgb(218,26,35)" fg:x="96984228390" fg:w="32076280"/><text x="88.3718%" y="623.50"></text></g><g><title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; const&amp; std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (53,460,141 samples, 0.05%)</title><rect x="88.1510%" y="613" width="0.0486%" height="15" fill="rgb(220,200,19)" fg:x="97016304670" fg:w="53460141"/><text x="88.4010%" y="623.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (60,573,215 samples, 0.06%)</title><rect x="88.2810%" y="597" width="0.0550%" height="15" fill="rgb(239,95,49)" fg:x="97159444584" fg:w="60573215"/><text x="88.5310%" y="607.50"></text></g><g><title>__asan_region_is_poisoned (88,530,779 samples, 0.08%)</title><rect x="88.3388%" y="597" width="0.0804%" height="15" fill="rgb(235,85,53)" fg:x="97223079194" fg:w="88530779"/><text x="88.5888%" y="607.50"></text></g><g><title>__interceptor_memcpy (49,599,114 samples, 0.05%)</title><rect x="88.4281%" y="597" width="0.0451%" height="15" fill="rgb(233,133,31)" fg:x="97321342776" fg:w="49599114"/><text x="88.6781%" y="607.50"></text></g><g><title>__sanitizer::mem_is_zero (49,247,384 samples, 0.04%)</title><rect x="88.4840%" y="597" width="0.0447%" height="15" fill="rgb(218,25,20)" fg:x="97382839960" fg:w="49247384"/><text x="88.7340%" y="607.50"></text></g><g><title>[unknown] (1,079,877,807 samples, 0.98%)</title><rect x="87.5641%" y="629" width="0.9812%" height="15" fill="rgb(252,210,38)" fg:x="96370454009" fg:w="1079877807"/><text x="87.8141%" y="639.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (380,567,005 samples, 0.35%)</title><rect x="88.1995%" y="613" width="0.3458%" height="15" fill="rgb(242,134,21)" fg:x="97069764811" fg:w="380567005"/><text x="88.4495%" y="623.50"></text></g><g><title>operator new (18,244,472 samples, 0.02%)</title><rect x="88.5288%" y="597" width="0.0166%" height="15" fill="rgb(213,28,48)" fg:x="97432087344" fg:w="18244472"/><text x="88.7788%" y="607.50"></text></g><g><title>__GI_____strtoll_l_internal (82,578,222 samples, 0.08%)</title><rect x="88.5454%" y="629" width="0.0750%" height="15" fill="rgb(250,196,2)" fg:x="97450403428" fg:w="82578222"/><text x="88.7954%" y="639.50"></text></g><g><title>__GI_strtoll (32,231,935 samples, 0.03%)</title><rect x="88.6205%" y="629" width="0.0293%" height="15" fill="rgb(227,5,17)" fg:x="97533082353" fg:w="32231935"/><text x="88.8705%" y="639.50"></text></g><g><title>__asan::Allocator::Allocate (1,196,147,852 samples, 1.09%)</title><rect x="88.6498%" y="629" width="1.0868%" height="15" fill="rgb(221,226,24)" fg:x="97565314288" fg:w="1196147852"/><text x="88.8998%" y="639.50"></text></g><g><title>__asan::Allocator::Deallocate (180,890,588 samples, 0.16%)</title><rect x="89.7366%" y="629" width="0.1644%" height="15" fill="rgb(211,5,48)" fg:x="98761462140" fg:w="180890588"/><text x="89.9866%" y="639.50"></text></g><g><title>__asan::Allocator::QuarantineChunk (189,174,819 samples, 0.17%)</title><rect x="89.9010%" y="629" width="0.1719%" height="15" fill="rgb(219,150,6)" fg:x="98942352728" fg:w="189174819"/><text x="90.1510%" y="639.50"></text></g><g><title>__asan::AsanTSDGet (42,665,239 samples, 0.04%)</title><rect x="90.0729%" y="629" width="0.0388%" height="15" fill="rgb(251,46,16)" fg:x="99131527547" fg:w="42665239"/><text x="90.3229%" y="639.50"></text></g><g><title>__asan::CanPoisonMemory (20,041,162 samples, 0.02%)</title><rect x="90.1117%" y="629" width="0.0182%" height="15" fill="rgb(220,204,40)" fg:x="99174192786" fg:w="20041162"/><text x="90.3617%" y="639.50"></text></g><g><title>__asan::GetCurrentThread (78,765,062 samples, 0.07%)</title><rect x="90.1299%" y="629" width="0.0716%" height="15" fill="rgb(211,85,2)" fg:x="99194233948" fg:w="78765062"/><text x="90.3799%" y="639.50"></text></g><g><title>__asan::GetCurrentThreadStats (59,343,747 samples, 0.05%)</title><rect x="90.2014%" y="629" width="0.0539%" height="15" fill="rgb(229,17,7)" fg:x="99272999010" fg:w="59343747"/><text x="90.4514%" y="639.50"></text></g><g><title>__asan::PoisonShadow (171,126,964 samples, 0.16%)</title><rect x="90.2554%" y="629" width="0.1555%" height="15" fill="rgb(239,72,28)" fg:x="99332342757" fg:w="171126964"/><text x="90.5054%" y="639.50"></text></g><g><title>__interceptor_strlen (31,146,118 samples, 0.03%)</title><rect x="90.4109%" y="629" width="0.0283%" height="15" fill="rgb(230,47,54)" fg:x="99503469721" fg:w="31146118"/><text x="90.6609%" y="639.50"></text></g><g><title>StrtolFixAndCheck (52,806,028 samples, 0.05%)</title><rect x="90.4735%" y="613" width="0.0480%" height="15" fill="rgb(214,50,8)" fg:x="99572423968" fg:w="52806028"/><text x="90.7235%" y="623.50"></text></g><g><title>__interceptor_strtol (115,199,393 samples, 0.10%)</title><rect x="90.4413%" y="629" width="0.1047%" height="15" fill="rgb(216,198,43)" fg:x="99536977949" fg:w="115199393"/><text x="90.6913%" y="639.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (26,947,346 samples, 0.02%)</title><rect x="90.5215%" y="613" width="0.0245%" height="15" fill="rgb(234,20,35)" fg:x="99625229996" fg:w="26947346"/><text x="90.7715%" y="623.50"></text></g><g><title>__lsan::DisabledInThisThread (65,362,446 samples, 0.06%)</title><rect x="90.5460%" y="629" width="0.0594%" height="15" fill="rgb(254,45,19)" fg:x="99652177342" fg:w="65362446"/><text x="90.7960%" y="639.50"></text></g><g><title>__memset_avx2_unaligned (81,348,487 samples, 0.07%)</title><rect x="90.6054%" y="629" width="0.0739%" height="15" fill="rgb(219,14,44)" fg:x="99717539788" fg:w="81348487"/><text x="90.8554%" y="639.50"></text></g><g><title>__memset_avx2_unaligned_erms (136,893,670 samples, 0.12%)</title><rect x="90.6793%" y="629" width="0.1244%" height="15" fill="rgb(217,220,26)" fg:x="99798888275" fg:w="136893670"/><text x="90.9293%" y="639.50"></text></g><g><title>__sanitizer::BlockingMutex::Lock (13,234,437 samples, 0.01%)</title><rect x="90.8037%" y="629" width="0.0120%" height="15" fill="rgb(213,158,28)" fg:x="99935781945" fg:w="13234437"/><text x="91.0537%" y="639.50"></text></g><g><title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (188,091,446 samples, 0.17%)</title><rect x="90.8212%" y="629" width="0.1709%" height="15" fill="rgb(252,51,52)" fg:x="99955106376" fg:w="188091446"/><text x="91.0712%" y="639.50"></text></g><g><title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Deallocate (29,682,622 samples, 0.03%)</title><rect x="90.9921%" y="629" width="0.0270%" height="15" fill="rgb(246,89,16)" fg:x="100143197822" fg:w="29682622"/><text x="91.2421%" y="639.50"></text></g><g><title>__sanitizer::RunFreeHooks (67,749,703 samples, 0.06%)</title><rect x="91.0205%" y="629" width="0.0616%" height="15" fill="rgb(216,158,49)" fg:x="100174478339" fg:w="67749703"/><text x="91.2705%" y="639.50"></text></g><g><title>__sanitizer::RunMallocHooks (62,218,066 samples, 0.06%)</title><rect x="91.0821%" y="629" width="0.0565%" height="15" fill="rgb(236,107,19)" fg:x="100242228042" fg:w="62218066"/><text x="91.3321%" y="639.50"></text></g><g><title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::GetFromAllocator (34,235,974 samples, 0.03%)</title><rect x="91.1386%" y="629" width="0.0311%" height="15" fill="rgb(228,185,30)" fg:x="100304446108" fg:w="34235974"/><text x="91.3886%" y="639.50"></text></g><g><title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::ReturnToAllocator (29,594,358 samples, 0.03%)</title><rect x="91.1705%" y="629" width="0.0269%" height="15" fill="rgb(246,134,8)" fg:x="100339481823" fg:w="29594358"/><text x="91.4205%" y="639.50"></text></g><g><title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (50,653,844 samples, 0.05%)</title><rect x="91.2008%" y="629" width="0.0460%" height="15" fill="rgb(214,143,50)" fg:x="100372905472" fg:w="50653844"/><text x="91.4508%" y="639.50"></text></g><g><title>__sanitizer::StackDepotPut (43,084,388 samples, 0.04%)</title><rect x="91.2469%" y="629" width="0.0391%" height="15" fill="rgb(228,75,8)" fg:x="100423559316" fg:w="43084388"/><text x="91.4969%" y="639.50"></text></g><g><title>__strpbrk_sse42 (64,892,225 samples, 0.06%)</title><rect x="91.2860%" y="629" width="0.0590%" height="15" fill="rgb(207,175,4)" fg:x="100466643704" fg:w="64892225"/><text x="91.5360%" y="639.50"></text></g><g><title>__asan::PoisonShadow (64,892,225 samples, 0.06%)</title><rect x="91.2860%" y="613" width="0.0590%" height="15" fill="rgb(205,108,24)" fg:x="100466643704" fg:w="64892225"/><text x="91.5360%" y="623.50"></text></g><g><title>pthread_getspecific@@GLIBC_2.34 (100,239,873 samples, 0.09%)</title><rect x="91.3551%" y="629" width="0.0911%" height="15" fill="rgb(244,120,49)" fg:x="100542702755" fg:w="100239873"/><text x="91.6051%" y="639.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (67,281,777 samples, 0.06%)</title><rect x="91.4560%" y="613" width="0.0611%" height="15" fill="rgb(223,47,38)" fg:x="100653734497" fg:w="67281777"/><text x="91.7060%" y="623.50"></text></g><g><title>__interceptor_strlen.part.0 (18,810,862 samples, 0.02%)</title><rect x="91.5171%" y="613" width="0.0171%" height="15" fill="rgb(229,179,11)" fg:x="100721016274" fg:w="18810862"/><text x="91.7671%" y="623.50"></text></g><g><title>__strlen_avx2 (29,022,065 samples, 0.03%)</title><rect x="91.5342%" y="613" width="0.0264%" height="15" fill="rgb(231,122,1)" fg:x="100739827136" fg:w="29022065"/><text x="91.7842%" y="623.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (116,613,492 samples, 0.11%)</title><rect x="91.4553%" y="629" width="0.1060%" height="15" fill="rgb(245,119,9)" fg:x="100652987244" fg:w="116613492"/><text x="91.7053%" y="639.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (23,552,498 samples, 0.02%)</title><rect x="91.5613%" y="629" width="0.0214%" height="15" fill="rgb(241,163,25)" fg:x="100769600736" fg:w="23552498"/><text x="91.8113%" y="639.50"></text></g><g><title>__interceptor_memchr (17,769,191 samples, 0.02%)</title><rect x="91.5827%" y="597" width="0.0161%" height="15" fill="rgb(217,214,3)" fg:x="100793153234" fg:w="17769191"/><text x="91.8327%" y="607.50"></text></g><g><title>__interceptor_memchr.part.0 (18,445,657 samples, 0.02%)</title><rect x="91.5988%" y="597" width="0.0168%" height="15" fill="rgb(240,86,28)" fg:x="100810922425" fg:w="18445657"/><text x="91.8488%" y="607.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (41,622,322 samples, 0.04%)</title><rect x="91.6183%" y="597" width="0.0378%" height="15" fill="rgb(215,47,9)" fg:x="100832319379" fg:w="41622322"/><text x="91.8683%" y="607.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::underflow (68,076,115 samples, 0.06%)</title><rect x="91.6561%" y="597" width="0.0619%" height="15" fill="rgb(252,25,45)" fg:x="100873941701" fg:w="68076115"/><text x="91.9061%" y="607.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear (34,588,351 samples, 0.03%)</title><rect x="91.7214%" y="597" width="0.0314%" height="15" fill="rgb(251,164,9)" fg:x="100945871353" fg:w="34588351"/><text x="91.9714%" y="607.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (16,811,095 samples, 0.02%)</title><rect x="91.8938%" y="581" width="0.0153%" height="15" fill="rgb(233,194,0)" fg:x="101135524302" fg:w="16811095"/><text x="92.1438%" y="591.50"></text></g><g><title>__asan_region_is_poisoned (18,860,891 samples, 0.02%)</title><rect x="91.9090%" y="581" width="0.0171%" height="15" fill="rgb(249,111,24)" fg:x="101152335397" fg:w="18860891"/><text x="92.1590%" y="591.50"></text></g><g><title>__interceptor_memchr.part.0 (50,373,640 samples, 0.05%)</title><rect x="91.9324%" y="581" width="0.0458%" height="15" fill="rgb(250,223,3)" fg:x="101178038074" fg:w="50373640"/><text x="92.1824%" y="591.50"></text></g><g><title>__memchr_avx2 (110,778,945 samples, 0.10%)</title><rect x="91.9782%" y="581" width="0.1007%" height="15" fill="rgb(236,178,37)" fg:x="101228411714" fg:w="110778945"/><text x="92.2282%" y="591.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (368,330,305 samples, 0.33%)</title><rect x="91.7536%" y="597" width="0.3347%" height="15" fill="rgb(241,158,50)" fg:x="100981253283" fg:w="368330305"/><text x="92.0036%" y="607.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (559,414,617 samples, 0.51%)</title><rect x="91.5827%" y="629" width="0.5083%" height="15" fill="rgb(213,121,41)" fg:x="100793153234" fg:w="559414617"/><text x="91.8327%" y="639.50"></text></g><g><title>[unknown] (559,414,617 samples, 0.51%)</title><rect x="91.5827%" y="613" width="0.5083%" height="15" fill="rgb(240,92,3)" fg:x="100793153234" fg:w="559414617"/><text x="91.8327%" y="623.50"></text></g><g><title>std::istream::sentry::sentry (62,376,942 samples, 0.06%)</title><rect x="92.0910%" y="629" width="0.0567%" height="15" fill="rgb(205,123,3)" fg:x="101352567851" fg:w="62376942"/><text x="92.3410%" y="639.50"></text></g><g><title>std::locale::operator= (22,811,087 samples, 0.02%)</title><rect x="92.1477%" y="629" width="0.0207%" height="15" fill="rgb(205,97,47)" fg:x="101414944793" fg:w="22811087"/><text x="92.3977%" y="639.50"></text></g><g><title>virtual thunk to std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (37,993,967 samples, 0.03%)</title><rect x="92.1761%" y="629" width="0.0345%" height="15" fill="rgb(247,152,14)" fg:x="101446235198" fg:w="37993967"/><text x="92.4261%" y="639.50"></text></g><g><title>[unknown] (37,993,967 samples, 0.03%)</title><rect x="92.1761%" y="613" width="0.0345%" height="15" fill="rgb(248,195,53)" fg:x="101446235198" fg:w="37993967"/><text x="92.4261%" y="623.50"></text></g><g><title>[unknown] (5,132,773,387 samples, 4.66%)</title><rect x="87.5504%" y="645" width="4.6637%" height="15" fill="rgb(226,201,16)" fg:x="96355390834" fg:w="5132773387"/><text x="87.8004%" y="655.50">[unkn..</text></g><g><title>__GI_____strtoll_l_internal (123,128,792 samples, 0.11%)</title><rect x="92.2142%" y="645" width="0.1119%" height="15" fill="rgb(205,98,0)" fg:x="101488164221" fg:w="123128792"/><text x="92.4642%" y="655.50"></text></g><g><title>__asan::Allocator::Allocate (1,500,169,590 samples, 1.36%)</title><rect x="92.3261%" y="645" width="1.3631%" height="15" fill="rgb(214,191,48)" fg:x="101611293013" fg:w="1500169590"/><text x="92.5761%" y="655.50"></text></g><g><title>__asan::AsanTSDGet (153,191,841 samples, 0.14%)</title><rect x="93.6891%" y="645" width="0.1392%" height="15" fill="rgb(237,112,39)" fg:x="103111462603" fg:w="153191841"/><text x="93.9391%" y="655.50"></text></g><g><title>__asan::AsanThread::stack_bottom (73,143,414 samples, 0.07%)</title><rect x="93.8283%" y="645" width="0.0665%" height="15" fill="rgb(247,203,27)" fg:x="103264654444" fg:w="73143414"/><text x="94.0783%" y="655.50"></text></g><g><title>__asan::AsanThread::stack_top (77,980,822 samples, 0.07%)</title><rect x="93.8948%" y="645" width="0.0709%" height="15" fill="rgb(235,124,28)" fg:x="103337797858" fg:w="77980822"/><text x="94.1448%" y="655.50"></text></g><g><title>__asan::GetCurrentThread (115,539,778 samples, 0.10%)</title><rect x="93.9657%" y="645" width="0.1050%" height="15" fill="rgb(208,207,46)" fg:x="103415778680" fg:w="115539778"/><text x="94.2157%" y="655.50"></text></g><g><title>__asan::PoisonShadow (26,711,836 samples, 0.02%)</title><rect x="94.0770%" y="645" width="0.0243%" height="15" fill="rgb(234,176,4)" fg:x="103538375190" fg:w="26711836"/><text x="94.3270%" y="655.50"></text></g><g><title>__asan::RZSize2Log (103,992,246 samples, 0.09%)</title><rect x="94.1013%" y="645" width="0.0945%" height="15" fill="rgb(230,133,28)" fg:x="103565087026" fg:w="103992246"/><text x="94.3513%" y="655.50"></text></g><g><title>__asan::asan_memalign (19,706,364 samples, 0.02%)</title><rect x="94.1958%" y="645" width="0.0179%" height="15" fill="rgb(211,137,40)" fg:x="103669079272" fg:w="19706364"/><text x="94.4458%" y="655.50"></text></g><g><title>__interceptor_memcpy (35,616,453 samples, 0.03%)</title><rect x="94.2157%" y="645" width="0.0324%" height="15" fill="rgb(254,35,13)" fg:x="103690988413" fg:w="35616453"/><text x="94.4657%" y="655.50"></text></g><g><title>__memmove_sse2_unaligned_erms (57,660,937 samples, 0.05%)</title><rect x="94.2481%" y="645" width="0.0524%" height="15" fill="rgb(225,49,51)" fg:x="103726604866" fg:w="57660937"/><text x="94.4981%" y="655.50"></text></g><g><title>__memset_avx2_unaligned (43,770,521 samples, 0.04%)</title><rect x="94.3005%" y="645" width="0.0398%" height="15" fill="rgb(251,10,15)" fg:x="103784265803" fg:w="43770521"/><text x="94.5505%" y="655.50"></text></g><g><title>__memset_avx2_unaligned_erms (26,733,910 samples, 0.02%)</title><rect x="94.3402%" y="645" width="0.0243%" height="15" fill="rgb(228,207,15)" fg:x="103828036324" fg:w="26733910"/><text x="94.5902%" y="655.50"></text></g><g><title>__sanitizer::BufferedStackTrace::Unwind (46,221,943 samples, 0.04%)</title><rect x="94.3653%" y="645" width="0.0420%" height="15" fill="rgb(241,99,19)" fg:x="103855567263" fg:w="46221943"/><text x="94.6153%" y="655.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindFast (621,383,242 samples, 0.56%)</title><rect x="94.4073%" y="645" width="0.5646%" height="15" fill="rgb(207,104,49)" fg:x="103901789206" fg:w="621383242"/><text x="94.6573%" y="655.50"></text></g><g><title>__sanitizer::BufferedStackTrace::UnwindImpl (82,344,511 samples, 0.07%)</title><rect x="94.9719%" y="645" width="0.0748%" height="15" fill="rgb(234,99,18)" fg:x="104523172448" fg:w="82344511"/><text x="95.2219%" y="655.50"></text></g><g><title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (46,584,105 samples, 0.04%)</title><rect x="95.0467%" y="645" width="0.0423%" height="15" fill="rgb(213,191,49)" fg:x="104605516959" fg:w="46584105"/><text x="95.2967%" y="655.50"></text></g><g><title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Deallocate (16,542,186 samples, 0.02%)</title><rect x="95.0890%" y="645" width="0.0150%" height="15" fill="rgb(210,226,19)" fg:x="104652101064" fg:w="16542186"/><text x="95.3390%" y="655.50"></text></g><g><title>__sanitizer::Quarantine&lt;__asan::QuarantineCallback, __asan::AsanChunk&gt;::DoRecycle (1,117,939,534 samples, 1.02%)</title><rect x="95.1040%" y="645" width="1.0158%" height="15" fill="rgb(229,97,18)" fg:x="104668643250" fg:w="1117939534"/><text x="95.3540%" y="655.50"></text></g><g><title>__sanitizer::RunMallocHooks (33,819,945 samples, 0.03%)</title><rect x="96.1239%" y="645" width="0.0307%" height="15" fill="rgb(211,167,15)" fg:x="105791111078" fg:w="33819945"/><text x="96.3739%" y="655.50"></text></g><g><title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (666,576,218 samples, 0.61%)</title><rect x="96.1561%" y="645" width="0.6057%" height="15" fill="rgb(210,169,34)" fg:x="105826491580" fg:w="666576218"/><text x="96.4061%" y="655.50"></text></g><g><title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::find (245,770,118 samples, 0.22%)</title><rect x="96.7617%" y="645" width="0.2233%" height="15" fill="rgb(241,121,31)" fg:x="106493067798" fg:w="245770118"/><text x="97.0117%" y="655.50"></text></g><g><title>memcpy@plt (32,839,374 samples, 0.03%)</title><rect x="96.9980%" y="645" width="0.0298%" height="15" fill="rgb(232,40,11)" fg:x="106753129095" fg:w="32839374"/><text x="97.2480%" y="655.50"></text></g><g><title>operator delete (18,186,984 samples, 0.02%)</title><rect x="97.0279%" y="645" width="0.0165%" height="15" fill="rgb(205,86,26)" fg:x="106785968469" fg:w="18186984"/><text x="97.2779%" y="655.50"></text></g><g><title>operator new (17,531,015 samples, 0.02%)</title><rect x="97.0444%" y="645" width="0.0159%" height="15" fill="rgb(231,126,28)" fg:x="106804155453" fg:w="17531015"/><text x="97.2944%" y="655.50"></text></g><g><title>pthread_getspecific@@GLIBC_2.34 (203,858,928 samples, 0.19%)</title><rect x="97.0603%" y="645" width="0.1852%" height="15" fill="rgb(219,221,18)" fg:x="106821686468" fg:w="203858928"/><text x="97.3103%" y="655.50"></text></g><g><title>__asan_region_is_poisoned (28,496,814 samples, 0.03%)</title><rect x="97.2836%" y="629" width="0.0259%" height="15" fill="rgb(211,40,0)" fg:x="107067366150" fg:w="28496814"/><text x="97.5336%" y="639.50"></text></g><g><title>__interceptor_memcpy (16,039,953 samples, 0.01%)</title><rect x="97.3115%" y="629" width="0.0146%" height="15" fill="rgb(239,85,43)" fg:x="107098152202" fg:w="16039953"/><text x="97.5615%" y="639.50"></text></g><g><title>__sanitizer::mem_is_zero (49,220,738 samples, 0.04%)</title><rect x="97.3306%" y="629" width="0.0447%" height="15" fill="rgb(231,55,21)" fg:x="107119118016" fg:w="49220738"/><text x="97.5806%" y="639.50"></text></g><g><title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (157,095,798 samples, 0.14%)</title><rect x="97.2456%" y="645" width="0.1427%" height="15" fill="rgb(225,184,43)" fg:x="107025545396" fg:w="157095798"/><text x="97.4956%" y="655.50"></text></g><g><title>operator new (14,302,440 samples, 0.01%)</title><rect x="97.3753%" y="629" width="0.0130%" height="15" fill="rgb(251,158,41)" fg:x="107168338754" fg:w="14302440"/><text x="97.6253%" y="639.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (69,968,291 samples, 0.06%)</title><rect x="97.4644%" y="629" width="0.0636%" height="15" fill="rgb(234,159,37)" fg:x="107266444752" fg:w="69968291"/><text x="97.7144%" y="639.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (193,326,330 samples, 0.18%)</title><rect x="97.3883%" y="645" width="0.1757%" height="15" fill="rgb(216,204,22)" fg:x="107182641194" fg:w="193326330"/><text x="97.6383%" y="655.50"></text></g><g><title>__interceptor_memcpy (39,554,481 samples, 0.04%)</title><rect x="97.5280%" y="629" width="0.0359%" height="15" fill="rgb(214,17,3)" fg:x="107336413043" fg:w="39554481"/><text x="97.7780%" y="639.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (60,198,389 samples, 0.05%)</title><rect x="97.5640%" y="645" width="0.0547%" height="15" fill="rgb(212,111,17)" fg:x="107375967524" fg:w="60198389"/><text x="97.8140%" y="655.50"></text></g><g><title>__asan::QuickCheckForUnpoisonedRegion (40,861,439 samples, 0.04%)</title><rect x="97.7755%" y="629" width="0.0371%" height="15" fill="rgb(221,157,24)" fg:x="107608823506" fg:w="40861439"/><text x="98.0255%" y="639.50"></text></g><g><title>__asan_region_is_poisoned (65,118,629 samples, 0.06%)</title><rect x="97.8235%" y="629" width="0.0592%" height="15" fill="rgb(252,16,13)" fg:x="107661594367" fg:w="65118629"/><text x="98.0735%" y="639.50"></text></g><g><title>__interceptor_memcpy (50,969,662 samples, 0.05%)</title><rect x="97.8841%" y="629" width="0.0463%" height="15" fill="rgb(221,62,2)" fg:x="107728259687" fg:w="50969662"/><text x="98.1341%" y="639.50"></text></g><g><title>__sanitizer::mem_is_zero (55,656,069 samples, 0.05%)</title><rect x="97.9421%" y="629" width="0.0506%" height="15" fill="rgb(247,87,22)" fg:x="107792099207" fg:w="55656069"/><text x="98.1921%" y="639.50"></text></g><g><title>operator delete (12,288,959 samples, 0.01%)</title><rect x="97.9939%" y="629" width="0.0112%" height="15" fill="rgb(215,73,9)" fg:x="107849184050" fg:w="12288959"/><text x="98.2439%" y="639.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (449,788,325 samples, 0.41%)</title><rect x="97.6187%" y="645" width="0.4087%" height="15" fill="rgb(207,175,33)" fg:x="107436165913" fg:w="449788325"/><text x="97.8687%" y="655.50"></text></g><g><title>operator new (24,481,229 samples, 0.02%)</title><rect x="98.0051%" y="629" width="0.0222%" height="15" fill="rgb(243,129,54)" fg:x="107861473009" fg:w="24481229"/><text x="98.2551%" y="639.50"></text></g><g><title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (39,992,241 samples, 0.04%)</title><rect x="98.0273%" y="645" width="0.0363%" height="15" fill="rgb(227,119,45)" fg:x="107885954238" fg:w="39992241"/><text x="98.2773%" y="655.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (32,900,683 samples, 0.03%)</title><rect x="98.0637%" y="645" width="0.0299%" height="15" fill="rgb(205,109,36)" fg:x="107925946479" fg:w="32900683"/><text x="98.3137%" y="655.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (16,573,718 samples, 0.02%)</title><rect x="98.1019%" y="645" width="0.0151%" height="15" fill="rgb(205,6,39)" fg:x="107967990635" fg:w="16573718"/><text x="98.3519%" y="655.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (43,014,176 samples, 0.04%)</title><rect x="98.1169%" y="645" width="0.0391%" height="15" fill="rgb(221,32,16)" fg:x="107984564353" fg:w="43014176"/><text x="98.3669%" y="655.50"></text></g><g><title>std::ios_base::_M_init (29,066,439 samples, 0.03%)</title><rect x="98.1560%" y="645" width="0.0264%" height="15" fill="rgb(228,144,50)" fg:x="108027578529" fg:w="29066439"/><text x="98.4060%" y="655.50"></text></g><g><title>std::istream::sentry::sentry (38,435,222 samples, 0.03%)</title><rect x="98.1824%" y="645" width="0.0349%" height="15" fill="rgb(229,201,53)" fg:x="108056644968" fg:w="38435222"/><text x="98.4324%" y="655.50"></text></g><g><title>run_io_trace (105,669,385,576 samples, 96.01%)</title><rect x="2.2046%" y="661" width="96.0133%" height="15" fill="rgb(249,153,27)" fg:x="2426365476" fg:w="105669385576"/><text x="2.4546%" y="671.50">run_io_trace</text></g><g><title>__GI___getdents64 (13,139,083 samples, 0.01%)</title><rect x="98.2317%" y="629" width="0.0119%" height="15" fill="rgb(227,106,25)" fg:x="108110846114" fg:w="13139083"/><text x="98.4817%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (13,139,083 samples, 0.01%)</title><rect x="98.2317%" y="613" width="0.0119%" height="15" fill="rgb(230,65,29)" fg:x="108110846114" fg:w="13139083"/><text x="98.4817%" y="623.50"></text></g><g><title>do_syscall_64 (13,139,083 samples, 0.01%)</title><rect x="98.2317%" y="597" width="0.0119%" height="15" fill="rgb(221,57,46)" fg:x="108110846114" fg:w="13139083"/><text x="98.4817%" y="607.50"></text></g><g><title>__x64_sys_getdents64 (13,139,083 samples, 0.01%)</title><rect x="98.2317%" y="581" width="0.0119%" height="15" fill="rgb(229,161,17)" fg:x="108110846114" fg:w="13139083"/><text x="98.4817%" y="591.50"></text></g><g><title>__se_sys_getdents64 (13,139,083 samples, 0.01%)</title><rect x="98.2317%" y="565" width="0.0119%" height="15" fill="rgb(222,213,11)" fg:x="108110846114" fg:w="13139083"/><text x="98.4817%" y="575.50"></text></g><g><title>iterate_dir (13,139,083 samples, 0.01%)</title><rect x="98.2317%" y="549" width="0.0119%" height="15" fill="rgb(235,35,13)" fg:x="108110846114" fg:w="13139083"/><text x="98.4817%" y="559.50"></text></g><g><title>do_filp_open (15,067,054 samples, 0.01%)</title><rect x="98.2469%" y="549" width="0.0137%" height="15" fill="rgb(233,158,34)" fg:x="108127547641" fg:w="15067054"/><text x="98.4969%" y="559.50"></text></g><g><title>path_openat (15,067,054 samples, 0.01%)</title><rect x="98.2469%" y="533" width="0.0137%" height="15" fill="rgb(215,151,48)" fg:x="108127547641" fg:w="15067054"/><text x="98.4969%" y="543.50"></text></g><g><title>__x64_sys_openat (17,834,738 samples, 0.02%)</title><rect x="98.2462%" y="581" width="0.0162%" height="15" fill="rgb(229,84,14)" fg:x="108126810938" fg:w="17834738"/><text x="98.4962%" y="591.50"></text></g><g><title>do_sys_openat2 (17,834,738 samples, 0.02%)</title><rect x="98.2462%" y="565" width="0.0162%" height="15" fill="rgb(229,68,14)" fg:x="108126810938" fg:w="17834738"/><text x="98.4962%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (24,579,599 samples, 0.02%)</title><rect x="98.2462%" y="613" width="0.0223%" height="15" fill="rgb(243,106,26)" fg:x="108126810938" fg:w="24579599"/><text x="98.4962%" y="623.50"></text></g><g><title>do_syscall_64 (24,579,599 samples, 0.02%)</title><rect x="98.2462%" y="597" width="0.0223%" height="15" fill="rgb(206,45,38)" fg:x="108126810938" fg:w="24579599"/><text x="98.4962%" y="607.50"></text></g><g><title>__open64_nocancel (25,241,503 samples, 0.02%)</title><rect x="98.2462%" y="629" width="0.0229%" height="15" fill="rgb(226,6,15)" fg:x="108126810938" fg:w="25241503"/><text x="98.4962%" y="639.50"></text></g><g><title>[unknown] (52,912,396 samples, 0.05%)</title><rect x="98.2259%" y="645" width="0.0481%" height="15" fill="rgb(232,22,54)" fg:x="108104486278" fg:w="52912396"/><text x="98.4759%" y="655.50"></text></g><g><title>sh (74,773,101 samples, 0.07%)</title><rect x="98.2252%" y="661" width="0.0679%" height="15" fill="rgb(229,222,32)" fg:x="108103694481" fg:w="74773101"/><text x="98.4752%" y="671.50"></text></g><g><title>sshd (14,822,326 samples, 0.01%)</title><rect x="98.2973%" y="661" width="0.0135%" height="15" fill="rgb(228,62,29)" fg:x="108183015260" fg:w="14822326"/><text x="98.5473%" y="671.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (63,029,176 samples, 0.06%)</title><rect x="98.3320%" y="565" width="0.0573%" height="15" fill="rgb(251,103,34)" fg:x="108221216121" fg:w="63029176"/><text x="98.5820%" y="575.50"></text></g><g><title>asm_sysvec_call_function_single (90,380,299 samples, 0.08%)</title><rect x="98.3892%" y="565" width="0.0821%" height="15" fill="rgb(233,12,30)" fg:x="108284245297" fg:w="90380299"/><text x="98.6392%" y="575.50"></text></g><g><title>acpi_processor_ffh_cstate_enter (22,589,134 samples, 0.02%)</title><rect x="98.4825%" y="517" width="0.0205%" height="15" fill="rgb(238,52,0)" fg:x="108386884290" fg:w="22589134"/><text x="98.7325%" y="527.50"></text></g><g><title>acpi_idle_do_entry (36,332,646 samples, 0.03%)</title><rect x="98.4825%" y="533" width="0.0330%" height="15" fill="rgb(223,98,5)" fg:x="108386884290" fg:w="36332646"/><text x="98.7325%" y="543.50"></text></g><g><title>io_idle (13,743,512 samples, 0.01%)</title><rect x="98.5030%" y="517" width="0.0125%" height="15" fill="rgb(228,75,37)" fg:x="108409473424" fg:w="13743512"/><text x="98.7530%" y="527.50"></text></g><g><title>acpi_idle_enter (37,634,851 samples, 0.03%)</title><rect x="98.4815%" y="549" width="0.0342%" height="15" fill="rgb(205,115,49)" fg:x="108385732754" fg:w="37634851"/><text x="98.7315%" y="559.50"></text></g><g><title>__common_interrupt (13,562,886 samples, 0.01%)</title><rect x="98.5165%" y="517" width="0.0123%" height="15" fill="rgb(250,154,43)" fg:x="108424279140" fg:w="13562886"/><text x="98.7665%" y="527.50"></text></g><g><title>handle_edge_irq (13,562,886 samples, 0.01%)</title><rect x="98.5165%" y="501" width="0.0123%" height="15" fill="rgb(226,43,29)" fg:x="108424279140" fg:w="13562886"/><text x="98.7665%" y="511.50"></text></g><g><title>handle_irq_event (12,458,150 samples, 0.01%)</title><rect x="98.5175%" y="485" width="0.0113%" height="15" fill="rgb(249,228,39)" fg:x="108425383876" fg:w="12458150"/><text x="98.7675%" y="495.50"></text></g><g><title>irq_enter_rcu (19,887,725 samples, 0.02%)</title><rect x="98.5288%" y="517" width="0.0181%" height="15" fill="rgb(216,79,43)" fg:x="108437842026" fg:w="19887725"/><text x="98.7788%" y="527.50"></text></g><g><title>tick_irq_enter (16,713,534 samples, 0.02%)</title><rect x="98.5317%" y="501" width="0.0152%" height="15" fill="rgb(228,95,12)" fg:x="108441016217" fg:w="16713534"/><text x="98.7817%" y="511.50"></text></g><g><title>common_interrupt (40,087,439 samples, 0.04%)</title><rect x="98.5157%" y="533" width="0.0364%" height="15" fill="rgb(249,221,15)" fg:x="108423367605" fg:w="40087439"/><text x="98.7657%" y="543.50"></text></g><g><title>asm_common_interrupt (40,638,952 samples, 0.04%)</title><rect x="98.5157%" y="549" width="0.0369%" height="15" fill="rgb(233,34,13)" fg:x="108423367605" fg:w="40638952"/><text x="98.7657%" y="559.50"></text></g><g><title>irqentry_enter (20,803,961 samples, 0.02%)</title><rect x="98.5526%" y="533" width="0.0189%" height="15" fill="rgb(214,103,39)" fg:x="108464006557" fg:w="20803961"/><text x="98.8026%" y="543.50"></text></g><g><title>__sysvec_apic_timer_interrupt (11,587,288 samples, 0.01%)</title><rect x="98.6064%" y="517" width="0.0105%" height="15" fill="rgb(251,126,39)" fg:x="108523194603" fg:w="11587288"/><text x="98.8564%" y="527.50"></text></g><g><title>ct_irq_enter (14,459,361 samples, 0.01%)</title><rect x="98.6169%" y="517" width="0.0131%" height="15" fill="rgb(214,216,36)" fg:x="108534781891" fg:w="14459361"/><text x="98.8669%" y="527.50"></text></g><g><title>__lock_acquire (12,051,337 samples, 0.01%)</title><rect x="98.6930%" y="453" width="0.0110%" height="15" fill="rgb(220,221,8)" fg:x="108618553301" fg:w="12051337"/><text x="98.9430%" y="463.50"></text></g><g><title>lock_acquire (44,521,229 samples, 0.04%)</title><rect x="98.6681%" y="469" width="0.0405%" height="15" fill="rgb(240,216,3)" fg:x="108591151520" fg:w="44521229"/><text x="98.9181%" y="479.50"></text></g><g><title>read_tsc (32,527,931 samples, 0.03%)</title><rect x="98.7169%" y="469" width="0.0296%" height="15" fill="rgb(232,218,17)" fg:x="108644802627" fg:w="32527931"/><text x="98.9669%" y="479.50"></text></g><g><title>ktime_get (97,776,446 samples, 0.09%)</title><rect x="98.6581%" y="485" width="0.0888%" height="15" fill="rgb(229,163,45)" fg:x="108580161796" fg:w="97776446"/><text x="98.9081%" y="495.50"></text></g><g><title>tick_check_oneshot_broadcast_this_cpu (201,365,212 samples, 0.18%)</title><rect x="98.7606%" y="485" width="0.1830%" height="15" fill="rgb(231,110,42)" fg:x="108692967776" fg:w="201365212"/><text x="99.0106%" y="495.50"></text></g><g><title>__lock_acquire (11,551,501 samples, 0.01%)</title><rect x="98.9557%" y="453" width="0.0105%" height="15" fill="rgb(208,170,48)" fg:x="108907695165" fg:w="11551501"/><text x="99.2057%" y="463.50"></text></g><g><title>lock_acquire (27,477,886 samples, 0.02%)</title><rect x="98.9479%" y="469" width="0.0250%" height="15" fill="rgb(239,116,25)" fg:x="108899040700" fg:w="27477886"/><text x="99.1979%" y="479.50"></text></g><g><title>tick_irq_enter (375,691,956 samples, 0.34%)</title><rect x="98.6468%" y="501" width="0.3414%" height="15" fill="rgb(219,200,50)" fg:x="108567676911" fg:w="375691956"/><text x="98.8968%" y="511.50"></text></g><g><title>tick_nohz_stop_idle (47,924,009 samples, 0.04%)</title><rect x="98.9446%" y="485" width="0.0435%" height="15" fill="rgb(245,200,0)" fg:x="108895444858" fg:w="47924009"/><text x="99.1946%" y="495.50"></text></g><g><title>irq_enter_rcu (392,819,566 samples, 0.36%)</title><rect x="98.6313%" y="517" width="0.3569%" height="15" fill="rgb(245,119,33)" fg:x="108550666569" fg:w="392819566"/><text x="98.8813%" y="527.50"></text></g><g><title>irqentry_enter (42,605,585 samples, 0.04%)</title><rect x="98.9979%" y="517" width="0.0387%" height="15" fill="rgb(231,125,12)" fg:x="108954145129" fg:w="42605585"/><text x="99.2479%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (537,081,528 samples, 0.49%)</title><rect x="98.5526%" y="549" width="0.4880%" height="15" fill="rgb(216,96,41)" fg:x="108464006557" fg:w="537081528"/><text x="98.8026%" y="559.50"></text></g><g><title>sysvec_apic_timer_interrupt (516,277,567 samples, 0.47%)</title><rect x="98.5715%" y="533" width="0.4691%" height="15" fill="rgb(248,43,45)" fg:x="108484810518" fg:w="516277567"/><text x="98.8215%" y="543.50"></text></g><g><title>ct_irq_enter (17,040,276 samples, 0.02%)</title><rect x="99.0681%" y="517" width="0.0155%" height="15" fill="rgb(217,222,7)" fg:x="109031331178" fg:w="17040276"/><text x="99.3181%" y="527.50"></text></g><g><title>lock_acquire (15,308,921 samples, 0.01%)</title><rect x="99.1129%" y="469" width="0.0139%" height="15" fill="rgb(233,28,6)" fg:x="109080680811" fg:w="15308921"/><text x="99.3629%" y="479.50"></text></g><g><title>ktime_get (26,989,641 samples, 0.02%)</title><rect x="99.1065%" y="485" width="0.0245%" height="15" fill="rgb(231,218,15)" fg:x="109073681052" fg:w="26989641"/><text x="99.3565%" y="495.50"></text></g><g><title>tick_check_oneshot_broadcast_this_cpu (46,037,044 samples, 0.04%)</title><rect x="99.1335%" y="485" width="0.0418%" height="15" fill="rgb(226,171,48)" fg:x="109103402450" fg:w="46037044"/><text x="99.3835%" y="495.50"></text></g><g><title>irq_enter_rcu (104,237,085 samples, 0.09%)</title><rect x="99.0835%" y="517" width="0.0947%" height="15" fill="rgb(235,201,9)" fg:x="109048371454" fg:w="104237085"/><text x="99.3335%" y="527.50"></text></g><g><title>tick_irq_enter (85,912,146 samples, 0.08%)</title><rect x="99.1002%" y="501" width="0.0781%" height="15" fill="rgb(217,80,15)" fg:x="109066696393" fg:w="85912146"/><text x="99.3502%" y="511.50"></text></g><g><title>ct_irq_enter (23,530,732 samples, 0.02%)</title><rect x="99.4003%" y="501" width="0.0214%" height="15" fill="rgb(219,152,8)" fg:x="109396931265" fg:w="23530732"/><text x="99.6503%" y="511.50"></text></g><g><title>ct_nmi_enter (19,264,671 samples, 0.02%)</title><rect x="99.4041%" y="485" width="0.0175%" height="15" fill="rgb(243,107,38)" fg:x="109401197326" fg:w="19264671"/><text x="99.6541%" y="495.50"></text></g><g><title>irqentry_enter (272,888,096 samples, 0.25%)</title><rect x="99.1813%" y="517" width="0.2480%" height="15" fill="rgb(231,17,5)" fg:x="109155971611" fg:w="272888096"/><text x="99.4313%" y="527.50"></text></g><g><title>asm_sysvec_call_function_single (428,523,386 samples, 0.39%)</title><rect x="99.0406%" y="549" width="0.3894%" height="15" fill="rgb(209,25,54)" fg:x="109001088085" fg:w="428523386"/><text x="99.2906%" y="559.50"></text></g><g><title>sysvec_call_function_single (419,871,243 samples, 0.38%)</title><rect x="99.0484%" y="533" width="0.3815%" height="15" fill="rgb(219,0,2)" fg:x="109009740228" fg:w="419871243"/><text x="99.2984%" y="543.50"></text></g><g><title>poll_idle (11,246,580 samples, 0.01%)</title><rect x="99.4348%" y="549" width="0.0102%" height="15" fill="rgb(246,9,5)" fg:x="109434900706" fg:w="11246580"/><text x="99.6848%" y="559.50"></text></g><g><title>cpuidle_enter_state (1,069,261,972 samples, 0.97%)</title><rect x="98.4788%" y="565" width="0.9716%" height="15" fill="rgb(226,159,4)" fg:x="108382793534" fg:w="1069261972"/><text x="98.7288%" y="575.50"></text></g><g><title>error_entry (97,362,308 samples, 0.09%)</title><rect x="99.4503%" y="565" width="0.0885%" height="15" fill="rgb(219,175,34)" fg:x="109452055506" fg:w="97362308"/><text x="99.7003%" y="575.50"></text></g><g><title>sysvec_apic_timer_interrupt (16,174,760 samples, 0.01%)</title><rect x="99.5443%" y="565" width="0.0147%" height="15" fill="rgb(236,10,46)" fg:x="109555419249" fg:w="16174760"/><text x="99.7943%" y="575.50"></text></g><g><title>sysvec_call_function_single (14,665,155 samples, 0.01%)</title><rect x="99.5590%" y="565" width="0.0133%" height="15" fill="rgb(240,211,16)" fg:x="109571594009" fg:w="14665155"/><text x="99.8090%" y="575.50"></text></g><g><title>cpuidle_enter (1,371,757,208 samples, 1.25%)</title><rect x="98.3284%" y="581" width="1.2464%" height="15" fill="rgb(205,3,43)" fg:x="108217336811" fg:w="1371757208"/><text x="98.5784%" y="591.50"></text></g><g><title>menu_select (16,565,781 samples, 0.02%)</title><rect x="99.5757%" y="565" width="0.0151%" height="15" fill="rgb(245,7,22)" fg:x="109589995097" fg:w="16565781"/><text x="99.8257%" y="575.50"></text></g><g><title>cpuidle_select (16,608,980 samples, 0.02%)</title><rect x="99.5757%" y="581" width="0.0151%" height="15" fill="rgb(239,132,32)" fg:x="109589995097" fg:w="16608980"/><text x="99.8257%" y="591.50"></text></g><g><title>lock_pin_lock (18,059,793 samples, 0.02%)</title><rect x="99.6114%" y="533" width="0.0164%" height="15" fill="rgb(228,202,34)" fg:x="109629266266" fg:w="18059793"/><text x="99.8614%" y="543.50"></text></g><g><title>do_raw_spin_lock (13,388,963 samples, 0.01%)</title><rect x="99.6451%" y="501" width="0.0122%" height="15" fill="rgb(254,200,22)" fg:x="109666438818" fg:w="13388963"/><text x="99.8951%" y="511.50"></text></g><g><title>__lock_acquire (18,457,254 samples, 0.02%)</title><rect x="99.6800%" y="485" width="0.0168%" height="15" fill="rgb(219,10,39)" fg:x="109704836422" fg:w="18457254"/><text x="99.9300%" y="495.50"></text></g><g><title>lock_acquire (46,561,095 samples, 0.04%)</title><rect x="99.6573%" y="501" width="0.0423%" height="15" fill="rgb(226,210,39)" fg:x="109679827781" fg:w="46561095"/><text x="99.9073%" y="511.50"></text></g><g><title>_raw_spin_lock_nested (62,370,745 samples, 0.06%)</title><rect x="99.6438%" y="517" width="0.0567%" height="15" fill="rgb(208,219,16)" fg:x="109664988138" fg:w="62370745"/><text x="99.8938%" y="527.50"></text></g><g><title>sched_clock (115,252,770 samples, 0.10%)</title><rect x="99.7445%" y="501" width="0.1047%" height="15" fill="rgb(216,158,51)" fg:x="109775780635" fg:w="115252770"/><text x="99.9945%" y="511.50"></text></g><g><title>sched_clock_noinstr (111,567,471 samples, 0.10%)</title><rect x="99.7478%" y="485" width="0.1014%" height="15" fill="rgb(233,14,44)" fg:x="109779465934" fg:w="111567471"/><text x="99.9978%" y="495.50"></text></g><g><title>native_sched_clock (111,567,471 samples, 0.10%)</title><rect x="99.7478%" y="469" width="0.1014%" height="15" fill="rgb(237,97,39)" fg:x="109779465934" fg:w="111567471"/><text x="99.9978%" y="479.50"></text></g><g><title>lock_pin_lock (164,430,686 samples, 0.15%)</title><rect x="99.7005%" y="517" width="0.1494%" height="15" fill="rgb(218,198,43)" fg:x="109727358883" fg:w="164430686"/><text x="99.9505%" y="527.50"></text></g><g><title>rq_lock_irqsave (245,795,615 samples, 0.22%)</title><rect x="99.6278%" y="533" width="0.2233%" height="15" fill="rgb(231,104,20)" fg:x="109647326059" fg:w="245795615"/><text x="99.8778%" y="543.50"></text></g><g><title>enqueue_task (12,344,649 samples, 0.01%)</title><rect x="99.8518%" y="517" width="0.0112%" height="15" fill="rgb(254,36,13)" fg:x="109893934870" fg:w="12344649"/><text x="100.1018%" y="527.50"></text></g><g><title>ttwu_do_activate (13,872,529 samples, 0.01%)</title><rect x="99.8511%" y="533" width="0.0126%" height="15" fill="rgb(248,14,50)" fg:x="109893121674" fg:w="13872529"/><text x="100.1011%" y="543.50"></text></g><g><title>sched_ttwu_pending (295,416,857 samples, 0.27%)</title><rect x="99.6059%" y="549" width="0.2684%" height="15" fill="rgb(217,107,29)" fg:x="109623300283" fg:w="295416857"/><text x="99.8559%" y="559.50"></text></g><g><title>update_rq_clock (11,722,937 samples, 0.01%)</title><rect x="99.8637%" y="533" width="0.0107%" height="15" fill="rgb(251,169,33)" fg:x="109906994203" fg:w="11722937"/><text x="100.1137%" y="543.50"></text></g><g><title>__flush_smp_call_function_queue (328,632,368 samples, 0.30%)</title><rect x="99.5998%" y="565" width="0.2986%" height="15" fill="rgb(217,108,32)" fg:x="109616557118" fg:w="328632368"/><text x="99.8498%" y="575.50"></text></g><g><title>update_rq_clock (26,027,895 samples, 0.02%)</title><rect x="99.8748%" y="549" width="0.0236%" height="15" fill="rgb(219,66,42)" fg:x="109919161591" fg:w="26027895"/><text x="100.1248%" y="559.50"></text></g><g><title>flush_smp_call_function_queue (341,884,627 samples, 0.31%)</title><rect x="99.5908%" y="581" width="0.3106%" height="15" fill="rgb(206,180,7)" fg:x="109606604077" fg:w="341884627"/><text x="99.8408%" y="591.50"></text></g><g><title>finish_task_switch (14,189,657 samples, 0.01%)</title><rect x="99.9098%" y="549" width="0.0129%" height="15" fill="rgb(208,226,31)" fg:x="109957726269" fg:w="14189657"/><text x="100.1598%" y="559.50"></text></g><g><title>__sched_text_start (45,515,324 samples, 0.04%)</title><rect x="99.9027%" y="565" width="0.0414%" height="15" fill="rgb(218,26,49)" fg:x="109949908579" fg:w="45515324"/><text x="100.1527%" y="575.50"></text></g><g><title>schedule_idle (47,054,927 samples, 0.04%)</title><rect x="99.9027%" y="581" width="0.0428%" height="15" fill="rgb(233,197,48)" fg:x="109949908579" fg:w="47054927"/><text x="100.1527%" y="591.50"></text></g><g><title>tick_nohz_idle_exit (25,649,971 samples, 0.02%)</title><rect x="99.9552%" y="581" width="0.0233%" height="15" fill="rgb(252,181,51)" fg:x="110007669914" fg:w="25649971"/><text x="100.2052%" y="591.50"></text></g><g><title>tick_nohz_stop_idle (15,987,105 samples, 0.01%)</title><rect x="99.9640%" y="565" width="0.0145%" height="15" fill="rgb(253,90,19)" fg:x="110017332780" fg:w="15987105"/><text x="100.2140%" y="575.50"></text></g><g><title>do_idle (1,828,671,121 samples, 1.66%)</title><rect x="98.3212%" y="597" width="1.6616%" height="15" fill="rgb(215,171,30)" fg:x="108209374316" fg:w="1828671121"/><text x="98.5712%" y="607.50"></text></g><g><title>cpu_startup_entry (1,831,185,732 samples, 1.66%)</title><rect x="98.3200%" y="613" width="1.6639%" height="15" fill="rgb(214,222,9)" fg:x="108208007830" fg:w="1831185732"/><text x="98.5700%" y="623.50"></text></g><g><title>[vmlinux] (1,831,962,445 samples, 1.66%)</title><rect x="98.3200%" y="629" width="1.6646%" height="15" fill="rgb(223,3,22)" fg:x="108208007830" fg:w="1831962445"/><text x="98.5700%" y="639.50"></text></g><g><title>swapper (1,845,944,733 samples, 1.68%)</title><rect x="98.3107%" y="661" width="1.6773%" height="15" fill="rgb(225,196,46)" fg:x="108197837586" fg:w="1845944733"/><text x="98.5607%" y="671.50"></text></g><g><title>secondary_startup_64_no_verify (1,835,774,489 samples, 1.67%)</title><rect x="98.3200%" y="645" width="1.6680%" height="15" fill="rgb(209,110,37)" fg:x="108208007830" fg:w="1835774489"/><text x="98.5700%" y="655.50"></text></g><g><title>all (110,056,997,628 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(249,89,12)" fg:x="0" fg:w="110056997628"/><text x="0.2500%" y="687.50"></text></g></svg></svg>